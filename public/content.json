{"meta":{"title":"ShouRou","subtitle":"DaydreamAtNight","description":null,"author":"Ryan LI","url":"https://daydreamatnight.github.io","root":"/"},"pages":[{"title":"about","date":"2022-04-30T08:23:48.000Z","updated":"2022-05-01T16:39:30.258Z","comments":false,"path":"about/index.html","permalink":"https://daydreamatnight.github.io/about/index.html","excerpt":"","text":"This is This is the author of ShouRou, Currently an automotive CFD engineer in Shanghai Volkswagen Automotive Co., Ltd. Graduated from Imperial College London with a degree in MSc Advanced Computational Methods for Aeronautics Interested in Computational fluid dynamic Deep Learning Coding(Debugging) with Goldberg Variations More on my CV"},{"title":"CV","date":"2022-05-01T08:58:03.000Z","updated":"2022-05-01T16:37:19.323Z","comments":false,"path":"CV/index.html","permalink":"https://daydreamatnight.github.io/CV/index.html","excerpt":"","text":"Work Experience Automotive CFD Engineer 04/2021- present Pre R&amp;D, Shanghai Volkswagen Automotive Co., Ltd. OpenFOAM developing on automotive aerodynamic Intelligent aided fluid dynamic Education Background MSc: Advanced Computational Methods for Aeronautics, Flow Management and Fluid Structure Interaction 09/2019-11/2020 Department of Aeronautics, Imperial college London Grade: 74.3/100 (Merit) Modules include: Computational fluid dynamics, High-Performance Computing, Aeroservoelasticity, introduce to flow control, Hydrodynamic Stability, Separated Flows and Fluid Structure Interaction, etc. BEng: Flight Vehicle Propulsion Engineering 09/2015-07/2019 School of Power and Energy, Northwestern Polytechnical University Grade: 86.5/100 Modules include: Fundamentals of Gas Dynamics, Fluid Mechanics, Heat Transfer, Mechanical theory, Turbomachinery etc. Exchange student in senior year at Polytechnic University of Madrid Summer school: Experimental Fluid Mechanics 8/2018 Faculty of Mechanical Engineering, University of Southern Denmark Performing a team project to optimise a wind turbine airfoil Data analysing of wind tunnel and water channel PIV results Visiting the LM Wind Power Test and Validation Centre Pre-university Qualification: Total Score of NCEE (GaoKao): 619/750 Academic Projects Bifurcation and Oscillation Effects of Gyrotactic Swimming Microorganism Suspension in Vertical Pipe 05/2020-10/2020 Imperial College London MSc Individual Project Director: Dr. Yongyun Hwang Learning concepts of bioreactors and behaviours of micro-algae Developing numerical solvers for microorganism suspension Exploring and analysing bifurcations and instabilities under different flow conditions Flow Field Analysis Based on RANS Solver and BiGlobal Stability Theory 02/2019-06/2019 Undergraduate Graduation Project &amp; Erasmus+ Scholarship Programme Director: Professor Eusebio Valero Sanchez &amp; Associate Professor Yaguo Lyu Handling of the necessary tool, DLR TAU-Code Performing simulations of non-stationary problems Analysing the stability of the flow fields by POD and DMD Design Research on Bionic Anti-drag Propeller 04/2017-04/2018 China college students “Internet+” Innovation and Entrepreneurship Competition Director: Professor Wang yangang Proposing and design a novel drone propeller with serrated leading edge as project manager Carrying out 3D modelling, CFD simulations and data analysis Starting Test of Pulse Jet Engine 07/2017-08/2017 Scientific Research Practice Programme Director: Professer Yan Hong Setting up the experiment platform; Measuring the thrust and pressure pulse frequency of a valveless pulse engine. Professional Skills I.T. SKILLS: Python, C++ Related software: OpenFOAM, CATIA"}],"posts":[{"title":"FVM schemes fundamentals","slug":"FVM-schemes-fundamentals","date":"2022-06-18T10:08:24.000Z","updated":"2022-06-23T14:58:55.347Z","comments":true,"path":"2022/06/18/FVM-schemes-fundamentals/","link":"","permalink":"https://daydreamatnight.github.io/2022/06/18/FVM-schemes-fundamentals/","excerpt":"This is the essence of CFD, advecting with the discontinuities due to inviscid fluid PDEs. Several computational schemes dealing with them are introduced then tested in OpenFOAM on the 1D shockTube case.","text":"This is the essence of CFD, advecting with the discontinuities due to inviscid fluid PDEs. Several computational schemes dealing with them are introduced then tested in OpenFOAM on the 1D shockTube case. This is a review of my graduate CFD course and the application of the theory to CFD software. The aim is to further the understanding of finite volume method and the fvscheme dict in OpenFOAM. Reference books: E.F. Toro, Riemann Solvers and Numerical Methods for Fluid Dynamics, Springer-Verlag. R.J. LeVeque, Finite Volume Methods for Hyperbolic Problems, Cambridge University Press. Scalar conservation laws 1-D theory. Examples of 1-D hyperbolic conservation laws. Characteristics discontinuities and jump conditions. Weak solutions and entropy condition. Linear versus non-linear advection Challenges As we all know, flow fluids are governed by 3 hyperbolic PDEs (conservation of mass, momentum and energy). These equations are highly non-linear and they can lead to discontinuities even with a smooth initial conditions, which is very difficult to solve numerically. Simple FDM will definitely fail on these discontinuities and shocks. Recall the incompressible NS equation that we've learned in the kindergarten: \\[ \\frac{\\partial \\mathbf{V}}{\\partial t} + \\underbrace{\\left(\\boldsymbol{\\nabla}\\cdot\\mathbf{V}\\right)\\mathbf{V}}_{\\text{convection}} = \\frac{\\nabla p}{\\rho} + \\mathbf{g}+ \\underbrace{\\nu \\boldsymbol{\\nabla}^2\\mathbf{V}}_{\\text{diffusion}} \\] the viscous diffusion term in the equation leads to parabolic equations with smooth solutions, which will save our life. But with very high \\(Re\\), the equation reduces to pure hyperbolic inviscid Euler Equation, and the resultant discontinuity is a nightmare for most of the numerical schemes. The presence of discontinuities requires weak solutions, as oppose to strong solutions. However, the weak solutions give up the uniqueness in math, i.e there exist a large number of solutions that may not be physical acceptable, i.e. extra conditions are needed to justify the solution. They are: Rankine-Hugoniot condition deals with the discontinuity Entropy condition satisfies the physics Just here to remind that we are dealing with inviscid flow, shocks, nothing to do with turbulence. Scalar conservation laws 1D law First let's introduce a simple example to present the problem: consider an 1D control volume \\([a,b]\\), during the time interval \\([t_1,t_2]\\) . The scalar conservation law can be stated as that during \\([t_1,t_2]\\) , change in total conserved quantity in \\([a,b]\\) equals to the net flux through the boundaries \\(a\\), \\(b\\): \\[ \\frac{d}{dt}\\int_a^bu(x,t) = -\\left[f(u(b,t))-f(u(a,t))\\right] \\] where \\(u(x,t)\\) is called the conserved quantity while \\(f\\) denotes the flux. This equation often describes the transport phenomena. You can not create, you can not destroy. Integral, differential conservative and primitive forms The 1D law can be extended in 2D with the relation, in integral form. \\[ \\frac{d}{d t} \\int_{\\Omega} \\mathbf{u} d \\Omega+\\int_{\\Gamma} \\mathbf{f}(\\mathbf{u}) \\cdot \\mathbf{n} d \\Gamma=0 \\] The FVM and FEM solves the integral form, while the FDM solves the primitive form. Apply the Gauss divergence theorem the relation can be represented as differential form: \\[ \\begin{aligned} \\int_{\\Omega}\\left\\{\\frac{\\partial \\mathbf{u}}{\\partial t}+\\nabla \\cdot \\mathbf{f}(\\mathbf{u})\\right\\} d \\Omega=0&amp; \\\\ \\Rightarrow \\color{purple}{ \\forall \\Omega,\\quad \\frac{\\partial \\mathbf{u}}{\\partial t}+\\nabla \\cdot \\mathbf{f}(\\mathbf{u})=0} &amp; \\end{aligned} \\] above is called the differential conservative form. The only \\(u\\) changed in time is due to the flux \\(f\\). There is no extra assumptions introduced. In comparison, with an assumption of \\(\\mathbf{a} = \\frac{d\\mathbf{f}}{d\\mathbf{u}}\\), the equation can be rewritten with the chain rule, as the differential primitive form : \\[ \\quad \\frac{\\partial \\mathbf{u}}{\\partial t}+\\mathbf{a}(\\mathbf{u})\\nabla \\cdot \\mathbf{u}=0, \\quad \\text{where }\\mathbf{a} = \\frac{d\\mathbf{f}}{d\\mathbf{u}} \\] This form is identical to above in mathematics, but it will lead to problems numerically when dealing with discontinuities (to be discussed later). Rankine-Hugoniot Jump condition When dealing with discontinuities, the integral form is well defined, but not the differential forms. The differential solvers can't deal with the drastic derivatives so instead they solve an extra jump condition which can be derived from the well-defined integral form (discussed later). For an 1D jump discontinuity travelling at the speed \\(s\\): \\[ f(u_r)-f(u_l) = s(u_r-u_s) \\] where \\(u_r\\), \\(u_l\\) represent the speeds just at the left and the right of the discontinuity. 1D Euler equations Its time to introduce the 1D Euler equations: NS equations with 0 viscosity or heat conduction terms: \\[ \\frac{\\partial}{\\partial t}\\left[\\begin{array}{l} \\rho \\\\ \\rho u \\\\ \\rho E \\end{array}\\right]+\\frac{\\partial}{\\partial x}\\left[\\begin{array}{l} \\rho u \\\\ \\rho u^{2}+P \\\\ \\rho u\\left(E+\\frac{P}{\\rho}\\right) \\end{array}\\right]=0 \\] And the conservation form is: \\[ \\frac{\\partial \\mathbf{q}}{\\partial t}+\\frac{\\partial \\mathbf{F}(\\mathbf{q})}{\\partial x}=0 \\] for the quantity vector \\(\\mathbf{q}\\) with the flux vector \\(\\mathbf{F}\\). Conservation vs non-conservation form Similar to before, with terms in a form of \\(\\partial_x{uv}\\): \\[ \\frac{\\partial uv}{\\partial x} \\neq u\\frac{\\partial v}{\\partial x}+ v\\frac{\\partial u}{\\partial x} \\] When dealing with the discontinuities, the conservative LHS locates the shock directly, while the non-conservative RHS does not. (to be discussed later) Close the Euler equation Unlike the well-posed NS equation, in Euler equation, we have 4 unknowns but only 3 equations. So an extra state equation, i.e. extra assumption of the gas state is needed. Sometimes it's the idea gas assumption \\(p = \\rho RT\\), but for high \\(Re\\) compressible flows, equations of state are required to describe the relation between \\(p, \\rho \\text{ and }T\\). We are going to use the 1D Euler equations to evaluate the numerical methods. Analytical solutions of Euler equations Linear Advection Equation In 1D, the linear advection law for \\(u(x,t)\\) is: \\[ \\color{purple} \\frac{\\partial u }{\\partial t} + a(u)\\frac{\\partial u }{\\partial x} = 0 \\] where \\(a(u)\\) denotes the advection speed. Plus an initial condition \\(u(x,0)\\) and boundary condition (discuss later). solution This is a simple 2-variable PDE and we can apply the method of characteristics: Imagine a characteristic line \\(s\\), we have the chain rule: \\[ \\frac{d u(x,t)}{d s} = \\frac{d t}{d s}\\frac{\\partial u}{\\partial t} + \\frac{d x}{d s} \\frac{\\partial u}{\\partial x} \\] As a result we can construct, \\[ \\begin{aligned} \\frac{d u(x,t)}{d s} = 0,\\quad\\frac{d t}{d s}=1, \\quad \\frac{d x}{d s}= a \\\\ \\Rightarrow \\quad \\frac{d u}{0}=\\frac{d t}{1}=\\frac{d x}{a}= d s \\end{aligned} \\] Select the available equations we have the characteristic equation: \\[ \\begin{aligned} \\frac{d x}{d t} &amp;= a \\\\ \\Rightarrow\\quad x &amp;= x_0 + a(u)t \\end{aligned} \\] If \\(u(x_0,0)=u_0\\), then \\(\\frac{dx}{dt}=a(u_0)\\), the characteristic equation is therefore: \\[ \\color{purple} x = x_0 + a(u_0)t \\] And the solution to the problem is: \\[ u(x,t) = f(x_0) = f(x-a(u_0)t) \\] Linear Advection Equation Example Solve the following advection equation where \\(a = 0.5\\) \\[ \\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x }= 0 \\] with initial condition \\[ u(x,0) = exp(-32x^2) \\] solution The characteristics are straight lines in the \\((x,t)\\) plane: \\[ x = 0.5t+x_0 \\] And the solutions are therefore: \\[ u(x,t) = f(x_0) = exp(-32(x-0.5t)^2) \\] Inviscid Burgers' equation In 1D, the inviscid Burgers' equation for \\(u(x,t)\\) is: \\[ \\color{purple} \\frac{\\partial u }{\\partial t} + \\frac{f(u) }{\\partial x} = 0,\\quad\\text{where }f(u)=\\frac{1}{2}u^2 \\] The conservative form for this equation： \\[ \\frac{\\partial u }{\\partial t} + \\frac{\\partial(\\frac{1}{2}u^2) }{\\partial x} = 0 \\] and the primitive form: \\[ \\frac{\\partial u }{\\partial t} + u\\frac{\\partial u }{\\partial x} = 0 \\] same form as the 1D linear advection equation with \\(a(u)=u\\). Burgers' equation Example Solve the advection equation: \\[ \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x }= 0 \\] with initial condition: \\[ u(x,0) = 1-\\cos(x) \\] solution Similarly, the characteristics are described by: \\[ x = x_0 + ut \\] and the solution: \\[ u = 1-\\cos(x-ut) \\] which is implicit. It is can be plotted anyway: discussion For non-linear conservation laws, the characteristics may cross within finite time. This would suggest a multi-valued solution which does not make sense physically. Where the characteristics start crossing, the solution become discontinuous. And the formation of discontinuities is possible even for smooth initial data. So the differential primitive form of the equations is no longer valid \\(\\Rightarrow\\) only the integral form can deal with discontinuities. And the differential form can be completed by a jump condition derived from the integral form. \\(\\Rightarrow\\) we need weak solutions. The mathematical theory of partial differential equations introduces the concept of weak solutions. Rankine-Hugoniot condition The Riemann Problem In order to understand the behaviour of the solution at discontinuities, it is useful to start with a simplified problem. The Riemann problem is a conservation law with a single discontinuity. \\[ \\color{purple} \\frac{\\partial u}{\\partial t} + \\frac{\\partial f(u)}{\\partial x} = 0 \\] with \\[ \\color{purple} u(x, 0)= \\begin{cases}u_{L} &amp; x \\leq 0 \\\\ u_{R} &amp; x&gt;0\\end{cases} \\] Shock Path Take the control volume between boundaries \\(x_L\\) and \\(x_R\\), which are taken sufficient close to the shock so that spatial variations of the solution become unimportant. and are taken sufficient apart from the shock so that the boundary will note interfere with the shock motion over time interval \\(\\delta t\\). Recall the integral function: \\[ \\frac{d}{dt}\\int_{x_L}^{x_R}udx = f(u_L)-f(u_R) \\] If the position of the shock is \\(x = X(t)\\), with \\(x_L&lt; X (t) &lt;x_R\\), the values of \\(u(x,t)\\) inside the integral are close to the constants \\(u_L\\) and \\(u_R\\) and we can write: \\[ \\begin{aligned} \\frac{d}{dt}\\int_{x_L}^{X}u_Ldx + \\frac{d}{dt}\\int_{X}^{x_R}u_Rdx= f(u_L)-f(u_R)\\\\ \\frac{d}{dt}\\left[(x_L-X)u_L + (X-x_R)u_R\\right]= f(u_L)-f(u_R)\\\\ \\end{aligned} \\] Given the shock speed (slope of the shock path) \\(s = \\frac{dX}{dt}\\), we have: \\[ \\begin{aligned} s\\left(u_L - u_R\\right)&amp;= f(u_L)-f(u_R)\\\\ \\color{purple} s= \\frac{dX}{dt}&amp;\\color{purple} = \\frac{f(u_L)-f(u_R)}{\\left(u_L - u_R\\right)}= \\frac{f(u_R)-f(u_L)}{\\left(u_R - u_L\\right)} \\end{aligned} \\] The equation above is the Rankine-Hugoniot condition, also called the \"jump condition\". Correspondingly, weak solutions represents the solutions of the PDE where the solution is smooth and of a Rankine-Hugoniot condition at discontinuities. And they are not unique. Strong solution \\(\\Rightarrow\\) weak solutionWeak solution \\(\\nLeftarrow\\) Strong solution Non-uniqueness of weak solutions Example of Riemann Problem with Burgers's equation Consider the Burgers' equation under a Riemann Problem: \\[ \\begin{aligned} \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x }&amp;= 0, \\\\ \\text{with } u(x, 0)&amp;= \\begin{cases}1 &amp; x \\leq 0 \\\\ 0 &amp; x&gt;0\\end{cases} \\end{aligned} \\] The characteristics are of the form: \\(x = x_0 + ut\\) In \\(x-t\\) plane, the characteristics line: \\[ \\begin{cases} x = t - x_0 &amp; x_0 \\leq 0 \\\\ x = x_0 &amp; x_0 &gt; 0\\end{cases} \\] And the according to the Rankine-Hugonoit condition, the speed of the shock is: \\[ s = \\frac{f(u_L)-f(u_R)}{\\left(u_L - u_R\\right)}= \\frac{-1/2-0}{\\left(1-0\\right)} = \\frac{1}{2} \\] and the shock path is: \\[ x = \\frac{1}{2} t \\] therefore, the solution is: \\[ u(x,t) = \\begin{cases} 1 &amp; x \\leq \\frac{1}{2}t \\\\ 0 &amp; x&gt; \\frac{1}{2}t\\end{cases} \\] Upwind Riemann Problem with Burgers's equation For the upwind case: \\[ \\begin{aligned} \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x }&amp;= 0, \\\\ \\text{with } u(x, 0)&amp;= \\begin{cases}u_L &amp; x \\leq 0 \\\\ u_R &amp; x&gt;0\\end{cases} \\end{aligned} \\] with \\(u_L&gt;u_R\\). And the shock is created with a speed: \\[ s = \\frac{1}{2}(u_R+u_L) \\] and the solution: \\[ u(x,t) = \\begin{cases} u_L &amp; x \\leq \\frac{1}{2}t \\\\ u_R &amp; x&gt; \\frac{1}{2}t\\end{cases} \\] Example of non-unique downwind Riemann Problem with Burgers's equation Reverse the initial condition in the previous example: \\[ \\begin{aligned} \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x }&amp;= 0, \\\\ \\text{with } u(x, 0)&amp;= \\begin{cases}0 &amp; x \\leq 0 \\\\ 1 &amp; x&gt;0\\end{cases} \\end{aligned} \\] the characteristics become: Solution in the blue area (\\(0&lt;x&lt;t\\)) is not defined. So here proposes 2 possible solutions, both are mathematical acceptable: Solution A: \\[ u(x, t)= \\begin{cases}0 &amp; \\text { if } \\quad \\frac{x}{t}&lt;s(=0.5) \\\\ 1 &amp; \\text { if } \\quad \\frac{x}{t}&gt;s(=0.5)\\end{cases} \\] Solution B: \\[ u(x, t)=\\left\\{\\begin{array}{ccc} 0 &amp; \\text { if } &amp; \\frac{x}{t}&lt;0 \\\\ \\frac{x}{t} &amp; \\text { if } &amp; 0&lt;\\frac{x}{t}&lt;1 \\\\ 1 &amp; \\text { if } &amp; \\frac{x}{t}&gt;1 \\end{array}\\right. \\] A little spoiler alert there: Solution B is physical, discussed in the next section. Exact solution to Riemann Problem with Burgers's equation In conclusion, For the Riemann Problem with Burgers's equation: \\[ \\begin{aligned} \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x }&amp;= 0, \\\\ \\text{with } u(x, 0)&amp;= \\begin{cases}u_L &amp; x \\leq 0 \\\\ u_R &amp; x&gt;0\\end{cases} \\end{aligned} \\] with \\(u_L&gt;u_R\\) A shock wave is created with a speed: \\[ V_s = \\frac{u_L+u_R}{2} \\] and the exact solution is: \\[ u(x, t)=\\left\\{\\begin{array}{ccc} u_L &amp; \\text { if } &amp; \\frac{x}{t}\\leq V_s \\\\ u_R &amp; \\text { if } &amp; \\frac{x}{t}&gt;V_s \\end{array}\\right. \\] with \\(u_L&lt;u_R\\) the exact solution is the rarefaction wave: \\[ u(x, t)=\\left\\{\\begin{array}{ccc} u_L &amp; \\text { if } &amp; \\frac{x}{t}&lt;0 \\\\ \\frac{x}{t} &amp; \\text { if } &amp; 0&lt;\\frac{x}{t}&lt;1 \\\\ u_R &amp; \\text { if } &amp; \\frac{x}{t}&gt;1 \\end{array}\\right. \\] if \\(u_L = -u_R\\), we have a sonic rarefaction wave. Entropy Conditions Why solution A is wrong? we need to impose additional conditions. There are two ways. Add a small diffusion term (2 nd order) manually on the RHS to remove the discontinuity. The weak solution then must satisfy: \\[ \\frac{\\partial u^\\epsilon}{\\partial t} + \\frac{\\partial f(u^\\epsilon)}{\\partial x} = \\epsilon\\frac{\\partial^2u^\\epsilon}{\\partial x^\\epsilon} \\] where \\(\\epsilon\\) is the viscosity coefficient, it introduces the dissipation, known as the vanishing viscosity concept, into the equation to smooth the solution. A little bit cheating but most of people do this. Add the entropy solution I first hearted Entropy back in my undergraduate thermodynamic course. But I still don't know what is Entropy. So here are some answers:In gas dynamics, entropy is a constant physical quantity along particles in smooth flow which can jump to a higher value through a shock.The second law of thermodynamics says that entropy can never go down.For an evolution equation the information should always flow from the initial data.We can see it is very difficult to define it, but in order to translate the defination into the entropy condition, we see entropy as the extra amount of energy that is not available to the system. There are again two options of entropy condition: Convex (concave) fluxes / Lax entropy condition \\[ f&#39;(u_L) &gt; s &gt; f&#39;(u_R) \\] and the characteristics must run into the shock, not emerge from it. Oleinik entropy condition Similar to Lax entropy condition, it says: \\[ \\frac{f(u)-f(u_L)}{u-u_L}\\geq s \\geq \\frac{f(u_R)-f(u)}{u_R-u} \\] and Lax and Oleinik are equivalent if \\(f(u)\\) is strictly convex i.e. \\(f&#39;&#39;(u)&lt;0\\). Numerical representation of discontinuities Requirements on numerical schemes. Conservative discretisation: Lax-Wendroff theorem. First versus second order schemes. Representation of discontinuities: physical aspects, shock fitting/capturing. Systems of conservation laws Jacobian matrices, linearized equations, conservative and characteristic variables. Rankine-Hugoniot jump conditions. Boundary conditions. Numerical schemes for non-linear conservation laws It is still an active research area and these are the classical methods:Centred schemes: one-step and two-step Lax Wendroff, MacCormack predictor-corrector. Artificial dissipation. Upwind schemes: flux vector and flux difference splitting. Monotone schemes: Godunov and Harten theorems. Exact and approximate Riemann solvers. High-order upwind schemes: the TVD property. The construction of TVD schemes using slope and flux limiters. WENO schemes: weighted essentially non-oscillatory methods Numerical schemes for multi-dimensional problems Finite differences and finite volume. Computational domain and boundary conditions. OpenFOAM demo on shockwave // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('echarts4941')); // 指定图表的配置项和数据 let legends = ['exact', 'linear', 'upwind', 'linearUpwind', 'QUICK', 'TVD-vanLeer', 'TVD-Minmod', 'TVD-SuperBee'] let xaxis = [0.0005, 0.0015, 0.0025, 0.0035, 0.0045, 0.0055, 0.0065, 0.0075, 0.0085, 0.0095, 0.0105, 0.0115, 0.0125, 0.0135, 0.0145, 0.0155, 0.0165, 0.0175, 0.0185, 0.0195, 0.0205, 0.0215, 0.0225, 0.0235, 0.0245, 0.0255, 0.0265, 0.0275, 0.0285, 0.0295, 0.0305, 0.0315, 0.0325, 0.0335, 0.0345, 0.0355, 0.0365, 0.0375, 0.0385, 0.0395, 0.0405, 0.0415, 0.0425, 0.0435, 0.0445, 0.0455, 0.0465, 0.0475, 0.0485, 0.0495, 0.0505, 0.0515, 0.0525, 0.0535, 0.0545, 0.0555, 0.0565, 0.0575, 0.0585, 0.0595, 0.0605, 0.0615, 0.0625, 0.0635, 0.0645, 0.0655, 0.0665, 0.0675, 0.0685, 0.0695, 0.0705, 0.0715, 0.0725, 0.0735, 0.0745, 0.0755, 0.0765, 0.0775, 0.0785, 0.0795, 0.0805, 0.0815, 0.0825, 0.0835, 0.0845, 0.0855, 0.0865, 0.0875, 0.0885, 0.0895, 0.0905, 0.0915, 0.0925, 0.0935, 0.0945, 0.0955, 0.0965, 0.0975, 0.0985, 0.0995, 0.1005, 0.1015, 0.1025, 0.1035, 0.1045, 0.1055, 0.1065, 0.1075, 0.1085, 0.1095, 0.1105, 0.1115, 0.1125, 0.1135, 0.1145, 0.1155, 0.1165, 0.1175, 0.1185, 0.1195, 0.1205, 0.1215, 0.1225, 0.1235, 0.1245, 0.1255, 0.1265, 0.1275, 0.1285, 0.1295, 0.1305, 0.1315, 0.1325, 0.1335, 0.1345, 0.1355, 0.1365, 0.1375, 0.1385, 0.1395, 0.1405, 0.1415, 0.1425, 0.1435, 0.1445, 0.1455, 0.1465, 0.1475, 0.1485, 0.1495, 0.1505, 0.1515, 0.1525, 0.1535, 0.1545, 0.1555, 0.1565, 0.1575, 0.1585, 0.1595, 0.1605, 0.1615, 0.1625, 0.1635, 0.1645, 0.1655, 0.1665, 0.1675, 0.1685, 0.1695, 0.1705, 0.1715, 0.1725, 0.1735, 0.1745, 0.1755, 0.1765, 0.1775, 0.1785, 0.1795, 0.1805, 0.1815, 0.1825, 0.1835, 0.1845, 0.1855, 0.1865, 0.1875, 0.1885, 0.1895, 0.1905, 0.1915, 0.1925, 0.1935, 0.1945, 0.1955, 0.1965, 0.1975, 0.1985, 0.1995, 0.2005, 0.2015, 0.2025, 0.2035, 0.2045, 0.2055, 0.2065, 0.2075, 0.2085, 0.2095, 0.2105, 0.2115, 0.2125, 0.2135, 0.2145, 0.2155, 0.2165, 0.2175, 0.2185, 0.2195, 0.2205, 0.2215, 0.2225, 0.2235, 0.2245, 0.2255, 0.2265, 0.2275, 0.2285, 0.2295, 0.2305, 0.2315, 0.2325, 0.2335, 0.2345, 0.2355, 0.2365, 0.2375, 0.2385, 0.2395, 0.2405, 0.2415, 0.2425, 0.2435, 0.2445, 0.2455, 0.2465, 0.2475, 0.2485, 0.2495, 0.2505, 0.2515, 0.2525, 0.2535, 0.2545, 0.2555, 0.2565, 0.2575, 0.2585, 0.2595, 0.2605, 0.2615, 0.2625, 0.2635, 0.2645, 0.2655, 0.2665, 0.2675, 0.2685, 0.2695, 0.2705, 0.2715, 0.2725, 0.2735, 0.2745, 0.2755, 0.2765, 0.2775, 0.2785, 0.2795, 0.2805, 0.2815, 0.2825, 0.2835, 0.2845, 0.2855, 0.2865, 0.2875, 0.2885, 0.2895, 0.2905, 0.2915, 0.2925, 0.2935, 0.2945, 0.2955, 0.2965, 0.2975, 0.2985, 0.2995, 0.3005, 0.3015, 0.3025, 0.3035, 0.3045, 0.3055, 0.3065, 0.3075, 0.3085, 0.3095, 0.3105, 0.3115, 0.3125, 0.3135, 0.3145, 0.3155, 0.3165, 0.3175, 0.3185, 0.3195, 0.3205, 0.3215, 0.3225, 0.3235, 0.3245, 0.3255, 0.3265, 0.3275, 0.3285, 0.3295, 0.3305, 0.3315, 0.3325, 0.3335, 0.3345, 0.3355, 0.3365, 0.3375, 0.3385, 0.3395, 0.3405, 0.3415, 0.3425, 0.3435, 0.3445, 0.3455, 0.3465, 0.3475, 0.3485, 0.3495, 0.3505, 0.3515, 0.3525, 0.3535, 0.3545, 0.3555, 0.3565, 0.3575, 0.3585, 0.3595, 0.3605, 0.3615, 0.3625, 0.3635, 0.3645, 0.3655, 0.3665, 0.3675, 0.3685, 0.3695, 0.3705, 0.3715, 0.3725, 0.3735, 0.3745, 0.3755, 0.3765, 0.3775, 0.3785, 0.3795, 0.3805, 0.3815, 0.3825, 0.3835, 0.3845, 0.3855, 0.3865, 0.3875, 0.3885, 0.3895, 0.3905, 0.3915, 0.3925, 0.3935, 0.3945, 0.3955, 0.3965, 0.3975, 0.3985, 0.3995, 0.4005, 0.4015, 0.4025, 0.4035, 0.4045, 0.4055, 0.4065, 0.4075, 0.4085, 0.4095, 0.4105, 0.4115, 0.4125, 0.4135, 0.4145, 0.4155, 0.4165, 0.4175, 0.4185, 0.4195, 0.4205, 0.4215, 0.4225, 0.4235, 0.4245, 0.4255, 0.4265, 0.4275, 0.4285, 0.4295, 0.4305, 0.4315, 0.4325, 0.4335, 0.4345, 0.4355, 0.4365, 0.4375, 0.4385, 0.4395, 0.4405, 0.4415, 0.4425, 0.4435, 0.4445, 0.4455, 0.4465, 0.4475, 0.4485, 0.4495, 0.4505, 0.4515, 0.4525, 0.4535, 0.4545, 0.4555, 0.4565, 0.4575, 0.4585, 0.4595, 0.4605, 0.4615, 0.4625, 0.4635, 0.4645, 0.4655, 0.4665, 0.4675, 0.4685, 0.4695, 0.4705, 0.4715, 0.4725, 0.4735, 0.4745, 0.4755, 0.4765, 0.4775, 0.4785, 0.4795, 0.4805, 0.4815, 0.4825, 0.4835, 0.4845, 0.4855, 0.4865, 0.4875, 0.4885, 0.4895, 0.4905, 0.4915, 0.4925, 0.4935, 0.4945, 0.4955, 0.4965, 0.4975, 0.4985, 0.4995, 0.5005, 0.5015, 0.5025, 0.5035, 0.5045, 0.5055, 0.5065, 0.5075, 0.5085, 0.5095, 0.5105, 0.5115, 0.5125, 0.5135, 0.5145, 0.5155, 0.5165, 0.5175, 0.5185, 0.5195, 0.5205, 0.5215, 0.5225, 0.5235, 0.5245, 0.5255, 0.5265, 0.5275, 0.5285, 0.5295, 0.5305, 0.5315, 0.5325, 0.5335, 0.5345, 0.5355, 0.5365, 0.5375, 0.5385, 0.5395, 0.5405, 0.5415, 0.5425, 0.5435, 0.5445, 0.5455, 0.5465, 0.5475, 0.5485, 0.5495, 0.5505, 0.5515, 0.5525, 0.5535, 0.5545, 0.5555, 0.5565, 0.5575, 0.5585, 0.5595, 0.5605, 0.5615, 0.5625, 0.5635, 0.5645, 0.5655, 0.5665, 0.5675, 0.5685, 0.5695, 0.5705, 0.5715, 0.5725, 0.5735, 0.5745, 0.5755, 0.5765, 0.5775, 0.5785, 0.5795, 0.5805, 0.5815, 0.5825, 0.5835, 0.5845, 0.5855, 0.5865, 0.5875, 0.5885, 0.5895, 0.5905, 0.5915, 0.5925, 0.5935, 0.5945, 0.5955, 0.5965, 0.5975, 0.5985, 0.5995, 0.6005, 0.6015, 0.6025, 0.6035, 0.6045, 0.6055, 0.6065, 0.6075, 0.6085, 0.6095, 0.6105, 0.6115, 0.6125, 0.6135, 0.6145, 0.6155, 0.6165, 0.6175, 0.6185, 0.6195, 0.6205, 0.6215, 0.6225, 0.6235, 0.6245, 0.6255, 0.6265, 0.6275, 0.6285, 0.6295, 0.6305, 0.6315, 0.6325, 0.6335, 0.6345, 0.6355, 0.6365, 0.6375, 0.6385, 0.6395, 0.6405, 0.6415, 0.6425, 0.6435, 0.6445, 0.6455, 0.6465, 0.6475, 0.6485, 0.6495, 0.6505, 0.6515, 0.6525, 0.6535, 0.6545, 0.6555, 0.6565, 0.6575, 0.6585, 0.6595, 0.6605, 0.6615, 0.6625, 0.6635, 0.6645, 0.6655, 0.6665, 0.6675, 0.6685, 0.6695, 0.6705, 0.6715, 0.6725, 0.6735, 0.6745, 0.6755, 0.6765, 0.6775, 0.6785, 0.6795, 0.6805, 0.6815, 0.6825, 0.6835, 0.6845, 0.6855, 0.6865, 0.6875, 0.6885, 0.6895, 0.6905, 0.6915, 0.6925, 0.6935, 0.6945, 0.6955, 0.6965, 0.6975, 0.6985, 0.6995, 0.7005, 0.7015, 0.7025, 0.7035, 0.7045, 0.7055, 0.7065, 0.7075, 0.7085, 0.7095, 0.7105, 0.7115, 0.7125, 0.7135, 0.7145, 0.7155, 0.7165, 0.7175, 0.7185, 0.7195, 0.7205, 0.7215, 0.7225, 0.7235, 0.7245, 0.7255, 0.7265, 0.7275, 0.7285, 0.7295, 0.7305, 0.7315, 0.7325, 0.7335, 0.7345, 0.7355, 0.7365, 0.7375, 0.7385, 0.7395, 0.7405, 0.7415, 0.7425, 0.7435, 0.7445, 0.7455, 0.7465, 0.7475, 0.7485, 0.7495, 0.7505, 0.7515, 0.7525, 0.7535, 0.7545, 0.7555, 0.7565, 0.7575, 0.7585, 0.7595, 0.7605, 0.7615, 0.7625, 0.7635, 0.7645, 0.7655, 0.7665, 0.7675, 0.7685, 0.7695, 0.7705, 0.7715, 0.7725, 0.7735, 0.7745, 0.7755, 0.7765, 0.7775, 0.7785, 0.7795, 0.7805, 0.7815, 0.7825, 0.7835, 0.7845, 0.7855, 0.7865, 0.7875, 0.7885, 0.7895, 0.7905, 0.7915, 0.7925, 0.7935, 0.7945, 0.7955, 0.7965, 0.7975, 0.7985, 0.7995, 0.8005, 0.8015, 0.8025, 0.8035, 0.8045, 0.8055, 0.8065, 0.8075, 0.8085, 0.8095, 0.8105, 0.8115, 0.8125, 0.8135, 0.8145, 0.8155, 0.8165, 0.8175, 0.8185, 0.8195, 0.8205, 0.8215, 0.8225, 0.8235, 0.8245, 0.8255, 0.8265, 0.8275, 0.8285, 0.8295, 0.8305, 0.8315, 0.8325, 0.8335, 0.8345, 0.8355, 0.8365, 0.8375, 0.8385, 0.8395, 0.8405, 0.8415, 0.8425, 0.8435, 0.8445, 0.8455, 0.8465, 0.8475, 0.8485, 0.8495, 0.8505, 0.8515, 0.8525, 0.8535, 0.8545, 0.8555, 0.8565, 0.8575, 0.8585, 0.8595, 0.8605, 0.8615, 0.8625, 0.8635, 0.8645, 0.8655, 0.8665, 0.8675, 0.8685, 0.8695, 0.8705, 0.8715, 0.8725, 0.8735, 0.8745, 0.8755, 0.8765, 0.8775, 0.8785, 0.8795, 0.8805, 0.8815, 0.8825, 0.8835, 0.8845, 0.8855, 0.8865, 0.8875, 0.8885, 0.8895, 0.8905, 0.8915, 0.8925, 0.8935, 0.8945, 0.8955, 0.8965, 0.8975, 0.8985, 0.8995, 0.9005, 0.9015, 0.9025, 0.9035, 0.9045, 0.9055, 0.9065, 0.9075, 0.9085, 0.9095, 0.9105, 0.9115, 0.9125, 0.9135, 0.9145, 0.9155, 0.9165, 0.9175, 0.9185, 0.9195, 0.9205, 0.9215, 0.9225, 0.9235, 0.9245, 0.9255, 0.9265, 0.9275, 0.9285, 0.9295, 0.9305, 0.9315, 0.9325, 0.9335, 0.9345, 0.9355, 0.9365, 0.9375, 0.9385, 0.9395, 0.9405, 0.9415, 0.9425, 0.9435, 0.9445, 0.9455, 0.9465, 0.9475, 0.9485, 0.9495, 0.9505, 0.9515, 0.9525, 0.9535, 0.9545, 0.9555, 0.9565, 0.9575, 0.9585, 0.9595, 0.9605, 0.9615, 0.9625, 0.9635, 0.9645, 0.9655, 0.9665, 0.9675, 0.9685, 0.9695, 0.9705, 0.9715, 0.9725, 0.9735, 0.9745, 0.9755, 0.9765, 0.9775, 0.9785, 0.9795, 0.9805, 0.9815, 0.9825, 0.9835, 0.9845, 0.9855, 0.9865, 0.9875, 0.9885, 0.9895, 0.9905, 0.9915, 0.9925, 0.9935, 0.9945, 0.9955, 0.9965, 0.9975, 0.9985, 0.9995]; let data0 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0068466305166028, 0.01517996384993614, 0.023513297183269482, 0.031846630516602824, 0.04017996384993616, 0.04851329718326951, 0.056846630516602846, 0.06517996384993618, 0.07351329718326953, 0.08184663051660288, 0.0901799638499362, 0.09851329718326955, 0.1068466305166029, 0.11517996384993623, 0.12351329718326957, 0.13184663051660292, 0.14017996384993625, 0.1485132971832696, 0.15684663051660286, 0.1651799638499362, 0.17351329718326952, 0.18184663051660288, 0.1901799638499362, 0.19851329718326954, 0.2068466305166029, 0.21517996384993623, 0.22351329718326957, 0.23184663051660293, 0.24017996384993626, 0.2485132971832696, 0.25684663051660295, 0.2651799638499363, 0.2735132971832696, 0.28184663051660297, 0.29017996384993583, 0.2985132971832692, 0.30684663051660255, 0.31517996384993585, 0.3235132971832692, 0.33184663051660257, 0.3401799638499359, 0.34851329718326923, 0.3568466305166026, 0.3651799638499359, 0.37351329718326925, 0.3818466305166026, 0.3901799638499359, 0.3985132971832693, 0.40684663051660264, 0.41517996384993594, 0.4235132971832693, 0.43184663051660266, 0.44017996384993596, 0.4485132971832693, 0.4568466305166027, 0.465179963849936, 0.47351329718326934, 0.4818466305166027, 0.490179963849936, 0.49851329718326937, 0.5068466305166027, 0.515179963849936, 0.5235132971832694, 0.5318466305166027, 0.540179963849936, 0.5485132971832695, 0.5568466305166028, 0.5651799638499361, 0.5735132971832695, 0.5818466305166028, 0.5901799638499361, 0.5985132971832695, 0.6068466305166028, 0.6151799638499361, 0.6235132971832695, 0.6318466305166028, 0.6401799638499361, 0.6485132971832696, 0.6568466305166029, 0.6651799638499362, 0.6735132971832696, 0.6818466305166029, 0.6901799638499362, 0.6985132971832696, 0.7068466305166029, 0.7151799638499362, 0.7235132971832696, 0.7318466305166029, 0.7401799638499362, 0.7485132971832696, 0.756846630516603, 0.7651799638499363, 0.7735132971832697, 0.781846630516603, 0.7901799638499363, 0.7985132971832697, 0.806846630516603, 0.8151799638499363, 0.8235132971832692, 0.8318466305166026, 0.840179963849936, 0.8485132971832692, 0.8568466305166027, 0.8651799638499358, 0.8735132971832693, 0.8818466305166025, 0.890179963849936, 0.8985132971832692, 0.9068466305166027, 0.9151799638499358, 0.9235132971832694, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.9274526028125225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; let data1 = [4.7497782e-21, 1.2236753e-11, 1.4130822e-11, 1.4288661e-11, 3.4924231e-11, 2.9147543e-11, 3.5115528e-11, 4.4161819e-11, 3.215849e-11, 5.8045656e-11, 5.6981576e-11, 7.4404121e-11, 5.3422194e-11, 5.1797341e-11, 3.9958742e-11, 4.3513123e-11, 4.3012595e-11, 2.8551867e-11, 1.0164615e-11, 3.6251191e-11, 1.5676756e-11, 4.3760219e-11, 2.087822e-11, 3.2388469e-11, 1.0404042e-13, 2.2323671e-11, 5.9775439e-12, 1.5878278e-11, 2.5413204e-12, 1.3496131e-11, 9.0037193e-12, 6.4866305e-12, 3.0908672e-12, 9.3806435e-12, 1.8018999e-11, 3.9618166e-11, 3.3207453e-11, 3.636568e-11, 1.6921461e-11, 2.4158606e-11, 1.5541036e-11, 2.1612839e-11, 2.2662135e-12, 3.6244967e-11, 2.1388863e-11, 4.0860982e-11, 2.0243752e-11, 4.4159152e-11, 3.7287927e-11, 4.503816e-11, 4.2794622e-11, 3.2505514e-11, 3.5482004e-11, 3.3629729e-11, 5.203321e-11, 3.059744e-11, 3.5895609e-11, 2.4423153e-11, 2.8592995e-11, 9.0477364e-12, 1.1918963e-11, 1.11291e-11, 9.5233656e-12, 1.9686646e-11, 1.4684259e-11, 1.0456061e-11, 1.326493e-11, 1.6252424e-11, 1.8960364e-11, 1.2528977e-11, 1.0733391e-11, 7.5758314e-12, 1.6704377e-11, 3.1431097e-12, 2.2738832e-12, 1.7303387e-12, 6.4157141e-12, 6.9744867e-12, 1.1955532e-11, 1.2810531e-12, 2.9376966e-12, 5.1365506e-12, 6.5088614e-12, 5.6347441e-12, 8.9720403e-12, 5.0112797e-12, 1.8458058e-11, 3.0491843e-12, 6.0556854e-12, 1.5169225e-12, 1.0354577e-11, 1.6511413e-11, 1.0133936e-12, 1.1652192e-11, 3.9020711e-12, 7.5887253e-12, 1.191296e-11, 1.6945582e-11, 6.168507e-12, 3.7362289e-12, 1.430978e-11, 1.3481458e-11, 1.6208962e-11, 1.5379529e-11, 1.7487792e-11, 1.6227303e-11, 2.3599166e-11, 2.3986428e-11, 2.2877441e-11, 2.8995818e-11, 2.9717098e-12, 1.2812643e-11, 3.9682079e-12, 8.8532164e-12, 1.4168058e-11, 1.9919292e-11, 2.080119e-11, 3.3138871e-11, 2.4218295e-11, 2.2538532e-11, 1.2056572e-11, 2.2702373e-11, 2.0471618e-11, 2.1337621e-11, 9.2228044e-12, 1.1923409e-11, 1.0586334e-12, 7.2505939e-13, 2.3409092e-13, 9.9634254e-12, 1.9138767e-11, 2.1332952e-11, 3.4972806e-11, 1.2183732e-11, 2.5995097e-11, 4.4557306e-12, 1.2136936e-11, 5.6049548e-12, 2.6847761e-11, 8.9601469e-13, 2.9922622e-11, 2.5058955e-11, 1.8621566e-11, 9.110872e-12, 1.7125318e-11, 1.9371191e-11, 1.1349964e-12, 1.0734169e-12, 3.3798683e-12, 2.0197289e-11, 9.8479361e-12, 8.9555895e-12, 4.0984808e-12, 1.52756e-11, 2.0106143e-11, 4.3018931e-12, 3.1851594e-11, 1.9488014e-11, 2.5790573e-11, 1.2311893e-11, 1.3165891e-11, 4.6352448e-12, 1.1384311e-11, 5.0336217e-12, 4.7395075e-12, 1.0127489e-11, 2.3451887e-11, 2.9249694e-11, 2.1945746e-11, 2.2225633e-11, 8.1962946e-12, 3.4067677e-12, 1.1086306e-11, 1.9424656e-11, 1.276318e-11, 4.0311213e-11, 4.1533465e-11, 2.0941134e-11, 3.2442712e-11, 1.8077688e-11, 3.7180997e-11, 1.4652802e-11, 1.8750616e-11, 1.1626293e-11, 3.7798014e-12, 3.7143316e-12, 1.4391923e-11, 4.6232401e-12, 1.3459005e-11, 6.2703243e-12, 1.3369415e-11, 2.2801078e-12, 1.1086528e-11, 1.4684592e-12, 1.151425e-11, 1.0592781e-11, 2.7326391e-11, 1.7531254e-11, 1.7685202e-11, 5.8771716e-12, 4.6834857e-12, 1.7814919e-11, 1.283832e-13, 2.6063234e-11, 8.4499487e-12, 3.4453048e-11, 2.7307051e-11, 2.5739331e-11, 2.6164607e-11, 1.5238919e-11, 2.7857709e-11, 2.8230743e-11, 2.3899394e-11, 4.5124193e-11, 2.07684e-11, 2.5994874e-11, 1.2769738e-11, 7.5410401e-12, 4.1377182e-12, 9.3713065e-12, 7.1242115e-12, 1.8334232e-11, 3.5548474e-11, 1.4479624e-11, 2.4772844e-11, 3.0732159e-11, 2.7721323e-11, 2.8178611e-11, 2.0658579e-11, 3.5832584e-11, 3.0355346e-11, 2.908852e-11, 2.9166884e-12, 2.6237079e-11, 1.2974706e-11, 2.4185616e-11, 1.540943e-11, 2.5027499e-11, 5.3102848e-12, 2.6987816e-11, 2.0652577e-11, 3.3621837e-11, 2.9035055e-11, 3.0026996e-11, 1.9403536e-11, 2.2531196e-11, 2.1464448e-11, 1.056188e-11, 1.4717828e-11, 4.7268359e-12, 1.2038342e-11, 8.5823334e-12, 1.8288437e-11, 1.9149215e-11, 8.5026358e-12, 1.7856269e-11, 6.8202046e-12, 1.0678592e-12, 1.3995325e-11, 1.7243698e-11, 2.3217129e-11, 1.1335292e-11, 1.1618179e-11, 5.3917608e-12, 2.3009937e-11, 1.0752732e-11, 3.0797629e-11, 1.3905401e-11, 2.3099861e-11, 8.8703342e-12, 1.6012664e-11, 1.2647023e-11, 1.0079582e-11, 1.6073021e-11, 2.722613e-12, 2.6127481e-11, 1.3952975e-11, 5.9724308e-12, 7.044625e-12, 1.5309391e-11, 1.3658194e-11, 8.9471418e-12, 2.529249e-11, 4.328459e-12, 2.3591385e-11, 5.059743e-12, 1.1537704e-11, 1.247918e-11, 9.452338e-12, 2.4481175e-11, 2.0175058e-11, 2.3537142e-11, 6.6256846e-11, 6.1706634e-11, 1.2504701e-10, 1.3924097e-10, 2.4660067e-10, 3.2732035e-10, 5.094611e-10, 7.2167552e-10, 1.0844473e-09, 1.5062619e-09, 2.1630591e-09, 3.0315697e-09, 4.2715788e-09, 5.9608509e-09, 8.3437843e-09, 1.1625095e-08, 1.6157491e-08, 2.237713e-08, 3.0939687e-08, 4.2591514e-08, 5.8554935e-08, 8.0188008e-08, 1.0956633e-07, 1.4918876e-07, 2.027e-07, 2.7453773e-07, 3.7079022e-07, 4.9929447e-07, 6.7032184e-07, 8.9726275e-07, 1.1974227e-06, 1.5931029e-06, 2.1130083e-06, 2.7938138e-06, 3.6823602e-06, 4.8380822e-06, 6.336126e-06, 8.27101e-06, 1.0761312e-05, 1.3954958e-05, 1.8035783e-05, 2.3230923e-05, 2.9820083e-05, 3.8145661e-05, 4.8625074e-05, 6.1764365e-05, 7.8173982e-05, 9.8586305e-05, 0.00012387544, 0.00015507864, 0.0001934198, 0.00024033476, 0.0002974976, 0.00036684837, 0.00045062101, 0.00055137138, 0.00067200382, 0.00081579642, 0.00098642278, 0.0011879702, 0.0014249526, 0.0017023168, 0.002025442, 0.0024001302, 0.0028325882, 0.0033293991, 0.0038974847, 0.0045440572, 0.005276562, 0.0061026118, 0.0070299137, 0.0080661894, 0.0092190931, 0.010496126, 0.011904552, 0.013451315, 0.015142962, 0.016985572, 0.018984691, 0.021145281, 0.023471678, 0.025967555, 0.028635909, 0.031479046, 0.034498587, 0.037695476, 0.041070007, 0.044621845, 0.04835007, 0.052253211, 0.056329295, 0.060575892, 0.064990167, 0.069568924, 0.074308664, 0.079205625, 0.084255833, 0.089455144, 0.094799285, 0.10028389, 0.10590454, 0.11165678, 0.11753617, 0.12353828, 0.12965873, 0.13589322, 0.14223751, 0.14868746, 0.15523903, 0.1618883, 0.16863145, 0.1754648, 0.18238479, 0.18938797, 0.19647105, 0.20363084, 0.21086428, 0.21816844, 0.22554052, 0.23297781, 0.24047775, 0.24803786, 0.2556558, 0.2633293, 0.27105622, 0.27883449, 0.28666216, 0.29453734, 0.30245824, 0.31042314, 0.31843041, 0.32647848, 0.33456586, 0.3426911, 0.35085286, 0.35904979, 0.36728075, 0.37554428, 0.38383987, 0.39216506, 0.40052173, 0.40890302, 0.41731947, 0.42574855, 0.43422869, 0.44269034, 0.45124763, 0.45971518, 0.46837279, 0.47681342, 0.48558203, 0.49399581, 0.50280125, 0.51131554, 0.51987967, 0.52886102, 0.53664995, 0.54668062, 0.55314771, 0.56469983, 0.56982903, 0.5827048, 0.58713623, 0.59985871, 0.60559039, 0.61618948, 0.62421812, 0.63250928, 0.64190155, 0.64973676, 0.65867379, 0.66728178, 0.67543557, 0.68436249, 0.69251268, 0.70116246, 0.70940041, 0.71803499, 0.72591586, 0.73465007, 0.7421754, 0.75064661, 0.75785453, 0.76589282, 0.77257401, 0.78002765, 0.78616575, 0.79272695, 0.79838116, 0.80388596, 0.80906539, 0.81353354, 0.81825345, 0.82185202, 0.82608446, 0.82915378, 0.83282197, 0.83569667, 0.83878624, 0.84172396, 0.84429782, 0.84742436, 0.84965847, 0.85300593, 0.85521123, 0.85880565, 0.86132943, 0.86516801, 0.86828684, 0.8723899, 0.87638194, 0.88097185, 0.88619249, 0.89157407, 0.89817, 0.90433351, 0.91190589, 0.91831494, 0.92592112, 0.9316993, 0.9380621, 0.94212677, 0.94587885, 0.94717707, 0.94742498, 0.94767951, 0.94780527, 0.94803564, 0.94820734, 0.94830276, 0.94855132, 0.94874752, 0.94888718, 0.94845965, 0.94872855, 0.94879579, 0.94921478, 0.94945263, 0.94948663, 0.95001979, 0.9507142, 0.94977329, 0.95073316, 0.95280442, 0.94948042, 0.95051732, 0.95976221, 0.94700999, 0.92703429, 0.92353142, 0.92139847, 0.92149921, 0.92694969, 0.93111875, 0.93134918, 0.93179552, 0.9317036, 0.93019943, 0.92913487, 0.92907245, 0.92909259, 0.9291059, 0.9291442, 0.92915769, 0.92922451, 0.92924203, 0.92911433, 0.92899133, 0.92898409, 0.92899886, 0.92900657, 0.92900604, 0.92900255, 0.92900176, 0.92900006, 0.92899903, 0.92899627, 0.92899873, 0.92900462, 0.9290154, 0.92902768, 0.92904411, 0.92906035, 0.9290786, 0.92909653, 0.9291185, 0.92914032, 0.92916527, 0.92919056, 0.9292208, 0.92925171, 0.92928876, 0.92933076, 0.92937489, 0.92942012, 0.92947584, 0.92953381, 0.9295991, 0.92966776, 0.92974198, 0.92981911, 0.92989924, 0.92998185, 0.93006832, 0.93015723, 0.930241, 0.93032401, 0.93040384, 0.93048168, 0.93054887, 0.93061051, 0.93066871, 0.93073158, 0.93079108, 0.93084464, 0.93089778, 0.93094338, 0.93099075, 0.93103015, 0.93107199, 0.93110975, 0.93114968, 0.93118829, 0.93122538, 0.93126367, 0.93129719, 0.93133572, 0.93136851, 0.93140868, 0.93144301, 0.93148121, 0.93151575, 0.93155226, 0.93158905, 0.93162476, 0.93166393, 0.93169731, 0.93173935, 0.93177342, 0.9318156, 0.93185112, 0.93189142, 0.93192729, 0.93196446, 0.93200387, 0.93203979, 0.93208172, 0.93211479, 0.93215424, 0.93218187, 0.93221582, 0.93224005, 0.9322631, 0.93227917, 0.93228247, 0.93227121, 0.93224052, 0.93218199, 0.93208667, 0.93194139, 0.93172852, 0.9314245, 0.93099797, 0.93040702, 0.92959603, 0.92849123, 0.92699517, 0.92497967, 0.92227668, 0.91866727, 0.91386765, 0.90751276, 0.89913639, 0.88814896, 0.87381251, 0.85521555, 0.83125048, 0.80060084, 0.76175515, 0.71307468, 0.65297275, 0.58034371, 0.49543106, 0.40111096, 0.30400643, 0.21385279, 0.13973194, 0.085672249, 0.050029818, 0.028248231, 0.01561467, 0.0085251238, 0.0046229516, 0.0024979795, 0.0013473218, 0.00072604692, 0.00039108398, 0.00021061359, 0.00011341244, 6.1068151e-05, 3.2881948e-05, 1.7704928e-05, 9.5328448e-06, 5.1327199e-06, 2.7634876e-06, 1.487836e-06, 8.0098752e-07, 4.3120483e-07, 2.3210337e-07, 1.2492882e-07, 6.7187527e-08, 3.6127854e-08, 1.9352349e-08, 1.0404359e-08, 5.5210503e-09, 2.9529626e-09, 1.5346396e-09, 7.9428198e-10, 3.6861033e-10, 1.2419183e-10, 4.3436841e-11, 1.3257637e-11, 1.4870166e-11, 1.0206285e-11, 2.4490177e-11, 2.4370081e-11, 1.9556357e-11, 3.4978943e-11, 2.4217574e-11, 2.8594202e-11, 2.1797559e-11, 2.6848701e-11, 2.4967454e-11, 4.3702007e-11, 1.6981616e-11, 1.2151798e-11, 3.6970075e-12, 3.3598392e-11, 6.8825519e-12, 2.0689279e-11, 1.3582629e-11, 3.5937048e-11, 2.1156788e-11, 3.1031754e-11, 3.8754867e-11, 5.7551244e-11, 1.2017272e-11, 3.1834355e-12, 7.7792771e-12, 5.2228499e-12, 8.825401e-12, 2.2278166e-11, 2.3018056e-11, 1.0137468e-11, 2.6215477e-11, 1.8272039e-11, 1.0712309e-11, 7.3875772e-12, 1.0804989e-11, 8.8561465e-12, 3.9837509e-11, 2.3096973e-11, 6.3352043e-11, 2.9827795e-11, 7.8074697e-11, 3.5060857e-11, 6.8725291e-11, 6.4160861e-11, 4.8119258e-11, 4.3734306e-11, 5.0335154e-11, 8.2433787e-11, 2.8126692e-11, 5.3756784e-11, 1.8430428e-11, 2.9340196e-11, 3.4874053e-11, 1.5347553e-11, 1.4757284e-11, 2.7799813e-11, 5.3875659e-12, 1.7271756e-11, 2.7111536e-11, 1.7808525e-11, 1.3187377e-11, 6.0115774e-12, 2.0383045e-11, 3.0349248e-11, 6.6302612e-12, 1.3277616e-11, 1.5641245e-11, 2.5366146e-11, 1.2476235e-11, 1.1086805e-11, 9.6080238e-12, 2.9373495e-11, 5.0011937e-12, 3.4103085e-12, 7.4496232e-12, 2.1377889e-11, 1.5513601e-11, 3.2097745e-11, 2.0315671e-11, 1.5045981e-11, 6.3766385e-13, 5.3094257e-12, 2.071847e-11, 6.0062497e-12, 5.9049116e-12, 4.2392826e-11, 1.8420105e-11, 2.1885356e-11, 8.4259315e-12, 2.8205943e-11, 2.5683036e-12, 2.7446629e-11, 3.480124e-12, 3.6805801e-13, 3.8837336e-11, 8.7038619e-12, 2.6307602e-11, 1.5869117e-11, 7.3966789e-13, 1.2958395e-11, 1.394325e-11, 4.6496739e-12, 1.5903303e-11, 2.8199838e-11, 2.5214417e-11, 8.5717784e-12, 2.6207041e-11, 6.0112444e-12, 4.0859325e-11, 2.4191602e-11, 3.8050274e-11, 2.4840254e-11, 2.8883342e-11, 2.9577836e-12, 8.4301493e-12, 1.0224377e-11, 2.481528e-11, 2.9430213e-11, 1.1148851e-11, 2.2952014e-11, 5.6299781e-12, 2.6766898e-11, 4.9046285e-12, 5.1555983e-11, 1.0087076e-11, 4.4939041e-11, 1.4179447e-11, 2.3963397e-11, 2.3591898e-12, 1.9854821e-11, 1.3202472e-11, 3.1101791e-11, 1.3970666e-11, 2.8291852e-11, 3.9392531e-11, 1.6398339e-12, 1.9717077e-12, 3.3493946e-11, 1.4251482e-11, 2.225519e-11, 3.5135667e-11, 3.6623549e-11, 5.2043471e-11, 2.0132197e-11, 1.4937762e-11, 7.5046765e-12, 1.3253197e-11, 5.6778167e-12, 1.659369e-11, 7.4506221e-12, 8.1147027e-12, 1.4139045e-11, 2.3932651e-12, 4.2783971e-12, 2.1105952e-11, 5.3867889e-12, 1.8312441e-11, 9.8047062e-12, 9.3391949e-12, 3.6215311e-12, 1.3048523e-11, 4.0050618e-11, 1.8217429e-11, 1.684487e-11, 2.7428204e-11, 1.2258796e-11, 2.2140089e-11, 2.0840342e-11, 4.178391e-12, 1.6649631e-11, 1.2855725e-11, 3.9175537e-12, 1.789277e-11, 2.852261e-11, 3.6098545e-11, 6.5570048e-12, 3.2203301e-11, 9.8111439e-12, 1.2932422e-11, 2.8110487e-12, 1.2827977e-11, 7.5176629e-12, 2.5976061e-11, 2.329077e-11, 3.8056933e-11, 4.690975e-11, 3.7367213e-11, 5.2457148e-11, 3.9460349e-11, 4.9403576e-11, 6.3205752e-11, 7.2271235e-11, 4.9367614e-11, 4.5474479e-11, 1.1120325e-11, 1.9082965e-11, 9.2018946e-12, 2.3865167e-11, 4.1185538e-11, 3.977624e-11, 1.6751302e-11, 8.4957471e-12, 3.4906463e-11, 2.2628576e-11, 2.4532244e-11, 4.0878083e-11, 4.5074011e-11, 1.5930275e-11, 8.4807628e-12, 2.2477734e-11, 9.4470816e-12, 3.760119e-11, 2.9787615e-12, 4.1064887e-11, 1.2349257e-12, 2.1885134e-11, 1.5716833e-12, 8.662683e-12, 1.085083e-11, 6.3942867e-12, 1.9193516e-11, 3.2279888e-11, 2.5822778e-11, 4.105412e-11, 1.8547638e-11, 2.2644559e-11, 4.7690819e-11, 2.1394316e-11, 6.6005036e-11, 9.6874959e-12, 1.498449e-11, 1.0487767e-11, 4.0695719e-11, 5.1100795e-12, 3.0456913e-13, 2.4637023e-11, 3.9656476e-11, 2.8627056e-11, 5.2256026e-11, 2.4325572e-11, 3.5351108e-11, 3.4459932e-11, 2.6888215e-11, 3.1180264e-11, 7.3392391e-11, 4.5273468e-11, 2.3238491e-11, 4.5416429e-11, 4.9126201e-12, 6.8129583e-12, 4.7035063e-12, 8.8010932e-12, 3.6449177e-11, 3.57498e-11, 6.8845498e-11, 6.3584799e-11, 6.4005468e-11, 4.7890387e-11, 4.5425864e-11, 3.9753042e-11, 5.3676979e-11, 7.4143047e-11, 5.9449474e-11, 7.5752469e-11, 7.8523892e-11, 5.5389292e-11, 6.6257437e-11, 2.5778935e-11, 4.8051218e-11, 2.9114655e-11, 2.0579061e-11, 3.7228137e-11, 1.9723736e-13, 1.6788374e-11, 1.5427803e-11, 3.2430951e-11, 1.5089269e-11, 8.6060757e-12, 4.2812829e-12, 1.4006628e-11, 3.3064175e-12, 1.1991854e-12, 1.1020541e-11, 1.2967097e-20]; let data2 = [3.1587274e-21, 1.3862829e-11, 1.646295e-11, 3.2144263e-11, 1.5146772e-11, 4.8599543e-11, 1.5956976e-11, 4.5079954e-11, 1.1164003e-11, 2.375367e-11, 8.4472809e-12, 9.1891247e-12, 1.5533811e-11, 1.4210519e-11, 3.0230631e-11, 5.3723755e-11, 1.8964366e-11, 3.6470387e-11, 1.7343736e-11, 2.657321e-11, 1.6595779e-11, 2.8922344e-12, 2.2643239e-12, 7.9208543e-13, 1.0798639e-11, 4.4303875e-12, 1.3237586e-11, 3.0215069e-11, 3.847939e-12, 3.3845368e-11, 1.968798e-11, 2.5638958e-11, 3.1805576e-11, 1.4100588e-11, 4.2181828e-11, 9.1871239e-12, 5.4263521e-11, 2.6657799e-11, 2.9521244e-11, 2.6140709e-11, 3.6060228e-11, 3.9825691e-11, 3.693768e-11, 7.9510883e-12, 5.2393906e-11, 7.6993238e-12, 2.9091077e-11, 9.7627919e-12, 2.3350514e-11, 7.4785714e-12, 3.1269923e-11, 1.6848099e-11, 2.0900673e-11, 3.1482227e-12, 1.9616508e-11, 1.3593057e-11, 3.2383244e-11, 2.9686864e-11, 4.1839584e-11, 2.1039505e-11, 4.4363009e-11, 4.5567699e-11, 5.1585925e-11, 5.0254408e-11, 3.1628285e-11, 4.9054942e-11, 6.1561022e-11, 3.6102133e-11, 2.0040228e-11, 1.4764401e-11, 2.1241917e-11, 2.5835813e-11, 3.5030384e-11, 4.1158653e-11, 3.5126977e-11, 4.6989584e-11, 3.8374905e-11, 5.3902491e-11, 2.2804858e-11, 4.116799e-11, 2.2078131e-11, 2.9711651e-11, 2.7927514e-12, 3.6848534e-11, 4.8283198e-12, 1.5137768e-11, 1.8658358e-12, 5.5483772e-12, 4.8572199e-12, 7.2834956e-12, 4.3929285e-12, 9.2330306e-12, 1.2192069e-11, 1.0106481e-11, 1.2977151e-11, 5.4687908e-13, 2.7688531e-13, 5.1474437e-12, 9.0471806e-12, 7.2589305e-12, 1.1016835e-11, 1.5147217e-11, 7.1979068e-12, 1.6878222e-11, 2.5077518e-12, 1.3794247e-11, 2.3397977e-12, 3.3936292e-11, 4.4505064e-12, 4.141553e-11, 2.6810636e-11, 1.4511192e-11, 3.50435e-11, 2.6215738e-12, 1.6870441e-11, 1.6199848e-11, 7.5394839e-12, 4.3516901e-13, 1.8329341e-13, 2.6110141e-13, 3.3873156e-12, 1.4211298e-11, 5.7610154e-12, 2.4711376e-11, 1.6844209e-11, 1.1221025e-11, 1.4642687e-11, 1.7884391e-11, 5.9851024e-12, 1.7921405e-11, 1.2904123e-11, 1.9490681e-11, 1.8598891e-11, 1.2063686e-11, 1.8508411e-11, 3.2205064e-11, 1.1345184e-11, 1.8744058e-11, 2.3708653e-11, 3.811736e-11, 2.6724824e-12, 4.3599156e-11, 2.0617119e-11, 5.1319933e-11, 3.0725823e-11, 5.1442091e-11, 2.3753115e-11, 6.2107567e-11, 3.1677192e-11, 5.5339939e-11, 3.4040666e-11, 2.5940742e-11, 4.6395909e-11, 3.6795625e-11, 3.4361235e-11, 2.2750948e-11, 3.1149432e-11, 2.7081963e-11, 3.2067789e-11, 8.3646933e-12, 4.675705e-11, 9.3488534e-12, 1.7650189e-12, 1.4368581e-11, 1.7560154e-11, 9.1522214e-12, 5.3022816e-12, 5.1575583e-14, 7.4349989e-12, 4.3805903e-12, 1.007169e-11, 7.4106559e-13, 1.807591e-12, 1.2629572e-11, 4.3775891e-12, 1.3309947e-11, 9.9894355e-12, 1.6843987e-11, 1.3354187e-11, 5.8228171e-12, 3.1425539e-12, 2.8588437e-11, 2.262212e-12, 5.8623881e-12, 7.9196316e-12, 5.8783943e-12, 1.2594558e-11, 2.3195342e-11, 1.5702765e-12, 3.1104303e-11, 8.5607694e-12, 4.3086735e-12, 1.2531867e-11, 1.2554209e-11, 1.8647243e-12, 9.3182859e-12, 5.2836077e-12, 2.6260533e-11, 5.2642671e-13, 2.6149379e-11, 6.5936721e-12, 5.6280749e-12, 1.2302667e-11, 1.50195e-11, 3.4461163e-12, 2.4724603e-11, 1.2550652e-11, 1.7924073e-11, 2.4092246e-11, 3.1099635e-11, 3.2873213e-11, 1.9854823e-11, 1.2604229e-11, 7.9728745e-12, 2.7277039e-11, 8.5136401e-12, 1.9863048e-11, 3.4652904e-11, 1.1901511e-11, 2.5563929e-11, 1.2166726e-11, 2.461745e-11, 1.3254037e-12, 7.839267e-12, 9.9509761e-12, 6.5985629e-12, 3.8159266e-12, 9.5138063e-12, 3.7557921e-12, 1.6593e-11, 1.3511137e-11, 7.505693e-12, 4.7188328e-12, 1.596798e-11, 3.1650071e-12, 5.7689072e-13, 4.2908888e-12, 1.1663197e-11, 6.9723748e-12, 2.1425766e-11, 7.5927268e-12, 1.5739669e-11, 6.1834017e-12, 7.7385613e-13, 2.4608447e-12, 1.8791743e-12, 2.8075349e-12, 1.061968e-12, 8.6929319e-12, 1.971688e-11, 3.1628729e-11, 4.7778446e-11, 3.5523798e-11, 3.331405e-11, 3.4131257e-11, 3.3807687e-11, 3.3272812e-11, 2.7870714e-11, 3.199665e-11, 2.726659e-11, 1.8468729e-11, 3.5013599e-11, 4.2273197e-11, 3.6007874e-11, 3.1525578e-11, 1.2414044e-11, 1.5876389e-11, 3.6948795e-12, 3.3746107e-11, 2.5809358e-11, 2.4112477e-11, 4.4271084e-11, 2.9867156e-11, 3.1420648e-11, 1.7371303e-11, 2.4465836e-11, 4.0992588e-12, 2.6491401e-12, 8.1303801e-12, 8.5713292e-12, 2.3663635e-12, 1.5372526e-11, 2.8357792e-11, 1.1904735e-11, 1.3772349e-11, 5.2911662e-12, 1.6268652e-11, 1.8988709e-11, 4.6916e-12, 1.0875669e-11, 1.3120318e-11, 2.6141042e-11, 7.6080661e-11, 9.5989838e-11, 1.4489528e-10, 2.0154195e-10, 3.0967917e-10, 4.3345436e-10, 6.3358286e-10, 8.8771735e-10, 1.2741231e-09, 1.7645955e-09, 2.5038187e-09, 3.4686766e-09, 4.8671167e-09, 6.7767861e-09, 9.4414534e-09, 1.3159652e-08, 1.8246835e-08, 2.5266961e-08, 3.487059e-08, 4.8017711e-08, 6.5968252e-08, 9.0295516e-08, 1.2330064e-07, 1.6787384e-07, 2.2790804e-07, 3.0853965e-07, 4.1644473e-07, 5.6052828e-07, 7.5213878e-07, 1.0063065e-06, 1.3422031e-06, 1.7847702e-06, 2.3659374e-06, 3.1264883e-06, 4.1185031e-06, 5.4079356e-06, 7.0781943e-06, 9.234058e-06, 1.2006817e-05, 1.5560174e-05, 2.0097201e-05, 2.5868814e-05, 3.3183366e-05, 4.2418174e-05, 5.403248e-05, 6.8582362e-05, 8.6737913e-05, 0.00010930182, 0.00013723087, 0.00017165865, 0.00021392091, 0.00026558174, 0.00032846207, 0.00040466801, 0.00049662036, 0.0006070829, 0.0007391898, 0.00089647036, 0.0010828703, 0.0013027684, 0.0015609871, 0.0018627962, 0.0022139076, 0.0026204618, 0.0030890034, 0.0036264471, 0.0042400316, 0.004937265, 0.0057258587, 0.0066136536, 0.0076085392, 0.0087183668, 0.0099508598, 0.011313523, 0.012813554, 0.014457756, 0.016252461, 0.018203457, 0.020315928, 0.022594403, 0.02504272, 0.027663998, 0.030460627, 0.033434265, 0.036585855, 0.039915638, 0.043423192, 0.047107468, 0.050966832, 0.05499912, 0.059201687, 0.063571465, 0.068105018, 0.072798595, 0.077648185, 0.082649568, 0.087798357, 0.093090051, 0.098520067, 0.10408378, 0.10977655, 0.11559376, 0.12153083, 0.12758323, 0.13374653, 0.14001638, 0.14638853, 0.15285883, 0.15942327, 0.16607796, 0.1728191, 0.17964307, 0.18654633, 0.19352548, 0.20057725, 0.20769849, 0.21488617, 0.22213736, 0.22944927, 0.2368192, 0.24424456, 0.25172287, 0.25925174, 0.26682889, 0.2744521, 0.28211929, 0.28982841, 0.29757751, 0.30536475, 0.3131883, 0.32104646, 0.32893756, 0.33686, 0.34481224, 0.35279281, 0.36080028, 0.36883326, 0.37689044, 0.38497053, 0.39307229, 0.40119452, 0.40933606, 0.41749581, 0.42567269, 0.43386567, 0.44207375, 0.45029603, 0.45853158, 0.46677972, 0.47503945, 0.4833107, 0.49159204, 0.49988463, 0.50818626, 0.5164997, 0.52482283, 0.53315832, 0.54150894, 0.5498738, 0.5582359, 0.5665362, 0.57494469, 0.58311624, 0.59136317, 0.59958707, 0.60776687, 0.6159676, 0.624232, 0.6323957, 0.6405601, 0.64871327, 0.65688165, 0.66508144, 0.673247, 0.68143447, 0.68964666, 0.69798511, 0.70610249, 0.71427091, 0.72235892, 0.73037817, 0.73833991, 0.74625126, 0.75411165, 0.76191705, 0.76966278, 0.77734373, 0.78495423, 0.79248781, 0.79993689, 0.80729313, 0.81454716, 0.82168897, 0.82870754, 0.83559096, 0.84232631, 0.84889968, 0.85529632, 0.86150056, 0.86749612, 0.87326608, 0.87879326, 0.88406045, 0.88905082, 0.89374843, 0.89813868, 0.9022091, 0.90594978, 0.90935421, 0.91241975, 0.91514819, 0.91754603, 0.91962462, 0.9214, 0.92289244, 0.92412584, 0.92512669, 0.92592309, 0.92654356, 0.92701596, 0.92736647, 0.92761863, 0.92779284, 0.92791107, 0.9279828, 0.92801901, 0.92802639, 0.92803187, 0.92801278, 0.92799155, 0.9279374, 0.92788026, 0.92781863, 0.92775834, 0.92770019, 0.9276448, 0.92759277, 0.92754454, 0.92750042, 0.92746044, 0.92742444, 0.92739211, 0.92736302, 0.92733674, 0.92731283, 0.9272909, 0.92727063, 0.92725175, 0.92723405, 0.92721737, 0.92720159, 0.92718663, 0.92717241, 0.92715889, 0.92714602, 0.92713376, 0.92712205, 0.92711087, 0.92710016, 0.92708987, 0.92707996, 0.92707038, 0.92706111, 0.92705212, 0.92704341, 0.92703496, 0.92702678, 0.9270189, 0.92701128, 0.92700388, 0.92699672, 0.92698978, 0.92698311, 0.92697697, 0.92697102, 0.9269644, 0.92695882, 0.92695257, 0.92694634, 0.92694042, 0.92693453, 0.92692853, 0.92692233, 0.92691583, 0.92690895, 0.92690158, 0.92689368, 0.92688513, 0.92687566, 0.9268651, 0.92685345, 0.92684118, 0.92682992, 0.92681909, 0.92680727, 0.92679675, 0.92678714, 0.92677884, 0.92677221, 0.9267674, 0.92676447, 0.92676321, 0.92676338, 0.92676473, 0.92676685, 0.92676937, 0.92677188, 0.92677402, 0.92677561, 0.92677665, 0.92677714, 0.92677547, 0.92677222, 0.92676995, 0.92676664, 0.92676285, 0.92675868, 0.92675421, 0.92674948, 0.92674448, 0.92673922, 0.92673375, 0.92672829, 0.92672287, 0.92671729, 0.92671144, 0.92670515, 0.92670037, 0.9266956, 0.9266888, 0.92668168, 0.92667323, 0.92666665, 0.92666105, 0.92665279, 0.92664626, 0.92663888, 0.92663016, 0.92662086, 0.92661089, 0.9266001, 0.92658832, 0.92657535, 0.92656091, 0.92654466, 0.92652616, 0.92650484, 0.92647999, 0.92645069, 0.92641577, 0.92637373, 0.92632266, 0.92626013, 0.92618306, 0.92608752, 0.92596852, 0.92581972, 0.92563309, 0.92539845, 0.92510291, 0.92473014, 0.92425951, 0.92366491, 0.92291337, 0.92196323, 0.92076189, 0.91924297, 0.91732274, 0.91489558, 0.91182839, 0.90795347, 0.90305973, 0.89688164, 0.88908574, 0.87925393, 0.86686358, 0.85126424, 0.83165196, 0.80704406, 0.77626142, 0.73793377, 0.69055942, 0.63268039, 0.56327591, 0.48250857, 0.39285097, 0.30012158, 0.21309309, 0.14045218, 0.086688654, 0.050828674, 0.028729114, 0.015849886, 0.00861729, 0.0046467978, 0.0024949216, 0.0013366319, 0.0007153302, 0.00038263615, 0.00020462933, 0.00010942248, 5.850937e-05, 3.1284829e-05, 1.6727594e-05, 8.9439202e-06, 4.7819894e-06, 2.5567432e-06, 1.3669313e-06, 7.308132e-07, 3.9068546e-07, 2.0884449e-07, 1.1162505e-07, 5.9670655e-08, 3.1888187e-08, 1.7047214e-08, 9.0987698e-09, 4.8644519e-09, 2.5910582e-09, 1.4090592e-09, 7.3607532e-10, 3.7363817e-10, 1.7609201e-10, 6.9859433e-11, 6.505581e-11, 1.1719474e-11, 4.888612e-11, 2.3601888e-12, 3.4779596e-11, 1.1009219e-11, 1.7066971e-11, 4.3198424e-11, 1.6923455e-11, 2.9291692e-11, 6.9220659e-12, 9.226979e-13, 1.9257449e-11, 2.1512192e-11, 2.9423553e-12, 1.0852717e-11, 3.749397e-13, 2.8956266e-11, 2.7232853e-11, 1.094118e-11, 2.3079547e-11, 3.5580423e-12, 8.7943225e-12, 3.5617162e-11, 3.3684635e-12, 1.2529068e-11, 1.9249346e-11, 3.1177378e-11, 1.2765265e-11, 2.028881e-11, 1.8367383e-12, 3.5656121e-11, 1.7748588e-11, 1.607812e-11, 1.6635646e-11, 2.148844e-11, 1.3817604e-11, 2.4028995e-11, 7.6920353e-12, 2.2070828e-11, 2.0256067e-11, 8.1556597e-12, 4.0443095e-12, 1.4599117e-11, 3.5777882e-11, 1.215202e-11, 3.2232604e-11, 1.05194e-11, 1.4869943e-12, 3.0990797e-12, 2.8712522e-11, 1.0117711e-11, 7.1187483e-12, 1.8899935e-11, 2.1021929e-11, 1.7956037e-11, 3.8355509e-11, 4.8117261e-12, 3.4119731e-13, 6.755352e-12, 2.2086811e-11, 1.8748094e-12, 2.1405527e-11, 2.1825197e-11, 1.3863227e-13, 8.1193644e-12, 6.0514244e-12, 1.3537343e-11, 2.5115964e-11, 1.3615816e-11, 3.6313542e-11, 3.1876534e-12, 5.0612307e-11, 1.4525195e-11, 4.9153061e-11, 5.0610199e-12, 3.5477641e-11, 2.0070373e-11, 1.2292317e-11, 2.257996e-11, 2.6219695e-11, 3.3177057e-11, 3.3918834e-11, 2.0201124e-11, 2.9929022e-11, 2.0404911e-11, 1.7744481e-11, 4.564097e-13, 3.0670022e-12, 6.1093637e-12, 4.9195239e-11, 5.3775764e-12, 3.2420629e-11, 3.2356918e-11, 1.1203127e-11, 2.1044239e-11, 7.0392762e-12, 1.0964045e-11, 2.4331011e-11, 1.1977203e-11, 2.7525213e-11, 2.2182711e-11, 3.4249153e-11, 2.6882887e-12, 3.8139957e-12, 1.3752339e-11, 2.0393922e-11, 1.8775732e-11, 1.6146492e-11, 8.4262645e-12, 2.6534919e-11, 1.1913936e-11, 3.2594002e-11, 1.6710789e-11, 2.4528359e-11, 1.5794528e-12, 3.0703987e-11, 1.9988459e-11, 4.2636903e-11, 2.9170263e-11, 1.5225348e-11, 2.5626762e-11, 4.4411928e-11, 1.589842e-11, 4.5259483e-11, 2.0439208e-11, 2.6341012e-11, 1.347341e-11, 2.1255684e-11, 1.0629729e-11, 3.9437928e-11, 2.9967427e-12, 3.1947237e-11, 6.9956554e-12, 6.1998242e-12, 2.0789284e-12, 2.0116436e-11, 4.647676e-12, 1.6522098e-11, 9.3896974e-12, 6.0516465e-12, 8.3840866e-12, 2.1797115e-11, 1.0969372e-11, 1.4066343e-12, 7.4723771e-12, 1.508716e-11, 2.572588e-11, 3.1789957e-11, 3.7379645e-12, 1.4661163e-11, 3.0160668e-11, 3.8229419e-11, 2.3631412e-11, 3.3269737e-11, 1.1988414e-11, 3.4363256e-11, 2.2416021e-11, 1.1728131e-11, 9.317551e-12, 9.889617e-12, 2.6019238e-11, 5.4338506e-12, 3.9482659e-11, 1.4534407e-11, 5.2454928e-11, 5.7924963e-11, 5.1665202e-11, 7.6479705e-11, 5.8635218e-11, 6.9449863e-11, 4.4034991e-11, 3.6424314e-11, 4.3910566e-11, 3.1681627e-11, 2.2541112e-11, 1.4644958e-11, 1.2643947e-11, 1.8225976e-11, 1.0744275e-11, 1.0612192e-11, 2.0740669e-11, 4.3798572e-11, 3.0136138e-11, 1.6759738e-11, 2.4857014e-11, 5.8160049e-12, 1.1487828e-11, 7.7568561e-12, 1.3198587e-11, 4.9671184e-12, 1.9774128e-11, 4.5795254e-12, 1.0955387e-11, 2.7193117e-11, 2.7553294e-12, 2.3722427e-11, 4.8546809e-12, 1.5726156e-11, 1.0720633e-11, 9.6529766e-12, 2.9908599e-12, 2.6848257e-11, 3.5884548e-13, 3.1516578e-11, 5.297738e-11, 3.3170952e-11, 4.9748325e-11, 1.0841063e-11, 5.7032789e-11, 4.068695e-11, 5.5832715e-11, 3.2919771e-11, 4.6057423e-11, 2.3108183e-11, 4.1595996e-11, 1.170904e-11, 1.0863594e-11, 1.5928055e-11, 2.1407081e-11, 1.4800017e-12, 2.8126359e-11, 4.7800593e-11, 5.4824441e-11, 2.0990407e-11, 5.1780192e-11, 1.1011772e-11, 2.5747635e-11, 1.1905057e-11, 1.7807748e-11, 3.2342156e-11, 9.8929469e-12, 1.1113443e-11, 6.7752201e-12, 1.8121308e-11, 6.0684066e-12, 3.6823562e-11, 3.2676027e-11, 3.8488147e-11, 4.7162818e-11, 2.817775e-11, 4.1453479e-11, 3.4595678e-11, 3.2416078e-11, 5.5118354e-11, 5.5519489e-12, 5.4331847e-11, 3.5331795e-12, 3.1377169e-11, 3.4956633e-12, 2.5582031e-11, 2.1050122e-11, 3.4838313e-11, 6.7041836e-12, 3.0708981e-11, 1.1507141e-11, 1.392205e-12, 2.4646346e-12, 2.9236638e-11, 1.18631e-12, 2.1137697e-11, 1.0209059e-11, 7.883501e-12, 6.1566473e-12, 4.3042588e-12, 3.0403524e-11, 2.3630743e-13, 2.2504595e-11, 1.8515117e-11, 1.5644797e-11, 3.6540082e-11, 3.5870451e-11, 3.4634194e-11, 1.2553487e-12, 2.1674356e-11, 2.6223579e-12, 2.6899536e-12, 1.6752412e-11, 1.2854726e-11, 2.237007e-11, 4.7813135e-12, 1.7285852e-11, 6.1368907e-13, 2.2063613e-11, 2.356861e-20]; let data3 = [6.9688318e-22, 1.644272e-11, 6.314786e-12, 3.2875102e-11, 9.8260368e-14, 2.3936075e-11, 2.694969e-11, 4.2087013e-11, 4.6329106e-11, 2.3309053e-11, 3.7687305e-11, 6.6659224e-12, 4.6838192e-12, 9.6655319e-12, 2.0671807e-11, 2.8959359e-11, 2.2623343e-11, 3.6969137e-11, 2.1388752e-11, 3.5699199e-11, 2.9340507e-11, 1.772255e-11, 8.2035196e-12, 1.8482512e-11, 2.4174501e-11, 1.7265261e-11, 2.2804302e-11, 3.1309939e-12, 6.693711e-12, 2.5666191e-11, 2.6720934e-11, 1.9686869e-11, 6.4094895e-12, 2.6156381e-11, 1.178002e-11, 2.1946524e-11, 1.5986765e-11, 4.5602823e-11, 4.2158819e-11, 5.0142253e-11, 3.0869434e-11, 2.972888e-11, 2.2426155e-11, 3.9049945e-11, 2.5087744e-11, 5.3440423e-11, 3.8887215e-11, 6.2241064e-11, 5.2624773e-11, 7.1175534e-11, 4.66878e-11, 4.4403358e-11, 4.6373456e-11, 4.1789009e-11, 4.2431703e-11, 3.5016267e-11, 4.5389963e-11, 4.1522905e-11, 5.6982577e-11, 4.5454432e-11, 6.0826959e-11, 2.1750226e-11, 2.9669301e-11, 1.1971094e-11, 3.0990037e-11, 1.1845156e-11, 2.3249141e-11, 7.7532336e-12, 1.9204681e-11, 3.0587436e-12, 1.4002994e-11, 2.5361628e-11, 9.4072093e-12, 1.9982205e-12, 5.6142917e-12, 8.5617698e-12, 2.0093693e-11, 1.1226582e-12, 1.1819035e-12, 1.1260151e-11, 7.7041034e-12, 6.2246287e-15, 1.140354e-11, 7.8352655e-13, 1.0221303e-11, 2.1752893e-12, 1.9166222e-11, 2.1780015e-11, 1.1090419e-11, 3.5089073e-11, 1.0938137e-11, 2.4513521e-11, 6.9846017e-12, 8.5136401e-12, 1.1986322e-11, 2.5332061e-12, 1.8469396e-12, 9.5819439e-12, 1.2684482e-11, 4.9295813e-12, 1.0067243e-11, 1.4625681e-11, 3.0977587e-12, 1.4397592e-11, 1.1447335e-11, 2.3799577e-11, 5.6455261e-12, 3.5564147e-11, 2.6856209e-11, 3.0241857e-11, 2.6844426e-11, 2.438536e-11, 1.8498852e-11, 1.5597614e-11, 1.3305279e-11, 8.4438352e-12, 1.2783854e-12, 1.7306833e-11, 2.4847206e-11, 9.7293345e-12, 2.3259701e-11, 6.1117071e-12, 2.1805469e-11, 4.1434982e-12, 2.0206737e-11, 1.071116e-11, 8.3765868e-12, 3.1402197e-12, 9.787357e-12, 1.4450279e-11, 1.1241922e-11, 1.0742283e-11, 4.307562e-12, 1.8921794e-12, 1.7633849e-11, 5.7883593e-12, 1.06129e-11, 8.7511769e-13, 1.374067e-11, 8.8962331e-12, 3.0052673e-11, 5.1190994e-12, 1.807691e-11, 2.3518579e-11, 2.1319836e-11, 4.4795191e-14, 1.0434831e-11, 8.6904865e-12, 2.1587385e-11, 4.3709199e-12, 2.9441991e-11, 1.0720275e-11, 7.4697902e-12, 1.0809754e-11, 1.4696486e-11, 1.8840651e-13, 1.442049e-11, 1.9502353e-11, 2.7316276e-11, 1.128316e-11, 9.0713011e-12, 1.2080803e-11, 3.0674025e-11, 3.5719429e-11, 1.915833e-11, 3.1539917e-11, 1.1264042e-11, 1.2411821e-11, 1.2584888e-12, 1.6417377e-11, 1.2998382e-12, 8.0154466e-12, 6.880339e-12, 2.9339062e-11, 2.0188063e-11, 2.6760505e-11, 3.110786e-11, 3.7842921e-11, 1.6658693e-11, 2.7987093e-11, 2.6125925e-11, 2.0261203e-11, 1.1568827e-11, 1.0462064e-11, 6.349355e-12, 1.5180229e-11, 2.04246e-12, 1.7739112e-12, 2.6350346e-11, 8.2377551e-12, 2.5672971e-11, 2.1312055e-11, 2.3692647e-11, 1.5997325e-12, 4.1161543e-12, 9.3535218e-12, 7.0731917e-12, 2.2783516e-11, 2.787416e-12, 1.0895343e-12, 1.0061575e-11, 5.620961e-12, 5.1491111e-12, 9.7073259e-12, 2.690156e-12, 7.136105e-12, 3.9105189e-12, 2.305262e-11, 9.1106498e-12, 1.7891949e-11, 1.515811e-11, 2.2325894e-11, 1.4907234e-11, 3.9668407e-11, 2.296881e-11, 2.0173391e-11, 2.3783237e-11, 1.961962e-11, 3.8646121e-12, 1.466025e-11, 1.2476068e-11, 4.1588375e-12, 1.4916349e-11, 7.0600755e-12, 1.0899789e-12, 1.9369746e-12, 8.2886638e-12, 1.4640909e-11, 6.0101121e-12, 1.5824368e-11, 6.2542069e-12, 3.9383074e-12, 4.4448375e-12, 1.3129099e-11, 5.8919551e-12, 2.6262423e-12, 9.3675273e-12, 7.495578e-12, 9.0743023e-12, 1.9489792e-12, 4.1585041e-12, 1.1289385e-11, 3.254264e-12, 2.727615e-11, 2.6855208e-11, 3.0241524e-11, 1.5608951e-11, 6.0245621e-13, 1.2463396e-11, 2.1251699e-11, 4.9694857e-12, 1.8488292e-11, 1.7308167e-11, 2.8451051e-12, 3.8551974e-11, 7.7724633e-12, 2.0788852e-11, 1.4494296e-11, 1.0015112e-11, 1.7135544e-12, 2.2126038e-11, 1.0695043e-11, 3.7801571e-11, 1.9514913e-11, 1.7230915e-11, 3.0993482e-11, 1.6909679e-11, 3.4409142e-11, 4.2537633e-12, 2.2227744e-11, 3.6879213e-11, 2.2517635e-11, 2.2170278e-11, 7.1939054e-13, 4.0701364e-12, 2.1823143e-11, 8.1009242e-12, 2.3839704e-11, 5.1708973e-12, 1.1727444e-11, 6.3424634e-12, 1.2382143e-11, 3.5569378e-14, 7.6585302e-12, 2.4730716e-12, 7.9594248e-12, 9.8192583e-12, 1.0134825e-11, 9.5584903e-12, 8.8383217e-12, 2.6082353e-12, 1.8433826e-11, 3.5326054e-11, 4.4339666e-11, 1.2091719e-10, 1.7084625e-10, 2.5967619e-10, 3.634545e-10, 5.5290375e-10, 7.9605286e-10, 1.1043283e-09, 1.5812387e-09, 2.2285323e-09, 3.1469275e-09, 4.4479603e-09, 6.2269566e-09, 8.6930763e-09, 1.2104844e-08, 1.6837257e-08, 2.3295801e-08, 3.2212568e-08, 4.4334733e-08, 6.0893725e-08, 8.337456e-08, 1.1391194e-07, 1.5513682e-07, 2.1066381e-07, 2.8526479e-07, 3.8513473e-07, 5.184716e-07, 6.9585825e-07, 9.3118369e-07, 1.2422554e-06, 1.6522398e-06, 2.1907008e-06, 2.8955934e-06, 3.8152406e-06, 5.0109495e-06, 6.5602045e-06, 8.560473e-06, 1.1133904e-05, 1.4432841e-05, 1.864643e-05, 2.4008378e-05, 3.0806173e-05, 3.939168e-05, 5.0193482e-05, 6.373087e-05, 8.0629924e-05, 0.00010164123, 0.00012766014, 0.00015974814, 0.00019915717, 0.00024735442, 0.00030604959, 0.00037722223, 0.00046314986, 0.0005664359, 0.00069003607, 0.00083728324, 0.0010119086, 0.0012180594, 0.0014603103, 0.0017436691, 0.0020735744, 0.0024558851, 0.0028968594, 0.0034031258, 0.003981642, 0.004639646, 0.0053845953, 0.0062241002, 0.0071658477, 0.0082175215, 0.0093867167, 0.010680855, 0.012107097, 0.013672263, 0.015382752, 0.017244475, 0.019262788, 0.021442444, 0.023787554, 0.026301551, 0.028987178, 0.031846482, 0.034880815, 0.038090856, 0.041476629, 0.045037541, 0.048772415, 0.052679542, 0.056756722, 0.061001318, 0.065410308, 0.069980336, 0.074707762, 0.079588712, 0.084619126, 0.089794796, 0.095111412, 0.1005646, 0.10614993, 0.11186299, 0.11769939, 0.12365474, 0.12972476, 0.13590521, 0.14219195, 0.14858094, 0.15506823, 0.16164999, 0.16832252, 0.1750822, 0.18192558, 0.18884927, 0.19585005, 0.20292479, 0.21007048, 0.21728423, 0.22456326, 0.23190489, 0.23930656, 0.2467658, 0.25428023, 0.2618476, 0.26946571, 0.27713249, 0.28484593, 0.2926041, 0.30040517, 0.30824737, 0.31612901, 0.32404845, 0.33200415, 0.33999461, 0.34801838, 0.3560741, 0.36416044, 0.37227612, 0.38041992, 0.38859065, 0.39678719, 0.40500842, 0.4132533, 0.42152079, 0.42980991, 0.4381197, 0.44644922, 0.45479757, 0.46316387, 0.47154727, 0.47994692, 0.48836204, 0.49679172, 0.50523546, 0.5136919, 0.52216136, 0.53064128, 0.53913374, 0.54763397, 0.55614653, 0.56466445, 0.57319362, 0.58172722, 0.59026928, 0.59881622, 0.60736834, 0.61592511, 0.62448513, 0.63304813, 0.64161313, 0.65017946, 0.65874591, 0.6673123, 0.67587697, 0.68443953, 0.69299866, 0.70155352, 0.71010264, 0.71864521, 0.72717945, 0.73570421, 0.74421761, 0.75271796, 0.76120312, 0.76967072, 0.77811816, 0.78654216, 0.79493922, 0.8033049, 0.81163417, 0.81992079, 0.82815731, 0.83633452, 0.84444109, 0.85246275, 0.86038162, 0.86817472, 0.8758128, 0.88325778, 0.89046056, 0.89735742, 0.90386671, 0.90988573, 0.91528921, 0.91993422, 0.92366278, 0.92634106, 0.92784161, 0.92829757, 0.9282984, 0.9282713, 0.92826961, 0.92826595, 0.92826551, 0.92826812, 0.92827398, 0.92827656, 0.92827988, 0.92828388, 0.92829462, 0.92829526, 0.928294, 0.92829365, 0.92829214, 0.92828957, 0.92828995, 0.92828473, 0.92825203, 0.92821711, 0.92810413, 0.92797596, 0.92781776, 0.92765406, 0.92748905, 0.92733948, 0.92722197, 0.92714752, 0.92712163, 0.92711871, 0.92711722, 0.92711593, 0.92711253, 0.92710873, 0.92709741, 0.92708225, 0.92705974, 0.92703606, 0.92701366, 0.9269948, 0.92697989, 0.92696832, 0.92695887, 0.92695033, 0.92694183, 0.92693296, 0.92692374, 0.92691443, 0.92690531, 0.92689663, 0.92688847, 0.92688082, 0.92687357, 0.92686657, 0.92685967, 0.92685275, 0.92684576, 0.92683874, 0.92683178, 0.92682498, 0.92681835, 0.92681197, 0.92680587, 0.92680037, 0.92679479, 0.9267895, 0.9267835, 0.92677779, 0.92677267, 0.92676776, 0.92676293, 0.92675801, 0.92675287, 0.92674735, 0.92674134, 0.92673479, 0.92672762, 0.92671977, 0.92671123, 0.92670216, 0.92669224, 0.92668065, 0.92666776, 0.92665596, 0.9266461, 0.92663748, 0.92662607, 0.9266169, 0.92660872, 0.9266022, 0.92659765, 0.9265949, 0.92659375, 0.92659388, 0.92659495, 0.92659702, 0.92659938, 0.926602, 0.92660442, 0.92660629, 0.92660738, 0.92660746, 0.92660629, 0.92660383, 0.9266003, 0.92659594, 0.92659129, 0.92658667, 0.92658204, 0.92657723, 0.92657201, 0.92656638, 0.92656039, 0.92655414, 0.92654714, 0.92653966, 0.92653448, 0.92652956, 0.92652316, 0.92651643, 0.92650962, 0.9265021, 0.92649434, 0.9264865, 0.92647784, 0.9264687, 0.92645885, 0.9264501, 0.9264418, 0.92643157, 0.92642051, 0.92640881, 0.92639628, 0.92638275, 0.92636804, 0.92635188, 0.92633396, 0.92631386, 0.92629103, 0.9262648, 0.92623425, 0.92619825, 0.92615529, 0.92610345, 0.92604026, 0.9259625, 0.92586606, 0.92574562, 0.92559432, 0.92540335, 0.92516138, 0.92485383, 0.92446195, 0.92396167, 0.92332208, 0.92250349, 0.92145494, 0.92011106, 0.91838798, 0.91617815, 0.91334364, 0.9097076, 0.90504345, 0.8990609, 0.89138843, 0.88155109, 0.86894299, 0.85279399, 0.83213126, 0.80573957, 0.77213127, 0.72955327, 0.67609096, 0.60999109, 0.53041726, 0.43882191, 0.34056529, 0.24517568, 0.1632928, 0.1014608, 0.059707787, 0.033806, 0.018665709, 0.010154046, 0.005479122, 0.0029441638, 0.0015787208, 0.00084568651, 0.00045280042, 0.00024238724, 0.00012973898, 6.9440429e-05, 3.7165985e-05, 1.9891759e-05, 1.064624e-05, 5.6978887e-06, 3.049471e-06, 1.6320517e-06, 8.7343127e-07, 4.6743332e-07, 2.5014952e-07, 1.3384814e-07, 7.1615183e-08, 3.8302331e-08, 2.0481096e-08, 1.0948229e-08, 5.8510068e-09, 3.1322059e-09, 1.6631885e-09, 8.57237e-10, 4.4180893e-10, 2.3606094e-10, 1.0653837e-10, 4.8445804e-11, 3.8261163e-11, 4.5305767e-12, 3.0781683e-11, 1.9434374e-11, 1.4308533e-11, 1.6763067e-11, 1.0900001e-11, 7.5461885e-12, 2.7021852e-11, 5.7774899e-12, 7.0599212e-12, 6.0658537e-12, 1.4065233e-11, 2.1357799e-11, 2.7991834e-11, 3.1688949e-13, 5.4280789e-12, 1.650667e-11, 4.0891069e-11, 5.6260599e-11, 3.8895053e-11, 2.5336844e-11, 3.9860262e-11, 1.6378804e-11, 1.7282189e-11, 1.3859227e-11, 1.4629087e-13, 8.4004028e-12, 2.5132947e-11, 2.0514684e-11, 5.5260427e-11, 5.613007e-11, 8.2709276e-11, 4.497345e-11, 5.2929541e-11, 5.7110263e-11, 6.9544209e-11, 7.4599235e-11, 3.1559311e-11, 6.120341e-11, 2.6694862e-11, 2.024641e-11, 1.515409e-11, 1.5751907e-11, 1.5740807e-11, 4.6726499e-12, 4.2641121e-11, 3.1802278e-11, 5.9698102e-11, 2.4635248e-12, 1.1014436e-11, 5.2965502e-12, 1.8254279e-11, 1.4623092e-11, 3.7850483e-11, 1.9546146e-12, 4.8512512e-11, 1.8027185e-11, 4.4816947e-11, 1.7458116e-11, 6.9470286e-11, 4.9698711e-11, 6.6345123e-11, 3.3800291e-11, 7.1974213e-11, 3.7158654e-11, 8.4838374e-11, 1.3432009e-11, 8.3507327e-11, 3.8679835e-11, 6.5401114e-11, 1.2362687e-11, 7.8441534e-11, 2.1142137e-11, 3.1710818e-11, 5.3928159e-11, 5.3182054e-11, 4.5290117e-11, 2.5674045e-11, 5.923259e-11, 4.5728657e-11, 5.7957485e-11, 2.930157e-11, 6.1021046e-11, 4.9183585e-11, 8.4027003e-11, 2.2707049e-11, 5.8156498e-11, 4.7588149e-11, 5.6304331e-11, 2.8830176e-11, 5.8142069e-11, 2.744907e-11, 2.3922773e-11, 5.1634678e-12, 3.7483424e-11, 2.7852314e-11, 1.821976e-12, 1.8758099e-14, 7.2568256e-12, 5.5144882e-11, 2.234554e-11, 3.6724e-11, 2.7349841e-11, 3.4800685e-11, 5.3074278e-12, 1.20751e-11, 1.5684422e-11, 3.8380594e-11, 2.5202207e-11, 5.6174357e-11, 1.8072359e-11, 2.6781216e-11, 1.4482462e-11, 8.3793138e-12, 1.3220897e-11, 1.6602569e-12, 3.0230928e-11, 3.3592287e-11, 5.5116578e-11, 6.3377683e-11, 7.4435962e-11, 5.0469568e-11, 4.3236495e-11, 3.3662436e-11, 1.3699395e-11, 5.1504926e-11, 4.373253e-11, 3.3496388e-11, 2.4427687e-11, 3.8436202e-11, 3.5448894e-11, 3.257369e-11, 2.7977294e-11, 2.8831508e-11, 1.2698557e-11, 2.5001751e-11, 1.3384836e-11, 1.971075e-11, 1.2994357e-11, 1.3088148e-11, 1.6582923e-11, 8.1139258e-12, 3.5938158e-11, 1.4750514e-11, 9.3928053e-12, 1.7985562e-12, 1.590963e-11, 4.7555628e-12, 3.5563773e-12, 1.7015469e-12, 8.9185254e-12, 1.5699961e-11, 5.2750174e-12, 1.1218555e-11, 1.7849038e-12, 1.03296e-11, 4.5309097e-12, 2.6763013e-11, 4.5335736e-12, 1.0454357e-11, 3.0471342e-11, 3.211051e-11, 6.2507818e-11, 2.9848218e-11, 6.2961897e-11, 7.356532e-11, 6.8332703e-11, 1.0839231e-10, 7.1992638e-11, 8.1141477e-11, 8.1786356e-11, 7.4219744e-11, 6.9918038e-11, 5.0034581e-11, 3.6349171e-11, 3.1050956e-11, 4.2421795e-11, 2.0902277e-11, 5.2895244e-11, 1.9525611e-11, 3.3844467e-12, 4.1533062e-11, 1.4276123e-12, 1.8104215e-11, 4.7198225e-12, 3.7571221e-11, 1.4317191e-11, 2.9038957e-11, 7.6348731e-12, 4.6844152e-12, 1.2681686e-11, 3.2787799e-12, 1.2783024e-11, 1.5131891e-12, 2.1837961e-11, 1.92186e-11, 2.6969464e-12, 3.3476409e-11, 1.9815418e-11, 4.5208647e-11, 3.9951056e-11, 5.1660762e-11, 2.2907727e-11, 9.1554989e-12, 1.1622131e-11, 7.3245325e-13, 1.5328351e-12, 1.4989152e-11, 1.7662567e-12, 4.8820966e-12, 4.0439765e-12, 5.3799072e-13, 8.3456824e-12, 1.4397107e-12, 1.3843466e-11, 1.4267576e-11, 2.6067188e-11, 7.6877066e-12, 1.781463e-12, 1.741505e-13, 7.2234163e-12, 5.1667977e-12, 9.0937859e-12, 1.0709645e-11, 1.1865432e-11, 3.2584679e-12, 2.2026874e-11, 3.0745489e-14, 2.639551e-11, 1.0207727e-11, 1.4503662e-12, 1.5962685e-11, 2.4756564e-11, 7.4725991e-12, 1.5719829e-11, 5.8238855e-13, 9.3606168e-12, 1.618523e-12, 3.9659917e-11, 1.3356755e-11, 3.2485339e-11, 4.5040491e-12, 9.7542039e-13, 1.4630528e-11, 2.525604e-11, 2.6123684e-11, 5.2356587e-11, 4.3091204e-11, 5.4287227e-11, 1.4033045e-11, 4.9993291e-11, 2.206439e-11, 5.5926728e-11, 3.1548655e-11, 4.8612296e-11, 4.2891746e-11, 3.7626385e-11, 6.0400808e-11, 4.8195178e-11, 4.3433289e-11, 4.8251453e-11, 4.4334343e-11, 3.9629061e-11, 5.6315542e-11, 5.0820089e-11, 2.6441018e-11, 7.3309811e-11, 2.3628415e-11, 2.9492814e-11, 2.7083565e-11, 4.0127648e-11, 2.8342355e-11, 5.2944525e-11, 4.2551659e-11, 3.3472302e-11, 3.773072e-11, 4.7997164e-11, 2.9040733e-11, 5.0418622e-11, 3.3453877e-11, 1.0104946e-12, 2.723363e-12, 4.1511973e-12, 1.8644792e-20]; let data5 = [8.8755469e-22, 1.8272653e-11, 1.0733613e-11, 2.7953635e-11, 4.0261304e-11, 4.0519627e-11, 2.6162828e-11, 1.8507411e-11, 3.7509347e-11, 1.2686038e-12, 4.4012317e-11, 1.0528311e-11, 3.9979306e-11, 7.1194322e-13, 3.1690309e-11, 1.1239254e-11, 2.5174778e-11, 9.4864624e-12, 3.0043224e-11, 7.6723133e-12, 4.0573981e-11, 8.6146793e-12, 1.1601506e-11, 9.6370764e-12, 2.5131094e-11, 1.7846932e-12, 8.4477253e-13, 1.0806197e-11, 3.1424205e-11, 1.6773181e-12, 4.5035937e-11, 1.64286e-13, 2.3256255e-11, 4.8283198e-12, 2.2983149e-11, 1.3398093e-11, 8.522977e-12, 1.1698655e-11, 8.3994846e-12, 1.9472119e-11, 9.1014239e-12, 1.4485737e-11, 2.5002155e-11, 2.4439826e-11, 1.9087858e-11, 1.7320616e-11, 1.3126209e-11, 1.3104534e-11, 1.6955919e-11, 1.3026837e-11, 4.9831132e-11, 2.7873382e-11, 2.1826589e-11, 1.7490015e-11, 1.2527421e-11, 1.3321285e-11, 8.621682e-12, 1.0819202e-11, 6.0263407e-12, 2.0526639e-11, 1.3794247e-11, 6.3775882e-12, 8.5345371e-12, 1.1445557e-12, 1.5747005e-11, 7.6131792e-12, 1.3336847e-11, 3.2547086e-12, 1.1789246e-11, 2.1615173e-11, 1.3106757e-11, 2.0772179e-11, 5.7986967e-12, 2.3010048e-11, 4.2337555e-12, 3.3382188e-11, 2.4994819e-11, 2.4757838e-11, 9.6001732e-12, 2.5441437e-11, 1.2652692e-11, 7.9859907e-12, 1.3192346e-11, 1.3035396e-11, 1.2489296e-12, 1.3751119e-11, 8.4677333e-13, 2.0941467e-13, 9.1730073e-12, 1.1213022e-11, 3.2567093e-12, 1.4686371e-11, 9.470345e-13, 8.1800661e-12, 9.6435234e-12, 8.1576129e-13, 8.6654768e-12, 7.5295912e-13, 2.0637238e-11, 8.718942e-12, 1.378202e-11, 1.1651748e-11, 7.9914372e-12, 2.2589885e-12, 4.1193777e-13, 3.5602716e-13, 2.0938799e-11, 2.5269481e-11, 1.4724497e-11, 2.2813083e-11, 2.8044115e-11, 3.1476003e-11, 5.1240791e-11, 3.116077e-11, 4.8701916e-11, 1.4031005e-12, 4.8881208e-11, 1.3291496e-11, 3.5871044e-11, 1.2820202e-11, 2.3258256e-11, 2.273772e-12, 2.8150934e-11, 1.1085417e-12, 1.6619122e-11, 4.5584372e-12, 4.3841473e-12, 2.1139322e-12, 3.0644124e-12, 1.1742783e-11, 4.1777338e-12, 1.7036172e-11, 5.4652338e-12, 3.793529e-11, 1.9054957e-11, 2.8574321e-11, 1.9084857e-11, 8.7654045e-12, 9.5515988e-12, 3.4541194e-12, 1.4369359e-11, 2.913465e-12, 1.5769125e-11, 2.4605112e-12, 1.4840209e-12, 2.4542532e-11, 7.2936106e-12, 2.9159214e-11, 3.3566371e-12, 1.9202681e-11, 1.3955643e-11, 1.1239477e-11, 2.3841371e-11, 1.4453503e-11, 1.159417e-11, 6.5890036e-12, 2.2701706e-11, 3.6958577e-11, 3.4684249e-11, 2.9639512e-11, 2.7414648e-11, 4.862233e-11, 2.9069958e-11, 3.5153987e-11, 3.4429039e-11, 2.6555981e-11, 4.0850644e-11, 3.0675804e-11, 5.1219449e-11, 4.77441e-12, 2.655398e-11, 3.1386969e-11, 3.4213511e-11, 3.624141e-11, 1.6622679e-11, 2.5780791e-11, 2.4026665e-11, 3.4672912e-11, 3.4961802e-11, 4.0297207e-11, 1.2481292e-11, 2.0136821e-11, 1.155471e-11, 6.5982295e-12, 1.4902899e-11, 5.9878813e-12, 8.4771815e-12, 3.4797627e-11, 1.4078135e-11, 1.2861551e-11, 1.4217078e-11, 2.1404981e-12, 1.2843099e-11, 6.4858527e-13, 1.2323787e-11, 1.2841877e-11, 3.1050505e-11, 4.7659733e-11, 1.9660414e-11, 5.4314429e-11, 2.442382e-11, 5.7484994e-11, 1.7082524e-11, 2.6238524e-11, 2.5719323e-11, 3.2529301e-12, 1.2547429e-11, 2.1220464e-12, 1.3222358e-11, 5.7659062e-12, 2.8632788e-11, 6.9821563e-12, 8.9501429e-12, 3.6701033e-11, 9.392537e-12, 2.6822418e-11, 2.0672807e-11, 3.2724488e-11, 2.9320499e-11, 1.7357964e-11, 2.0273208e-11, 5.9623159e-13, 3.8840641e-12, 1.1987434e-11, 1.1992325e-11, 1.167987e-11, 1.5016833e-11, 6.9690401e-12, 1.071016e-11, 5.2178044e-12, 1.2835207e-11, 3.3371851e-12, 1.4056015e-11, 1.9366189e-11, 1.4011331e-11, 2.3000156e-11, 5.0676683e-11, 3.700215e-12, 3.983914e-11, 2.8753501e-11, 4.2976137e-11, 3.1558369e-11, 4.0128364e-11, 2.7488788e-11, 4.5937731e-11, 3.1377521e-11, 3.7956298e-11, 2.371899e-11, 3.973121e-11, 1.0394926e-11, 2.6689255e-11, 1.6875999e-11, 2.4361129e-11, 5.4975797e-12, 3.1841145e-11, 1.5992656e-11, 1.7503243e-11, 1.3029505e-11, 1.2633018e-11, 1.9364521e-11, 9.046736e-12, 4.2479833e-12, 3.8152596e-12, 3.0043891e-12, 1.8084357e-11, 1.1009721e-11, 2.5575378e-11, 2.2657022e-11, 2.4589551e-11, 2.361206e-11, 2.7337952e-11, 2.7915287e-11, 7.6091777e-12, 8.3942603e-12, 2.236024e-11, 1.2721719e-11, 1.8846431e-11, 2.3197232e-11, 1.0804974e-11, 1.9368745e-11, 4.2606548e-12, 7.4951334e-13, 1.3374862e-11, 4.3480221e-12, 1.0584111e-11, 1.3272933e-12, 1.8003215e-11, 1.7960198e-11, 2.2397699e-11, 3.3285484e-11, 3.7689861e-11, 5.3303481e-11, 9.9480416e-11, 7.7390503e-11, 1.7477177e-10, 2.272775e-10, 3.0180055e-10, 4.3190998e-10, 6.1628025e-10, 8.5127097e-10, 1.2009967e-09, 1.6950411e-09, 2.3772034e-09, 3.3206575e-09, 4.6423437e-09, 6.4769579e-09, 9.0289383e-09, 1.2518788e-08, 1.7366293e-08, 2.3993656e-08, 3.3123488e-08, 4.5587198e-08, 6.2621576e-08, 8.5697329e-08, 1.1700797e-07, 1.5926845e-07, 2.1624124e-07, 2.9268777e-07, 3.9509373e-07, 5.31683e-07, 7.1341492e-07, 9.5435111e-07, 1.2728411e-06, 1.6923936e-06, 2.2433017e-06, 2.9642088e-06, 3.9044963e-06, 5.1265713e-06, 6.7095317e-06, 8.7526142e-06, 1.1380275e-05, 1.4747547e-05, 1.9046987e-05, 2.4516235e-05, 3.1447689e-05, 4.0198829e-05, 5.120511e-05, 6.499374e-05, 8.2200111e-05, 0.0001035856, 0.0001300579, 0.0001626927, 0.00020275786, 0.0002517386, 0.00031136464, 0.00038363743, 0.00047085867, 0.0005756576, 0.00070101771, 0.00085030094, 0.0010272691, 0.0012361002, 0.0014814008, 0.0017682101, 0.0021019974, 0.0024886507, 0.0029344562, 0.0034460673, 0.0040304647, 0.0046949055, 0.0054468639, 0.0062939633, 0.0072439014, 0.0083043699, 0.0094829708, 0.010787131, 0.012224019, 0.013800462, 0.015522872, 0.017397174, 0.019428746, 0.02162237, 0.023982191, 0.026511687, 0.029213656, 0.032090202, 0.03514275, 0.038372053, 0.041778217, 0.045360735, 0.04911852, 0.053049949, 0.057152909, 0.061424846, 0.06586281, 0.070463511, 0.075223362, 0.080138533, 0.085204989, 0.090418541, 0.09577488, 0.10126961, 0.1068983, 0.11265649, 0.11853973, 0.12454359, 0.13066372, 0.13689581, 0.14323565, 0.14967913, 0.15622222, 0.16286103, 0.16959178, 0.17641082, 0.1833146, 0.19029974, 0.19736295, 0.20450109, 0.21171115, 0.21899023, 0.22633556, 0.23374448, 0.24121448, 0.24874313, 0.25632813, 0.26396728, 0.27165847, 0.27939973, 0.28718915, 0.29502494, 0.30290538, 0.31082886, 0.31879385, 0.32679891, 0.33484267, 0.34292387, 0.35104133, 0.35919394, 0.36738069, 0.37560068, 0.3838531, 0.39213724, 0.40045251, 0.40879849, 0.41717482, 0.42558146, 0.43401829, 0.442486, 0.45098432, 0.45951561, 0.46807855, 0.47667818, 0.48531154, 0.49398337, 0.50269278, 0.51142777, 0.52019435, 0.52894898, 0.53767062, 0.54619037, 0.55499055, 0.56387567, 0.57088999, 0.58186201, 0.5861534, 0.60021703, 0.60134738, 0.61785314, 0.61911379, 0.63651665, 0.63678505, 0.65784138, 0.6578795, 0.68603009, 0.68845669, 0.71563473, 0.7134741, 0.71776554, 0.72108445, 0.72489199, 0.72923484, 0.73324986, 0.73173841, 0.73678235, 0.73840361, 0.74979991, 0.75581631, 0.77310827, 0.7704936, 0.78042619, 0.78220028, 0.7940975, 0.79340896, 0.80760385, 0.81136595, 0.80745767, 0.80743041, 0.80738714, 0.8133333, 0.81768179, 0.83020585, 0.83392377, 0.84706516, 0.84821172, 0.84909587, 0.85421756, 0.85347514, 0.86521386, 0.86563354, 0.88757134, 0.88371381, 0.89109113, 0.89310991, 0.89495336, 0.89530943, 0.90088965, 0.9056695, 0.90624354, 0.90462222, 0.90913183, 0.90974483, 0.91466033, 0.91320631, 0.91956892, 0.91835912, 0.92343729, 0.92382604, 0.92693279, 0.92690753, 0.92814953, 0.92854157, 0.92852411, 0.92780793, 0.92735543, 0.92691682, 0.92688725, 0.9267973, 0.92683193, 0.92684918, 0.92670024, 0.92654014, 0.92619538, 0.92608007, 0.92586642, 0.92592779, 0.92550746, 0.92549336, 0.92519671, 0.92510795, 0.92486953, 0.92480406, 0.92477448, 0.92478989, 0.92478722, 0.92486421, 0.92485254, 0.92500294, 0.92502212, 0.92520048, 0.92511055, 0.92517063, 0.92517352, 0.92527893, 0.92528055, 0.92535972, 0.92536251, 0.92539352, 0.92544885, 0.92554893, 0.92559441, 0.92564226, 0.92546138, 0.92548614, 0.92552699, 0.92546651, 0.92542342, 0.92534365, 0.92535393, 0.92537345, 0.92523031, 0.9252568, 0.92505143, 0.9249375, 0.92487305, 0.92485538, 0.92463872, 0.92422622, 0.92384466, 0.92351762, 0.92330762, 0.92339761, 0.92297597, 0.92342119, 0.92266706, 0.92357812, 0.92389217, 0.92388786, 0.92420779, 0.92468576, 0.92435758, 0.92440925, 0.92437358, 0.92438647, 0.92439618, 0.9243746, 0.92442331, 0.92447101, 0.92455341, 0.92467416, 0.92476762, 0.92486624, 0.92492277, 0.92502235, 0.92511518, 0.92534355, 0.92523595, 0.92525984, 0.92497355, 0.92495751, 0.92494348, 0.92493844, 0.92494037, 0.9249994, 0.92507841, 0.92526106, 0.92523889, 0.92552905, 0.92556646, 0.92580527, 0.92587979, 0.92601391, 0.9260997, 0.92623408, 0.92650175, 0.92670573, 0.92672, 0.9264975, 0.92642097, 0.92643383, 0.92653644, 0.92657195, 0.92656547, 0.92653991, 0.92654973, 0.92677317, 0.92675649, 0.92710071, 0.92713023, 0.92744911, 0.92763419, 0.92775855, 0.92771742, 0.92759541, 0.92761257, 0.92770025, 0.92775435, 0.92774143, 0.92765611, 0.92784568, 0.92794316, 0.92835903, 0.92857216, 0.92895711, 0.92898694, 0.92887355, 0.92885884, 0.92890899, 0.92882222, 0.92849467, 0.92815199, 0.92705378, 0.92504573, 0.92195214, 0.91754425, 0.91146947, 0.90331449, 0.89244729, 0.87812935, 0.85940026, 0.83510999, 0.80387083, 0.7640899, 0.7140365, 0.65203482, 0.57693332, 0.48907501, 0.39176494, 0.29237997, 0.20176242, 0.12922921, 0.077781305, 0.04470325, 0.024914804, 0.013636957, 0.0073884694, 0.0039820163, 0.0021403102, 0.0011488503, 0.0006162604, 0.00033046778, 0.0001771866, 9.4995694e-05, 5.0928843e-05, 2.7303412e-05, 1.4637492e-05, 7.8471456e-06, 4.2068227e-06, 2.2552263e-06, 1.2090172e-06, 6.4813081e-07, 3.4746604e-07, 1.8628374e-07, 9.9837153e-08, 5.3508618e-08, 2.8684448e-08, 1.5368512e-08, 8.2270942e-09, 4.4169899e-09, 2.3592016e-09, 1.2645366e-09, 6.5020614e-10, 3.5471392e-10, 1.6778529e-10, 1.0050526e-10, 5.1615698e-11, 1.0800772e-11, 1.7813076e-11, 4.995311e-11, 3.1669195e-11, 3.3961344e-11, 1.1708041e-11, 2.5872614e-11, 1.0639829e-11, 1.9704757e-11, 4.8069532e-12, 1.7319594e-11, 2.2914165e-11, 8.8837842e-12, 1.4515871e-12, 4.1505313e-12, 1.3497718e-11, 2.0270718e-11, 3.6340735e-12, 4.1322172e-12, 2.1671026e-11, 5.2655829e-12, 2.0408351e-11, 1.8707248e-11, 2.5831435e-11, 8.2879649e-13, 1.7264541e-11, 2.4574207e-13, 1.8723787e-11, 5.4721549e-11, 5.3244099e-12, 4.0799387e-12, 3.1560754e-11, 1.171348e-11, 1.5634696e-11, 1.064105e-12, 1.6620661e-11, 1.1558643e-11, 1.7717288e-11, 1.1078591e-11, 1.8877403e-11, 2.0996179e-11, 1.401018e-11, 1.9477884e-11, 1.7053762e-11, 2.1874811e-12, 2.624145e-11, 6.7389027e-11, 4.4233116e-11, 2.6371202e-11, 1.7523158e-11, 1.1761985e-11, 1.7927844e-11, 5.71389e-12, 1.9180751e-11, 1.1333324e-11, 1.6342287e-11, 1.9778013e-11, 1.501457e-11, 2.0305681e-11, 2.9919033e-11, 4.83337e-12, 3.7838718e-11, 4.8999667e-12, 4.1883472e-11, 2.0392146e-11, 3.8322654e-11, 6.206606e-11, 4.4075393e-11, 3.2064669e-11, 5.9149122e-11, 5.2948188e-11, 6.3164129e-11, 8.962113e-11, 4.4416146e-11, 1.0008559e-10, 3.4554944e-11, 7.4140605e-11, 1.188985e-11, 6.6591309e-11, 3.9916093e-11, 5.8978968e-11, 4.1150352e-11, 1.2497435e-11, 9.8640881e-13, 1.3660214e-11, 1.4786143e-11, 1.1291035e-11, 2.8940616e-11, 2.9410234e-12, 3.2128269e-11, 2.2550769e-11, 2.3148697e-11, 4.3842193e-11, 2.3608103e-11, 6.6996661e-11, 2.563664e-11, 8.4134335e-11, 2.7177578e-11, 8.6780779e-11, 7.6754528e-11, 9.3666772e-11, 7.6846209e-11, 4.7693483e-11, 3.9477664e-11, 3.5640137e-11, 3.4006408e-11, 1.3857673e-12, 2.7787826e-11, 1.7218922e-11, 8.4016237e-12, 1.8166372e-11, 2.496257e-11, 7.3955687e-13, 2.7269148e-11, 2.6721834e-11, 1.790276e-11, 1.3086927e-11, 4.7405896e-11, 4.2377064e-11, 1.2679133e-11, 4.8221706e-11, 5.814562e-12, 1.7775671e-11, 2.2400926e-12, 5.3610382e-13, 3.6900148e-12, 5.3574531e-11, 1.0308511e-11, 3.1199244e-11, 1.5624707e-11, 1.2150577e-12, 1.1282599e-11, 1.3037423e-12, 3.3328342e-12, 3.5065297e-11, 2.928148e-12, 1.0302739e-11, 1.7476874e-11, 2.517457e-11, 5.6404116e-12, 6.4988436e-11, 3.1622356e-11, 7.7872687e-11, 4.7857644e-11, 7.8295132e-11, 4.5235286e-11, 4.5798916e-11, 2.2290264e-11, 3.8032182e-11, 3.4512877e-11, 5.2836861e-11, 4.524805e-11, 7.8457073e-11, 3.9417283e-11, 6.1127601e-11, 4.0157173e-11, 3.5567658e-11, 2.9153947e-11, 1.1805273e-11, 2.9678064e-11, 5.7686103e-12, 5.7457454e-12, 3.2302197e-11, 4.9529666e-11, 4.6999878e-11, 5.174534e-11, 1.7997327e-11, 2.8981795e-11, 5.713224e-12, 7.3452883e-12, 1.7813853e-11, 8.047995e-12, 2.8741158e-11, 1.1843011e-11, 3.2613315e-11, 3.2346595e-11, 1.4849854e-11, 3.6456059e-11, 3.2138592e-11, 2.9605806e-11, 4.3727425e-12, 3.0369671e-11, 2.1015048e-11, 3.601652e-11, 1.1914491e-11, 1.3487728e-11, 3.9754928e-12, 1.0703429e-11, 7.4307541e-12, 4.1479785e-12, 1.0173985e-11, 2.0516016e-11, 1.3770764e-11, 1.0646267e-11, 1.7800534e-11, 3.2188317e-11, 3.6530203e-11, 6.5765398e-12, 2.0016763e-12, 1.8334085e-12, 1.0266888e-11, 1.4851519e-11, 2.2044189e-11, 6.0457638e-12, 2.5460048e-11, 1.4669155e-11, 2.4177394e-11, 5.8807037e-11, 6.2834032e-12, 6.6183848e-12, 1.6271806e-13, 1.8075134e-11, 2.2461973e-12, 5.3903408e-12, 1.6028505e-11, 4.0313232e-13, 3.2548272e-11, 4.1948181e-12, 1.1798724e-12, 6.5309211e-12, 6.6507952e-12, 8.8736836e-12, 1.6863184e-11, 1.6735319e-11, 1.9874467e-11, 1.2464469e-11, 2.6440019e-12, 9.8318998e-12, 2.0435212e-12, 1.1405914e-11, 1.9396969e-11, 1.3411475e-12, 8.558903e-12, 1.631254e-11, 8.5403669e-12, 4.0904832e-12, 8.2904072e-12, 1.7191951e-12, 5.3472749e-12, 2.5418536e-11, 1.5305265e-11, 7.2793575e-12, 5.020973e-11, 1.3790522e-11, 2.0260951e-12, 7.3462872e-12, 1.5602508e-12, 1.2291651e-11, 1.3710272e-11, 5.3200812e-12, 7.043827e-12, 8.1839633e-12, 3.117982e-11, 1.4296324e-11, 3.3934817e-11, 9.2874715e-12, 1.71975e-11, 1.5451111e-11, 2.1490771e-12, 1.0344473e-11, 4.5709788e-12, 6.2577634e-12, 2.0089797e-11, 4.5736648e-11, 3.6199883e-11, 2.7324757e-11, 5.4422973e-11, 3.1747225e-11, 3.6302997e-11, 4.2841466e-11, 5.7356338e-11, 5.2325509e-11, 5.2084095e-11, 3.44798e-11, 9.686164e-12, 1.4551611e-11, 4.7665845e-11, 4.0686173e-12, 1.1008331e-11, 2.4060184e-11, 1.879005e-11, 2.6862908e-11, 3.4303985e-12, 7.5572879e-12, 1.8099951e-20]; let data4 = [2.9640062e-21, 9.3329583e-12, 2.7505128e-12, 1.2046123e-11, 9.4759025e-13, 1.3365413e-11, 2.8670914e-11, 2.0633236e-11, 2.3636847e-11, 3.4316662e-12, 2.0934353e-11, 2.3455777e-12, 5.9056272e-12, 1.0987934e-11, 1.5653969e-11, 2.2826977e-11, 1.0468955e-11, 6.6778159e-12, 7.2381446e-12, 8.0519052e-12, 1.0072245e-11, 4.5852253e-12, 9.4651207e-12, 1.260145e-11, 3.3677525e-12, 6.1690628e-12, 4.4931896e-12, 2.3751447e-12, 7.724e-12, 1.3185121e-12, 1.6603671e-11, 1.4090473e-11, 8.0091108e-12, 2.9737105e-12, 4.5938954e-12, 1.2772628e-11, 2.4963029e-12, 4.7423975e-12, 1.1312616e-11, 1.2850213e-11, 1.2648024e-11, 1.9927407e-11, 5.9455315e-12, 1.6689038e-11, 2.1524916e-11, 3.2399806e-11, 1.0232752e-11, 7.1952391e-12, 6.7022699e-12, 1.3764457e-11, 1.1613733e-11, 1.7275043e-11, 1.6410819e-12, 2.666369e-12, 3.8416032e-12, 1.6578661e-12, 1.1866276e-11, 6.4615097e-12, 8.1140404e-12, 3.4703479e-12, 1.5422657e-12, 3.8004761e-12, 1.1784577e-12, 1.2324898e-11, 1.3230583e-11, 3.6088461e-12, 1.758383e-11, 1.4494518e-13, 1.2159945e-11, 1.0882004e-12, 1.4816533e-11, 8.6553618e-12, 1.9557374e-11, 2.2128373e-11, 3.168564e-12, 1.1052737e-11, 7.2584859e-12, 1.0890897e-12, 1.6109479e-11, 4.9710419e-12, 1.3393535e-11, 1.7507244e-11, 7.0728583e-12, 3.611725e-11, 7.3771987e-12, 1.8627457e-11, 2.3087856e-12, 2.7133872e-12, 4.2321994e-12, 2.7794684e-11, 6.4452812e-12, 2.5169665e-11, 8.9348037e-12, 1.2712715e-12, 1.5921295e-11, 1.0449725e-11, 6.3035594e-13, 1.2070577e-11, 1.1566381e-11, 3.5177663e-11, 1.4124486e-11, 4.1937956e-11, 1.7787131e-11, 4.9642726e-11, 2.4534752e-11, 3.7980641e-11, 3.7185554e-12, 2.2332341e-11, 4.5134197e-12, 2.1476786e-11, 1.8698596e-11, 1.5798803e-11, 3.1917953e-12, 1.737775e-11, 1.1408987e-11, 7.2948333e-12, 1.8829758e-11, 4.0927008e-12, 3.0558536e-11, 4.9908286e-14, 2.5212015e-11, 1.9438661e-11, 2.7429542e-12, 1.734985e-11, 1.2607119e-12, 1.4012776e-11, 2.0970145e-11, 3.2229629e-11, 2.7516688e-11, 3.1972752e-11, 3.8435373e-11, 1.5694985e-11, 2.1617841e-11, 3.5497899e-11, 2.7793128e-11, 3.0138373e-11, 1.1688318e-11, 4.4370122e-11, 3.9459771e-12, 2.8765617e-11, 5.9882147e-12, 1.1967093e-11, 1.1350186e-11, 2.7869714e-12, 3.1948409e-11, 1.1738559e-11, 3.4116584e-12, 1.1020503e-11, 1.8829537e-13, 1.7159998e-11, 2.3805913e-12, 8.3825892e-12, 7.3541897e-12, 1.4197737e-11, 6.3963733e-12, 1.9021833e-11, 1.0141939e-11, 3.5838587e-11, 1.2702378e-11, 6.4226057e-12, 1.1199794e-11, 1.5978428e-12, 1.847851e-11, 9.7903582e-12, 2.389328e-11, 1.1467788e-12, 1.2559545e-11, 8.4380551e-12, 5.9497553e-12, 8.2975561e-12, 1.7023279e-12, 6.496301e-12, 2.0455723e-12, 3.3916618e-11, 1.1009943e-11, 2.0572546e-11, 7.4501159e-12, 1.6909234e-11, 1.3017278e-12, 2.511242e-11, 1.2519307e-11, 1.3066964e-11, 9.6181802e-12, 2.9619282e-12, 8.4008185e-12, 6.7134964e-12, 6.4966344e-12, 3.0185057e-12, 9.5896135e-12, 5.3267356e-12, 2.0195844e-11, 5.2957235e-12, 1.6285881e-11, 4.8516622e-12, 1.6781518e-11, 4.7132751e-12, 1.7246921e-11, 3.1046836e-11, 3.3466221e-11, 4.5161096e-11, 2.7890166e-11, 4.8981358e-11, 1.9105087e-11, 3.9502787e-11, 4.4925449e-11, 1.3337403e-11, 2.8367462e-11, 3.8099576e-11, 3.391584e-11, 2.2406369e-11, 4.5648174e-11, 3.0683362e-11, 1.1119319e-11, 2.2178503e-11, 3.9817688e-11, 4.3980638e-11, 4.2083457e-11, 3.1904503e-11, 3.5951408e-11, 2.0441495e-11, 3.4121142e-11, 2.3310165e-11, 4.710474e-11, 6.8178703e-12, 1.8060793e-11, 4.0326774e-12, 2.5641959e-11, 9.9446403e-12, 1.5113203e-11, 3.1063176e-12, 1.5865162e-11, 2.2517079e-11, 1.3830149e-11, 1.5724997e-12, 1.6482735e-11, 6.9053487e-12, 2.8235633e-11, 5.6019536e-12, 9.9887685e-12, 1.6630682e-11, 1.2960591e-13, 3.5512682e-12, 1.0279659e-11, 1.9133098e-11, 1.8250644e-11, 2.2588773e-12, 2.7064401e-11, 1.0553543e-11, 1.6625013e-11, 2.5463223e-12, 1.8596112e-11, 4.1845142e-12, 1.1992991e-11, 2.5180225e-11, 1.9251144e-11, 7.6910983e-12, 2.1652188e-11, 2.3425098e-11, 6.2203049e-12, 9.2353648e-12, 5.592172e-12, 1.6659804e-11, 1.4916794e-11, 8.5797769e-12, 2.5034946e-11, 2.176701e-11, 1.3789356e-11, 1.8613452e-11, 6.2498719e-12, 3.7386743e-12, 1.1784355e-11, 5.3595261e-12, 1.5875055e-12, 2.5069737e-11, 1.8245976e-12, 1.5287716e-11, 1.2674923e-12, 1.5658749e-11, 4.4738488e-12, 1.0064131e-11, 2.1842484e-11, 1.1868499e-11, 3.7473221e-11, 5.8434918e-12, 1.7942524e-11, 5.2399241e-12, 2.1522137e-11, 2.8356569e-12, 1.2945806e-11, 7.3661946e-13, 2.1775121e-13, 2.5093969e-11, 2.5642182e-11, 5.9632939e-11, 9.0133341e-11, 1.6135389e-10, 2.3653087e-10, 3.4442833e-10, 5.2040302e-10, 7.5668623e-10, 1.0945064e-09, 1.5515373e-09, 2.1963396e-09, 3.1317283e-09, 4.3789956e-09, 6.1486076e-09, 8.5833479e-09, 1.19644e-08, 1.6609804e-08, 2.3053427e-08, 3.1830126e-08, 4.3877079e-08, 6.0203165e-08, 8.2486321e-08, 1.1266521e-07, 1.5346586e-07, 2.0842465e-07, 2.8222683e-07, 3.8105991e-07, 5.1301255e-07, 6.8860458e-07, 9.2150284e-07, 1.2294442e-06, 1.6352882e-06, 2.1683996e-06, 2.8662775e-06, 3.7768487e-06, 4.960847e-06, 6.4950875e-06, 8.4761234e-06, 1.1025082e-05, 1.4292922e-05, 1.8467174e-05, 2.3779574e-05, 3.0515209e-05, 3.9023052e-05, 4.9728285e-05, 6.3146081e-05, 7.9897671e-05, 0.00010072802, 0.00012652577, 0.00015834491, 0.0001974285, 0.00024523382, 0.00030345928, 0.00037407188, 0.00045933524, 0.00056183756, 0.00068451808, 0.00083069205, 0.0010040722, 0.0012087865, 0.0014493903, 0.0017308722, 0.0020586523, 0.0024385723, 0.0028768758, 0.0033801792, 0.0039554328, 0.0046098717, 0.0053509572, 0.0061863106, 0.0071236385, 0.0081706536, 0.0093349915, 0.010624125, 0.012045281, 0.013605355, 0.01531084, 0.01716775, 0.019181563, 0.021357164, 0.023698808, 0.026210085, 0.028893907, 0.031752493, 0.03478738, 0.037999428, 0.041388851, 0.044955238, 0.048697596, 0.052614388, 0.056703578, 0.060962683, 0.065388817, 0.069978743, 0.074728923, 0.079635565, 0.084694668, 0.08990207, 0.095253481, 0.10074453, 0.10637077, 0.11212778, 0.11801109, 0.12401628, 0.13013899, 0.13637492, 0.14271983, 0.1491696, 0.15572022, 0.16236776, 0.16910843, 0.17593856, 0.18285462, 0.18985317, 0.19693094, 0.20408476, 0.2113116, 0.21860854, 0.2259728, 0.23340171, 0.24089272, 0.24844338, 0.25605136, 0.26371444, 0.27143049, 0.27919747, 0.28701346, 0.2948766, 0.30278512, 0.31073734, 0.31873165, 0.32676651, 0.33484045, 0.34295207, 0.35110001, 0.35928299, 0.36749977, 0.37574917, 0.38403004, 0.39234128, 0.40068184, 0.4090507, 0.41744686, 0.42586937, 0.43431733, 0.44278987, 0.4512863, 0.45980599, 0.46834908, 0.47691568, 0.48550833, 0.49412819, 0.50277771, 0.51145706, 0.52012893, 0.52870413, 0.53745872, 0.54569641, 0.55388735, 0.56171361, 0.5703083, 0.57884008, 0.58839631, 0.5996874, 0.61464584, 0.63299906, 0.65300355, 0.66843974, 0.67260683, 0.67187109, 0.67378822, 0.67461145, 0.68013213, 0.68891798, 0.69906228, 0.71024186, 0.72634787, 0.72348441, 0.72350901, 0.72400258, 0.72931793, 0.73820286, 0.73928349, 0.74211056, 0.74537831, 0.74721972, 0.75008908, 0.75974998, 0.77083627, 0.77855188, 0.78093807, 0.77979187, 0.78006009, 0.78150724, 0.78188001, 0.78078482, 0.78972435, 0.80253125, 0.81073706, 0.81642665, 0.82116291, 0.82579555, 0.83115008, 0.83771477, 0.84467652, 0.85217798, 0.85965702, 0.86636392, 0.87269061, 0.87912294, 0.8857938, 0.89319124, 0.90139898, 0.90847588, 0.91591374, 0.92256061, 0.92905685, 0.93537009, 0.94484613, 0.95172695, 0.96261748, 0.96689615, 0.97052233, 0.96835432, 0.96371894, 0.95353748, 0.94646765, 0.93869513, 0.93300715, 0.92707869, 0.92303702, 0.91664736, 0.91744421, 0.91719413, 0.91974339, 0.92136019, 0.92451412, 0.92669603, 0.92989174, 0.93016046, 0.93012549, 0.93004485, 0.92979559, 0.92964667, 0.92934676, 0.92917201, 0.92833142, 0.92825144, 0.92832679, 0.92894541, 0.928823, 0.9286215, 0.92814636, 0.92772128, 0.92714753, 0.92684216, 0.92646554, 0.92618261, 0.92590351, 0.92572693, 0.92561247, 0.925564, 0.92557124, 0.92559663, 0.92590674, 0.92589498, 0.9258723, 0.92548199, 0.92527586, 0.92514624, 0.92517072, 0.92519455, 0.92517294, 0.92511427, 0.92507073, 0.92508099, 0.9251498, 0.92523651, 0.92531842, 0.92532105, 0.92534056, 0.92546288, 0.92567932, 0.92587718, 0.92603413, 0.92630519, 0.92622569, 0.92618911, 0.9260881, 0.92611963, 0.92617353, 0.92629568, 0.92638431, 0.92644902, 0.92639186, 0.92632513, 0.92625433, 0.92626243, 0.92623303, 0.92622917, 0.92625492, 0.92623275, 0.92630611, 0.92630213, 0.92631903, 0.92629826, 0.92631528, 0.92630902, 0.92627638, 0.92626638, 0.92621553, 0.92630114, 0.92641228, 0.92647963, 0.92653698, 0.92665872, 0.92689599, 0.92705079, 0.92742487, 0.92732687, 0.9273452, 0.9272198, 0.92721382, 0.92703998, 0.92694653, 0.92701832, 0.92741031, 0.92757705, 0.92722499, 0.9266838, 0.92646418, 0.9263108, 0.92630487, 0.92665255, 0.92756567, 0.92795025, 0.92775351, 0.92732948, 0.92723394, 0.92680679, 0.92634006, 0.92634952, 0.92671698, 0.92693975, 0.92722617, 0.92694944, 0.9269312, 0.92720149, 0.92852329, 0.93030914, 0.93027955, 0.92985191, 0.92960996, 0.92935124, 0.92847124, 0.92810666, 0.92809806, 0.92914492, 0.93069296, 0.93146786, 0.93042349, 0.93049376, 0.93052707, 0.93109751, 0.93098899, 0.93069666, 0.93047184, 0.9297293, 0.92802123, 0.92532139, 0.92149254, 0.91629255, 0.90932378, 0.90007065, 0.88787749, 0.87192529, 0.85120664, 0.82450355, 0.79038292, 0.747226, 0.69333741, 0.6272038, 0.5481055, 0.45723604, 0.35909776, 0.26221379, 0.1771453, 0.11142655, 0.066168553, 0.037697689, 0.020907893, 0.011417705, 0.0061818558, 0.0033325675, 0.0017925853, 0.00096317242, 0.00051724591, 0.00027770297, 0.00014907787, 8.0024386e-05, 4.2955751e-05, 2.3057529e-05, 1.2376637e-05, 6.6433276e-06, 3.5659077e-06, 1.9140184e-06, 1.0273475e-06, 5.5140358e-07, 2.9595236e-07, 1.5884068e-07, 8.5240279e-08, 4.5735953e-08, 2.4536113e-08, 1.3110006e-08, 7.0446593e-09, 3.7344034e-09, 2.0400243e-09, 1.0665481e-09, 5.4378742e-10, 2.7004349e-10, 1.5812854e-10, 7.4338287e-11, 3.3561209e-11, 2.8333919e-11, 8.868467e-13, 3.0858713e-12, 3.5963354e-12, 3.4917785e-12, 1.017121e-11, 2.2028983e-11, 4.0346086e-11, 1.7580209e-11, 4.2501933e-11, 1.4422969e-11, 1.8196895e-11, 4.8419165e-12, 1.6136947e-11, 1.9557134e-11, 1.3521138e-11, 2.5140272e-11, 2.0023977e-11, 3.3199034e-11, 4.6221473e-11, 6.582134e-11, 1.3640679e-11, 1.8451073e-11, 2.6909526e-12, 2.8481986e-11, 3.7241345e-11, 2.7911807e-11, 3.1812378e-11, 2.4314584e-11, 3.0230262e-11, 8.3786478e-12, 3.2504762e-12, 2.3156355e-11, 2.5427859e-11, 1.8178248e-11, 2.6479089e-11, 2.9286697e-11, 6.2549886e-12, 2.2235655e-11, 9.7529828e-12, 8.7256168e-12, 2.3332615e-11, 7.4472923e-12, 3.7661016e-11, 3.9459128e-11, 4.3172452e-11, 4.6146551e-11, 7.0674356e-11, 3.8188906e-11, 2.234998e-11, 1.691735e-11, 2.136912e-11, 1.0642604e-11, 2.3709996e-11, 1.7593085e-11, 4.2050074e-11, 5.7920745e-11, 2.3162904e-11, 2.0006773e-11, 4.6649913e-12, 2.0054834e-11, 3.429455e-11, 4.7810915e-12, 1.6627987e-11, 3.419521e-12, 3.9087851e-12, 2.5789369e-11, 8.5253827e-12, 4.5741865e-11, 3.9988016e-12, 4.2880647e-11, 4.4876219e-12, 5.7759137e-11, 1.0324161e-11, 4.5343838e-11, 1.571317e-11, 4.2209574e-11, 3.6910248e-11, 4.0849557e-11, 1.7327808e-11, 6.036085e-11, 3.0158338e-12, 6.5229405e-11, 2.2726917e-11, 1.035959e-10, 1.3112123e-11, 7.8468617e-11, 2.6461552e-11, 9.2848187e-11, 4.8677117e-11, 7.3172067e-11, 3.0248465e-11, 2.8176973e-11, 3.4641409e-13, 4.5031611e-12, 1.198919e-11, 5.4409543e-12, 2.3406093e-11, 3.6406222e-12, 5.9825856e-11, 5.5350777e-11, 6.1321841e-11, 7.566667e-11, 4.7177247e-11, 1.7426815e-11, 3.9422611e-11, 3.2878814e-12, 1.7982232e-12, 2.9966761e-11, 1.5093043e-12, 3.8254837e-11, 6.3659832e-12, 5.8671402e-11, 3.0131144e-11, 3.1009222e-11, 2.9751986e-11, 2.6061527e-12, 1.7776004e-11, 1.8748538e-11, 2.6435912e-11, 8.2280281e-13, 3.9124035e-11, 2.5456274e-11, 6.8715634e-12, 3.539384e-11, 5.4937877e-12, 4.8476439e-11, 3.7622612e-11, 1.7812965e-11, 3.2490666e-11, 1.3793518e-11, 3.0020593e-11, 1.0668244e-11, 3.3360087e-11, 6.4262532e-12, 3.2945411e-11, 5.8499693e-12, 1.1105896e-11, 1.2388216e-11, 1.3703169e-11, 1.0369113e-12, 5.5859132e-12, 1.8173365e-11, 1.6084224e-12, 2.9652202e-11, 1.3880982e-12, 3.0761038e-12, 2.2155628e-12, 1.2362909e-11, 8.4855356e-12, 2.2690733e-11, 1.6411326e-11, 1.5741251e-11, 3.9831626e-11, 9.5729495e-12, 1.8957319e-11, 7.9878359e-12, 7.3632694e-12, 1.4530301e-12, 2.3316964e-11, 1.4322851e-11, 1.6770726e-11, 2.1865821e-11, 3.0555143e-11, 2.9852991e-11, 1.0491763e-11, 3.8597699e-11, 1.0835291e-12, 5.5185839e-11, 7.7102384e-12, 4.2228443e-11, 2.6358549e-11, 7.4350274e-11, 3.3509153e-11, 7.2135821e-11, 3.9783121e-11, 7.1883087e-11, 6.8346466e-11, 1.0074878e-10, 4.945419e-11, 7.1265513e-11, 4.4255093e-11, 4.7498021e-11, 2.0786621e-11, 2.3789135e-11, 1.531259e-11, 4.4703844e-11, 2.086687e-11, 1.5181173e-11, 3.7472991e-11, 5.671046e-12, 1.4036486e-11, 2.6176185e-11, 3.2143364e-11, 2.0150622e-11, 1.6476923e-11, 5.9871808e-11, 4.4838036e-11, 8.377327e-11, 4.2277835e-11, 6.7988065e-11, 2.0570736e-11, 5.2125163e-11, 7.5326471e-12, 4.0375055e-11, 5.1529011e-11, 5.4923447e-12, 5.0088968e-11, 8.3812007e-12, 5.7186738e-11, 4.427485e-11, 4.3078328e-11, 4.2777533e-11, 6.7281806e-11, 2.7674279e-11, 6.5181123e-11, 2.0746774e-11, 4.5545405e-11, 1.2051347e-11, 4.6774892e-11, 3.5612056e-11, 1.0890677e-11, 3.2721868e-11, 2.6763013e-12, 2.1213284e-11, 2.694682e-11, 4.6181182e-11, 3.9528389e-11, 5.5938493e-11, 7.7387863e-11, 4.8343023e-11, 4.6970464e-11, 3.0434492e-11, 2.6478534e-11, 3.7708521e-11, 7.0224384e-11, 5.3415919e-11, 7.0918877e-11, 3.5120794e-11, 4.0638334e-11, 3.359029e-11, 1.6493795e-11, 1.6370813e-11, 1.2935419e-11, 8.2199256e-12, 5.8821577e-12, 2.9659417e-11, 1.4651276e-14, 3.7516168e-12, 2.661539e-12, 1.2588561e-11, 4.1916659e-11, 6.7540424e-11, 2.2157182e-11, 6.5171355e-11, 2.284557e-11, 5.3456321e-11, 6.3659832e-12, 2.8300288e-11, 3.3745682e-12, 3.498305e-11, 6.4931823e-14, 5.2362803e-12, 5.407445e-11, 7.3582746e-12, 3.4267578e-11, 1.3745568e-12, 4.2672865e-11, 1.9696543e-11, 4.5940767e-11, 3.1288928e-11, 1.7027012e-11, 1.6064467e-11, 2.6515051e-11, 1.1543436e-13, 2.1729409e-12, 2.676046e-11, 1.3155522e-11, 7.0774583e-12, 3.9662803e-12, 2.8672231e-11, 1.7701194e-11, 2.2506038e-11, 1.5213916e-11, 2.1611318e-20]; let data7 = [2.8477683e-20, 1.9817254e-11, 2.1635317e-10, 1.809108e-10, 3.3037479e-10, 3.1952347e-10, 8.4635997e-11, 6.7923694e-11, 8.1165126e-11, 3.8541257e-11, 2.1220779e-10, 8.8978506e-11, 1.5024543e-10, 1.0109516e-10, 1.1924985e-10, 1.5972819e-10, 1.3589799e-10, 5.5968904e-11, 5.9218579e-11, 1.4418632e-10, 6.8115023e-11, 1.4655948e-10, 2.5399996e-11, 2.3202602e-10, 1.9469538e-11, 2.6029821e-10, 2.6356826e-10, 2.0576201e-10, 2.9054878e-10, 9.7460678e-11, 5.1290831e-10, 2.0877626e-10, 4.8137136e-10, 2.3414674e-10, 4.9323768e-10, 1.7236458e-10, 2.7703685e-10, 2.1815489e-10, 2.2927159e-10, 2.9775453e-10, 3.7796739e-10, 4.2749079e-10, 3.3366027e-10, 3.1802514e-10, 2.4735136e-10, 3.6288265e-10, 3.0970653e-10, 3.5424183e-10, 2.1602941e-10, 2.4179075e-10, 2.952367e-10, 3.8359151e-10, 4.9834974e-10, 4.3116471e-10, 3.7808902e-10, 3.6538443e-10, 5.1141341e-10, 5.2062858e-10, 5.2599717e-10, 5.2491092e-10, 4.512288e-10, 4.7755334e-10, 3.6242088e-10, 3.3089726e-10, 3.088043e-10, 2.425945e-10, 3.1302036e-10, 1.9574006e-10, 3.6476364e-10, 1.7781339e-10, 3.4295644e-10, 1.4802614e-10, 2.1914047e-10, 1.0554173e-10, 2.5820686e-10, 1.8239021e-10, 2.0159706e-10, 2.0936174e-11, 2.02232e-10, 7.9556056e-11, 2.7654249e-10, 1.1959572e-10, 2.5486029e-10, 7.5607268e-12, 1.6671328e-10, 1.8532479e-10, 1.6790936e-10, 2.5386076e-10, 1.3592029e-10, 1.90552e-10, 1.312331e-10, 2.3270266e-10, 5.3277926e-11, 8.607033e-11, 5.2760181e-11, 2.2919825e-11, 1.2535519e-10, 1.6959737e-10, 1.049109e-10, 2.782024e-11, 6.1551883e-11, 4.8213281e-11, 1.0873528e-10, 8.0136791e-11, 1.4437715e-10, 1.7885345e-11, 2.2846276e-10, 2.3411295e-11, 3.2771467e-10, 1.1241968e-10, 3.5625737e-10, 8.5255682e-11, 2.3003975e-10, 7.3182836e-11, 8.2392924e-11, 8.2526453e-11, 2.8599207e-11, 3.3357279e-11, 3.2393904e-11, 6.0353097e-11, 1.6471975e-11, 2.7220928e-11, 6.7487991e-11, 3.4596827e-11, 1.4466908e-10, 1.0913542e-10, 3.886743e-11, 1.7155191e-10, 1.9649472e-10, 3.0039176e-10, 2.1706912e-10, 1.7937359e-10, 5.2531302e-12, 7.9055027e-12, 1.5239417e-10, 6.7756783e-11, 1.0415159e-10, 2.3479438e-10, 7.9120719e-11, 1.484773e-10, 7.5912829e-11, 1.993482e-11, 2.4164178e-10, 2.9148732e-11, 1.3744549e-11, 2.2941906e-10, 2.774089e-10, 2.1098422e-10, 1.3233328e-10, 1.5952605e-10, 1.9464789e-10, 4.7715155e-11, 1.5999093e-10, 7.649121e-11, 2.1009985e-10, 1.452682e-10, 2.0044788e-10, 7.6618975e-12, 3.6200604e-11, 1.8525448e-10, 9.7877338e-11, 2.8069348e-12, 2.0239038e-11, 1.9796622e-11, 1.3152776e-11, 1.9356596e-10, 2.6752626e-11, 2.3772909e-10, 1.430706e-11, 3.2829193e-10, 3.419622e-11, 4.3060049e-10, 1.0813806e-10, 3.7939735e-10, 9.8199581e-11, 3.2751842e-10, 6.5516255e-11, 6.6882809e-11, 1.0962431e-10, 2.4312811e-10, 3.511733e-10, 1.8942962e-10, 2.2945665e-10, 1.4616836e-10, 4.5135341e-11, 9.7068791e-11, 3.8640586e-11, 1.2930635e-10, 8.1348505e-11, 9.5416082e-11, 1.8570819e-10, 1.1855809e-10, 1.9283651e-10, 1.0581354e-10, 1.0844812e-10, 9.5097879e-11, 1.3290397e-10, 3.5893166e-10, 2.5249281e-11, 5.4991348e-10, 9.0886239e-11, 4.3684268e-10, 1.4355966e-10, 5.3188724e-10, 1.2617057e-10, 3.7926679e-10, 1.3789329e-10, 1.6742864e-10, 4.1086368e-11, 7.0177179e-11, 1.2346572e-11, 5.9132882e-14, 7.8648206e-13, 7.0490142e-12, 3.6924912e-12, 5.6042079e-11, 7.2597309e-11, 2.0615028e-10, 2.7642091e-10, 2.6228259e-10, 9.9983201e-11, 2.1552475e-12, 4.8360516e-11, 2.0368089e-11, 8.7008727e-11, 3.7743871e-11, 1.0942598e-10, 1.6518165e-10, 1.242478e-10, 1.4404817e-10, 1.6390056e-10, 3.4234109e-10, 1.440687e-10, 2.7340136e-10, 5.2112998e-11, 1.0796456e-10, 4.6046917e-11, 1.6697214e-10, 6.8456262e-12, 1.0125462e-10, 4.7842905e-11, 2.1396614e-10, 3.5911615e-11, 2.9679157e-10, 1.3415511e-10, 2.7936568e-10, 2.1178514e-10, 4.3080251e-10, 4.2927147e-10, 5.0658213e-10, 4.6356507e-10, 6.5276704e-10, 4.8260318e-10, 6.6818873e-10, 5.6053824e-10, 5.2016442e-10, 5.9334532e-10, 5.4408245e-10, 5.1616447e-10, 4.7639677e-10, 5.8710287e-10, 5.7388639e-10, 5.4723248e-10, 5.8585824e-10, 6.392226e-10, 7.1603609e-10, 6.2675589e-10, 7.8034298e-10, 6.5468454e-10, 7.7678248e-10, 5.9770753e-10, 7.3561387e-10, 5.091355e-10, 5.7069555e-10, 4.4704192e-10, 4.5896522e-10, 5.2184403e-10, 6.2306429e-10, 5.872771e-10, 6.9971574e-10, 6.8471009e-10, 6.7302519e-10, 4.6299314e-10, 6.3234335e-10, 4.7836513e-10, 7.4206463e-10, 5.6813867e-10, 8.0981043e-10, 6.6875664e-10, 7.3005264e-10, 7.0932665e-10, 6.8507835e-10, 6.2430738e-10, 6.9547164e-10, 6.5583485e-10, 5.1924179e-10, 7.0097115e-10, 5.2655282e-10, 6.563908e-10, 5.5960659e-10, 6.619308e-10, 4.9482656e-10, 5.3791057e-10, 4.4873093e-10, 4.3237599e-10, 3.2823616e-10, 4.3226711e-10, 2.2101743e-10, 2.6649277e-10, 1.6903861e-10, 2.1312479e-10, 1.7537258e-10, 1.7326172e-10, 5.3140063e-11, 1.7270464e-11, 2.6298704e-11, 1.2999494e-11, 1.1822559e-11, 1.4736385e-10, 1.4860663e-10, 1.1970659e-10, 4.6003957e-11, 1.29762e-10, 1.6484604e-10, 2.2191799e-10, 7.8584122e-11, 1.1429746e-10, 2.6841091e-11, 1.3831702e-10, 2.2084829e-10, 1.6325195e-10, 2.4149503e-10, 6.1705914e-11, 3.6353002e-10, 9.8185172e-11, 3.4585628e-10, 6.2212222e-12, 1.398224e-10, 6.0760331e-12, 1.6543115e-10, 4.8727664e-11, 3.6482602e-10, 2.8267297e-10, 4.6532468e-10, 1.9670647e-10, 4.4901017e-10, 1.2678165e-10, 4.1018904e-10, 1.8250552e-09, 4.1534681e-09, 9.4402826e-09, 1.9585692e-08, 4.0855308e-08, 8.2272735e-08, 1.637779e-07, 3.2005018e-07, 6.1731524e-07, 1.1731282e-06, 2.1975343e-06, 4.0552083e-06, 7.3716991e-06, 1.3194619e-05, 2.3245815e-05, 4.0291446e-05, 6.867536e-05, 0.00011505047, 0.00018933885, 0.00030591933, 0.00048498838, 0.00075396411, 0.0011487021, 0.0017141973, 0.0025043679, 0.0035805309, 0.0050081363, 0.006852056, 0.0091706344, 0.012009175, 0.01539368, 0.019325493, 0.023778893, 0.028706448, 0.03405052, 0.039752921, 0.045760023, 0.052024883, 0.058507644, 0.065175076, 0.071999732, 0.078959028, 0.086034375, 0.093210427, 0.10047445, 0.10781579, 0.11522552, 0.12269605, 0.1302209, 0.13779453, 0.1454121, 0.15306944, 0.16076286, 0.16848914, 0.1762454, 0.18402908, 0.19183791, 0.19966982, 0.20752299, 0.21539573, 0.22328651, 0.23119396, 0.23911681, 0.24705388, 0.25500412, 0.26296652, 0.27094019, 0.27892425, 0.28691792, 0.29492045, 0.30293117, 0.31094941, 0.31897457, 0.32700609, 0.33504346, 0.34308619, 0.35113386, 0.35918609, 0.36724252, 0.37530278, 0.3833665, 0.39143312, 0.39950231, 0.40757347, 0.41564732, 0.42372248, 0.43180034, 0.43987062, 0.44793718, 0.45597733, 0.46403705, 0.4720927, 0.48028065, 0.4885131, 0.49695726, 0.5053638, 0.51370983, 0.52166575, 0.52911717, 0.53630063, 0.54350976, 0.55065175, 0.5576987, 0.56515963, 0.57414881, 0.58581203, 0.60106133, 0.61920826, 0.63441176, 0.64444496, 0.65045212, 0.6552307, 0.6599221, 0.6650715, 0.67001146, 0.67061167, 0.67113711, 0.67315375, 0.67797767, 0.68199324, 0.68571826, 0.69335833, 0.70237947, 0.70950038, 0.71685984, 0.7241968, 0.73129851, 0.73900574, 0.75115207, 0.75963027, 0.76905855, 0.78322163, 0.79159857, 0.79245248, 0.79107474, 0.78888644, 0.78973313, 0.79291809, 0.80155304, 0.81233827, 0.82142127, 0.82650645, 0.82950388, 0.83326463, 0.83366361, 0.83176001, 0.83146794, 0.83202915, 0.83384987, 0.83933199, 0.84790874, 0.85610776, 0.86331973, 0.86895249, 0.87437673, 0.87886068, 0.88107721, 0.88256128, 0.88637201, 0.8903003, 0.89170068, 0.8913573, 0.88855065, 0.88565698, 0.88533144, 0.88606156, 0.88671645, 0.88791243, 0.88913495, 0.8891744, 0.88764162, 0.88782382, 0.88955391, 0.89185602, 0.89196857, 0.89173273, 0.89275971, 0.89683466, 0.90014227, 0.90019847, 0.89987414, 0.89742712, 0.89417066, 0.89250583, 0.89142793, 0.89044687, 0.89000899, 0.89008642, 0.8905574, 0.89235167, 0.89543507, 0.89656239, 0.89636287, 0.89559705, 0.89308331, 0.89015943, 0.88955618, 0.88997233, 0.8915667, 0.89541263, 0.89933524, 0.90012366, 0.89982421, 0.89974462, 0.89953149, 0.89852051, 0.89717144, 0.8962689, 0.89562133, 0.89390928, 0.88979206, 0.88653296, 0.88673392, 0.88801113, 0.8919161, 0.89805037, 0.90365521, 0.90506388, 0.90454156, 0.90286096, 0.89988196, 0.89693817, 0.89508255, 0.89482766, 0.89446222, 0.8935049, 0.89149568, 0.89126409, 0.89133746, 0.89155296, 0.891861, 0.89210393, 0.89241619, 0.89270213, 0.89185516, 0.8909092, 0.89204971, 0.89389175, 0.89439182, 0.89561993, 0.89863491, 0.89857581, 0.89790874, 0.89807274, 0.8975778, 0.89576727, 0.89454615, 0.89394598, 0.89344243, 0.89313787, 0.89326778, 0.89456251, 0.89627034, 0.89716934, 0.89706067, 0.89644184, 0.8951939, 0.89524545, 0.8955355, 0.89648327, 0.89645648, 0.89620751, 0.89535335, 0.89266434, 0.89107604, 0.89119897, 0.89146252, 0.89201422, 0.89367523, 0.89515785, 0.89514318, 0.89468989, 0.8936907, 0.89203612, 0.89111186, 0.89147443, 0.89267491, 0.89616509, 0.89965218, 0.90041286, 0.90012019, 0.89926374, 0.89733478, 0.89248269, 0.88868208, 0.88865755, 0.88955456, 0.8911347, 0.89408624, 0.89764004, 0.8976562, 0.89715549, 0.8955327, 0.890238, 0.88822536, 0.88957124, 0.89035779, 0.89214842, 0.89442469, 0.90050315, 0.90013322, 0.89675555, 0.88715024, 0.87840912, 0.86407897, 0.85519389, 0.86034735, 0.87677547, 0.89883519, 0.91619161, 0.914784, 0.91060943, 0.90052024, 0.88406818, 0.85282057, 0.8092647, 0.77598062, 0.76502665, 0.74142894, 0.63055733, 0.2403422, 0.024533632, 0.0019871171, 0.00015601923, 1.2184269e-05, 9.5273907e-07, 7.4937229e-08, 5.953439e-09, 4.8536166e-10, 3.6191332e-10, 3.4116245e-10, 3.3277232e-10, 2.2153077e-10, 3.2855396e-10, 8.620493e-11, 8.181629e-11, 3.5578282e-10, 2.3914764e-11, 4.8847353e-10, 2.7332507e-10, 4.7721934e-10, 3.6431553e-10, 2.2384307e-10, 3.9855979e-10, 3.8645977e-10, 3.5036318e-10, 1.726803e-10, 2.9928474e-10, 1.9461675e-10, 3.7171756e-10, 1.7373108e-10, 3.7679966e-10, 4.8863157e-10, 3.8452728e-10, 4.2056852e-10, 3.3878678e-10, 3.6588632e-10, 3.3653803e-10, 1.6154007e-10, 3.2305978e-10, 2.7894117e-10, 6.7424967e-11, 1.0233268e-11, 4.5023441e-11, 8.146e-11, 1.1299926e-10, 7.1518314e-11, 5.3754675e-11, 7.0855331e-11, 1.2622738e-11, 7.8869489e-13, 1.4741204e-10, 5.0156919e-11, 9.4527367e-11, 3.6979398e-11, 1.6238011e-10, 3.9140888e-10, 9.6569923e-11, 4.8952982e-11, 1.125599e-10, 6.9977177e-11, 9.3216288e-11, 8.5504999e-12, 1.6346375e-10, 3.3393236e-10, 1.215359e-10, 1.2327146e-11, 3.1730176e-11, 3.9845058e-12, 1.4821947e-10, 5.8621841e-11, 4.0178273e-11, 8.2939545e-11, 1.962649e-10, 2.6365975e-10, 4.681282e-10, 3.1397343e-10, 1.725423e-10, 3.385972e-10, 1.1452388e-10, 1.2711137e-10, 1.0347447e-10, 9.8208115e-11, 3.625952e-11, 4.4265293e-11, 1.0968569e-10, 1.833644e-10, 1.8868279e-11, 6.4592718e-11, 1.77071e-10, 5.7097743e-11, 7.5745921e-11, 2.433641e-10, 2.6176833e-10, 1.9938034e-10, 7.8585294e-11, 1.7420073e-10, 1.5080546e-10, 7.284895e-11, 1.3081094e-10, 8.2025894e-11, 4.0778175e-12, 2.7453699e-10, 8.3939684e-11, 8.6642635e-11, 4.5338077e-11, 7.5067079e-12, 1.7119446e-10, 4.3341007e-11, 2.2271518e-11, 8.4149852e-11, 2.1526762e-10, 1.1833779e-10, 3.1246775e-10, 1.4383031e-10, 1.5289642e-10, 2.8087521e-11, 2.2263925e-11, 2.8324233e-10, 2.1168632e-10, 2.0249857e-10, 2.7185546e-10, 2.6738573e-10, 2.8651923e-10, 2.1367628e-10, 2.4703077e-11, 3.8862975e-10, 2.8921211e-10, 1.4230467e-10, 4.1436828e-11, 3.7256349e-11, 3.0538214e-10, 4.5553487e-11, 1.5740043e-10, 2.8861295e-10, 3.3890142e-10, 4.2071341e-11, 2.2142564e-10, 1.0395009e-10, 4.7673354e-10, 1.4339627e-10, 5.8287293e-10, 3.3438255e-11, 5.5037913e-10, 3.3458078e-11, 3.7407164e-10, 3.854368e-10, 2.4011775e-10, 4.5061275e-10, 5.4182422e-10, 3.8275743e-10, 2.9087651e-10, 1.220687e-10, 3.0405937e-10, 7.2546675e-11, 3.2877402e-11, 1.3158057e-10, 3.4092286e-10, 2.2212738e-10, 3.3963692e-10, 2.106994e-10, 4.455069e-10, 2.6300736e-10, 1.3576514e-10, 1.1298729e-10, 3.8279119e-10, 1.8344209e-11, 1.172805e-10, 3.006375e-11, 1.700625e-10, 1.9673638e-10, 1.2044465e-10, 2.5815689e-10, 4.2112812e-10, 5.1276697e-11, 6.7210226e-11, 5.7983457e-11, 1.089576e-10, 3.2672554e-11, 2.7578965e-10, 1.468722e-10, 2.9628548e-10, 3.9326858e-10, 4.8068342e-10, 3.7565781e-10, 3.241546e-10, 2.2195177e-10, 4.566839e-10, 4.1441796e-10, 2.0261894e-10, 3.0922788e-10, 1.225869e-10, 3.1332938e-11, 1.8846258e-10, 4.1431616e-10, 2.4652404e-10, 3.3884929e-10, 4.3479405e-10, 3.2627362e-10, 2.5278098e-10, 3.3640669e-10, 3.5546187e-10, 3.7988848e-10, 5.767901e-11, 7.0454888e-11, 4.3509946e-10, 2.1841129e-10, 4.475982e-10, 2.8222015e-10, 5.4257885e-10, 2.8392429e-10, 6.8963281e-10, 3.1406001e-10, 2.7907842e-10, 2.3343131e-10, 3.4284524e-10, 3.6977625e-10, 2.5203559e-10, 1.8537896e-10, 2.9391517e-10, 7.8858797e-11, 1.3702003e-10, 2.4885264e-10, 2.4011127e-10, 4.10332e-10, 4.5736337e-10, 5.3042462e-10, 6.7751041e-11, 3.1341871e-10, 8.3023325e-11, 1.8255445e-10, 3.4044546e-10, 4.3011966e-11, 2.6184625e-10, 5.8955461e-11, 4.8949175e-10, 2.2769705e-10, 2.7286237e-10, 1.112853e-10, 1.7151728e-10, 8.9115615e-11, 4.1614266e-11, 2.5054228e-10, 1.8822545e-10, 6.7626191e-11, 2.1285241e-11, 5.7091015e-11, 4.433511e-10, 3.1274912e-10, 2.2601838e-10, 6.2294587e-11, 3.1449292e-11, 4.4388366e-10, 1.0949398e-10, 2.5631037e-10, 6.2711095e-11, 5.8124669e-10, 4.1696024e-10, 6.5950828e-10, 1.6011349e-10, 3.2415787e-10, 9.7031873e-11, 1.6982715e-10, 6.3710753e-11, 2.1660822e-10, 5.5002667e-11, 4.6249485e-10, 3.5534175e-10, 4.0977061e-10, 1.1044674e-10, 4.1232996e-10, 1.7613872e-10, 4.7531882e-10, 1.4800221e-10, 5.4628135e-10, 8.7973527e-11, 3.8900734e-10, 4.1719918e-11, 3.5080572e-10, 6.1888695e-12, 5.6905546e-11, 1.0672898e-10, 6.678153e-11, 2.1756497e-10, 9.6035733e-12, 4.9392453e-11, 9.1473808e-11, 4.521796e-11, 1.0588006e-10, 7.3530424e-11, 1.4769092e-10, 1.8944487e-11, 7.2548502e-11, 4.0307835e-10, 2.1403273e-10, 3.4677373e-10, 3.4571903e-10, 2.6744556e-10, 2.3754971e-11, 8.9804591e-12, 1.1953095e-11, 1.2903551e-10, 4.1469275e-11, 1.7462034e-11, 2.2420991e-10, 3.2052671e-11, 1.9999565e-10, 3.9288371e-11, 3.8543651e-12, 3.3792944e-11, 6.5628575e-11, 1.7551484e-10, 1.7002088e-10, 2.8506586e-10, 2.4517918e-10, 3.7002737e-11, 6.9367117e-11, 3.875388e-11, 1.3229345e-11, 1.3489459e-11, 1.9190398e-10, 1.0360143e-11, 1.2232169e-11, 7.9270097e-12, 1.782311e-10, 6.749101e-11, 1.1641828e-10, 1.5052055e-10, 1.0297067e-10, 4.3455144e-12, 1.311254e-10, 2.2328563e-18]; let data6 = [2.4736089e-21, 3.557215e-11, 1.4491517e-11, 3.1926845e-12, 9.8094767e-12, 6.4086002e-12, 1.0635131e-11, 1.7253035e-11, 7.2617091e-13, 7.0434024e-12, 9.7921366e-12, 5.3706415e-12, 2.0734942e-11, 1.8722161e-11, 1.6536423e-12, 2.9744887e-12, 6.7616262e-12, 4.6114578e-12, 1.6889115e-11, 1.3241588e-11, 6.2568747e-12, 5.2398129e-12, 2.3631512e-11, 1.5845265e-11, 3.2267866e-11, 3.7653514e-12, 2.8384247e-11, 5.9523119e-12, 4.0711368e-12, 3.092868e-12, 1.645528e-12, 1.4564101e-11, 1.4103256e-11, 1.1685094e-11, 2.1664859e-11, 3.3110082e-11, 5.1585703e-11, 3.3429429e-11, 6.1477878e-11, 2.8549978e-11, 6.3940724e-11, 4.2923005e-11, 6.7488102e-11, 4.6114911e-11, 7.38638e-11, 6.2954229e-11, 5.8148252e-11, 5.1998196e-11, 6.2571525e-11, 6.3686069e-11, 6.6297973e-11, 5.5396516e-11, 3.8656236e-11, 3.7013154e-11, 2.5425876e-11, 5.928347e-11, 1.4655137e-11, 1.3775906e-11, 7.3402954e-12, 1.9464115e-11, 1.3586944e-11, 3.222585e-12, 3.1207677e-12, 7.4854629e-12, 1.5714993e-12, 1.0029451e-12, 1.8254646e-11, 1.6622901e-11, 2.7060288e-11, 2.7576044e-11, 2.2113367e-11, 3.7476556e-11, 2.8651462e-11, 1.0359023e-11, 1.8422378e-11, 2.0315446e-11, 1.144978e-11, 1.2722942e-11, 1.2541982e-11, 1.7565045e-11, 1.1307058e-11, 1.0880448e-11, 3.1376187e-11, 1.5549373e-11, 2.7908618e-11, 1.3636074e-11, 2.6978256e-11, 2.4016439e-11, 3.3378853e-11, 6.3285692e-12, 9.4646761e-12, 1.1684983e-11, 8.3919261e-12, 7.3647494e-12, 4.2612106e-12, 4.1272697e-12, 5.051073e-12, 6.0162256e-12, 5.2336994e-12, 9.1067593e-12, 8.3596914e-12, 2.3193786e-11, 2.4675139e-12, 1.96822e-11, 7.0787494e-12, 1.5689872e-11, 1.3103645e-11, 1.2901678e-11, 5.1338829e-12, 3.0584879e-11, 2.4636347e-11, 4.084931e-11, 1.8863771e-11, 1.7808806e-11, 1.0670256e-11, 2.2720714e-11, 6.5158642e-12, 1.4889783e-11, 1.3300166e-11, 2.1428323e-11, 5.7082171e-12, 1.5145549e-11, 2.9703648e-11, 3.2818747e-11, 5.7270022e-11, 3.4523965e-11, 3.5275701e-11, 3.0865322e-12, 1.1147552e-11, 1.3170782e-11, 2.0258313e-11, 8.1201539e-12, 1.8948693e-11, 4.3070062e-12, 2.0004436e-12, 2.087144e-12, 1.278541e-11, 1.4894674e-12, 7.7514551e-12, 7.6359658e-12, 4.8564418e-12, 1.2659361e-12, 2.5807135e-11, 1.9168779e-11, 2.2039671e-12, 9.3736407e-13, 3.4295543e-12, 8.5977838e-13, 2.1398089e-11, 4.11093e-12, 2.9779344e-12, 9.9719843e-12, 1.2265875e-12, 2.3258256e-11, 2.7452885e-12, 3.5525243e-11, 4.9341387e-13, 2.516055e-11, 3.9548695e-13, 2.2922348e-11, 1.2079136e-12, 1.486344e-11, 2.8566095e-11, 1.1704213e-11, 1.3646523e-11, 3.290667e-11, 1.1824593e-11, 1.9435993e-11, 1.4976484e-11, 6.4421688e-12, 3.1013157e-12, 1.4837763e-11, 2.4438825e-11, 1.8236083e-11, 1.5704544e-11, 1.0533647e-11, 7.9248558e-12, 8.2939992e-12, 1.8438273e-11, 2.6298214e-11, 3.3018713e-11, 4.3504675e-12, 1.2537536e-11, 1.660645e-12, 1.8246976e-11, 9.6453018e-12, 2.9774898e-12, 4.012225e-12, 1.3658638e-11, 4.5602156e-12, 8.7537333e-12, 1.76214e-11, 1.7859048e-11, 1.0328901e-11, 1.946067e-11, 1.7977872e-11, 1.3260373e-11, 8.0306747e-12, 3.7705756e-12, 1.5674755e-11, 2.0868439e-11, 1.0141161e-11, 9.1175413e-12, 2.7824474e-11, 1.8477955e-11, 3.1111084e-11, 1.8002659e-11, 4.4133253e-11, 2.1554261e-11, 3.4529856e-11, 1.7164445e-12, 4.1950516e-11, 1.9599501e-11, 5.5902602e-11, 2.3968198e-11, 5.3617381e-11, 3.4065898e-11, 5.772631e-11, 4.3247909e-11, 2.910964e-11, 3.540753e-11, 2.7571931e-11, 1.1315284e-11, 1.8592999e-11, 2.5544255e-11, 1.6387143e-11, 1.5040508e-11, 2.2639905e-11, 5.4360002e-12, 8.6666995e-12, 5.6874312e-12, 1.5383751e-13, 8.4142681e-12, 2.35447e-12, 1.4626348e-11, 3.7153319e-12, 1.3556488e-11, 3.5347063e-14, 1.3290495e-11, 1.0186957e-11, 6.1501665e-12, 8.5577683e-13, 1.3072633e-11, 1.0210744e-11, 2.2636236e-11, 2.474839e-11, 2.8420038e-11, 4.5050942e-11, 2.2227633e-11, 3.1792015e-11, 3.6332556e-11, 3.8697586e-11, 4.2348893e-11, 3.2118253e-11, 2.8153046e-11, 2.4457277e-11, 1.9662081e-11, 2.1734997e-11, 6.8804476e-14, 1.1115651e-11, 4.9918277e-12, 1.8982929e-12, 1.1247702e-11, 2.0770401e-11, 3.5807463e-11, 8.5853346e-12, 2.4645239e-11, 2.9784902e-12, 3.769364e-11, 1.2267098e-11, 3.746344e-11, 1.1964203e-11, 3.5184555e-11, 1.8121038e-11, 3.9607495e-11, 3.9379517e-11, 3.7426425e-11, 3.3673968e-11, 4.049684e-12, 2.1577381e-11, 1.3780908e-11, 2.3483121e-11, 2.7510908e-11, 1.4425381e-11, 3.1311828e-11, 3.6918784e-11, 1.8378583e-11, 2.2417929e-11, 9.0246163e-12, 6.4247186e-14, 9.9341918e-12, 7.702325e-12, 4.1842474e-11, 6.886208e-11, 9.5465635e-11, 1.6657403e-10, 2.5517066e-10, 3.8494351e-10, 5.6399439e-10, 8.0096699e-10, 1.1594728e-09, 1.6400004e-09, 2.3573629e-09, 3.2925991e-09, 4.651614e-09, 6.4904372e-09, 9.0606513e-09, 1.2616985e-08, 1.750877e-08, 2.4246208e-08, 3.3509402e-08, 4.6136119e-08, 6.3343107e-08, 8.6727815e-08, 1.1841186e-07, 1.6118977e-07, 2.1885078e-07, 2.9625965e-07, 3.9988425e-07, 5.3816045e-07, 7.2207441e-07, 9.6595904e-07, 1.2882465e-06, 1.7128436e-06, 2.2702853e-06, 2.9998008e-06, 3.9511764e-06, 5.1876766e-06, 6.7891422e-06, 8.8560828e-06, 1.1514183e-05, 1.4920328e-05, 1.9269039e-05, 2.4800646e-05, 3.1810529e-05, 4.0660049e-05, 5.1789098e-05, 6.5730358e-05, 8.3125583e-05, 0.00010474378, 0.00013150143, 0.00016448458, 0.00020497294, 0.00025446541, 0.00031470709, 0.00038771704, 0.00047581629, 0.00058165571, 0.00070824225, 0.00085896345, 0.0010376082, 0.0012483837, 0.0014959262, 0.0017853056, 0.0021220223, 0.0025119947, 0.0029615384, 0.0034773344, 0.0040663876, 0.0047359764, 0.0054935914, 0.0063468671, 0.007303506, 0.0083711979, 0.0095575358, 0.01086993, 0.012315523, 0.013901112, 0.015633065, 0.017517262, 0.019559027, 0.021763082, 0.024133505, 0.026673708, 0.029386413, 0.032273654, 0.035336779, 0.038576467, 0.04199275, 0.045585049, 0.049352209, 0.053292541, 0.05740387, 0.061683583, 0.066128679, 0.070735817, 0.075501368, 0.08042146, 0.085492024, 0.090708839, 0.096067568, 0.1015638, 0.10719306, 0.11295089, 0.11883282, 0.12483441, 0.13095128, 0.13717913, 0.14351373, 0.14995096, 0.15648679, 0.16311732, 0.16983875, 0.17664742, 0.1835398, 0.19051247, 0.19756214, 0.20468567, 0.21188001, 0.21914228, 0.22646967, 0.23385953, 0.24130932, 0.2488166, 0.25637904, 0.26399444, 0.27166068, 0.27937575, 0.28713777, 0.29494488, 0.30279546, 0.31068767, 0.31862067, 0.32659107, 0.33460296, 0.34264136, 0.3507378, 0.35882029, 0.36702912, 0.37510944, 0.38346982, 0.39151817, 0.40002843, 0.40807226, 0.41671242, 0.42477037, 0.43354705, 0.44164824, 0.4504208, 0.45880128, 0.46731437, 0.47564069, 0.48422064, 0.49218235, 0.50114621, 0.50900396, 0.518143, 0.52591298, 0.5352627, 0.54287413, 0.55237234, 0.55994548, 0.56971587, 0.57701518, 0.58720775, 0.59417315, 0.60464393, 0.61157174, 0.62223854, 0.62896741, 0.63994151, 0.6463752, 0.65756992, 0.66373256, 0.67507394, 0.68084696, 0.69222455, 0.69760447, 0.70898071, 0.71394469, 0.7252862, 0.72979015, 0.74095639, 0.74500105, 0.75577082, 0.75958339, 0.77002512, 0.77383606, 0.78382725, 0.78789691, 0.79706106, 0.80153898, 0.80944065, 0.81447886, 0.82092838, 0.82676051, 0.83227023, 0.84016694, 0.84345249, 0.85416931, 0.85538181, 0.86689314, 0.87031671, 0.88113769, 0.88503948, 0.89266435, 0.89726632, 0.90207678, 0.90609692, 0.90963674, 0.91258655, 0.91502049, 0.91694533, 0.9185455, 0.91993565, 0.92127913, 0.92250348, 0.9236348, 0.92449581, 0.92534573, 0.92593932, 0.926508, 0.92681627, 0.92684728, 0.92684988, 0.92681491, 0.92675624, 0.92662322, 0.92641057, 0.92621132, 0.92590999, 0.92573187, 0.92555097, 0.92539485, 0.92529249, 0.9251848, 0.92514504, 0.92503605, 0.9249758, 0.92487104, 0.92480741, 0.92477195, 0.92475021, 0.92474446, 0.92473058, 0.92466689, 0.92464599, 0.92459863, 0.92455818, 0.92454052, 0.9245201, 0.92451419, 0.92451885, 0.92448997, 0.92448865, 0.92451428, 0.92451891, 0.9246874, 0.92476524, 0.92500648, 0.92509177, 0.92524675, 0.92532686, 0.92542361, 0.92548585, 0.9255706, 0.92561766, 0.92567513, 0.92568916, 0.92568702, 0.92568594, 0.92568644, 0.92568731, 0.92568733, 0.92568538, 0.92568545, 0.92568528, 0.92568663, 0.9256866, 0.92568528, 0.92568502, 0.92567256, 0.92566365, 0.92565065, 0.92563364, 0.92563023, 0.92560237, 0.92558626, 0.92558102, 0.92556718, 0.92556095, 0.92553352, 0.92552234, 0.92551443, 0.92551346, 0.92553188, 0.92554215, 0.92553593, 0.92551216, 0.9254981, 0.92548397, 0.92545191, 0.9254438, 0.92546047, 0.92545948, 0.92545321, 0.92546942, 0.92546893, 0.92548178, 0.9254962, 0.92550577, 0.92551064, 0.92551861, 0.92551255, 0.92551154, 0.92550125, 0.9254909, 0.92547777, 0.92546059, 0.9254376, 0.92542317, 0.92541357, 0.92540004, 0.92539003, 0.92539268, 0.92539484, 0.92539319, 0.92538687, 0.92537376, 0.92536217, 0.92533494, 0.92532182, 0.92530103, 0.92529295, 0.92528055, 0.9252808, 0.92528141, 0.92527479, 0.92526564, 0.92523915, 0.92522498, 0.92519033, 0.92516932, 0.92514302, 0.92513574, 0.92510167, 0.92508319, 0.92504168, 0.92502395, 0.92498993, 0.92496413, 0.92494274, 0.92494213, 0.92495041, 0.9249836, 0.92499667, 0.92499782, 0.92498454, 0.92497894, 0.92492624, 0.92489385, 0.92487897, 0.92509758, 0.92504302, 0.92491965, 0.92467987, 0.92444044, 0.92344321, 0.92290962, 0.92093694, 0.92008582, 0.9162359, 0.91463478, 0.90802769, 0.90425492, 0.89399229, 0.88607405, 0.86898745, 0.85620349, 0.82452756, 0.80408067, 0.75438196, 0.71474921, 0.64709112, 0.57709269, 0.48776217, 0.39181642, 0.29379284, 0.20417154, 0.13180417, 0.079941381, 0.046261304, 0.025928858, 0.014247258, 0.0077397344, 0.0041786383, 0.0022487831, 0.0012082535, 0.00064867088, 0.00034811725, 0.00018678768, 0.00010021515, 5.3764932e-05, 2.884384e-05, 1.5473854e-05, 8.3011042e-06, 4.4531444e-06, 2.3888279e-06, 1.2814482e-06, 6.8740462e-07, 3.6877249e-07, 1.9781662e-07, 1.0612857e-07, 5.6907018e-08, 3.0530822e-08, 1.6362161e-08, 8.775146e-09, 4.6521183e-09, 2.5235309e-09, 1.3190337e-09, 7.1714996e-10, 3.3889165e-10, 1.8756574e-10, 7.8574173e-11, 2.5481803e-11, 6.9994292e-12, 1.247901e-11, 4.1408415e-11, 4.7442414e-12, 4.0464184e-11, 1.6622659e-11, 2.5161139e-11, 2.3042919e-11, 2.7545969e-11, 2.1857719e-11, 1.0317612e-11, 3.6101653e-11, 8.1525515e-13, 1.4730091e-12, 4.1200966e-11, 2.1666919e-11, 2.549046e-11, 1.2807665e-11, 1.5924281e-11, 1.1008553e-11, 3.9694991e-11, 2.012476e-11, 2.4571647e-11, 6.2012669e-13, 3.3875435e-11, 1.7536811e-11, 3.5456885e-11, 9.438868e-12, 1.5482856e-11, 1.2117833e-11, 1.2255133e-11, 3.2043691e-11, 4.9047395e-12, 5.9504194e-13, 2.3257249e-11, 9.3155531e-12, 4.0251407e-11, 1.6236398e-11, 2.031778e-11, 5.1861107e-12, 4.9291028e-11, 8.2434564e-12, 9.2215406e-12, 2.4410372e-11, 1.5256538e-11, 5.7015363e-11, 3.3725704e-12, 5.4832432e-11, 5.1818707e-11, 4.5330519e-11, 3.5841038e-11, 3.9551697e-11, 4.6543135e-11, 6.3229727e-11, 4.3508543e-11, 3.6803361e-11, 2.5596571e-11, 5.6237735e-11, 2.0785067e-11, 5.3363974e-11, 4.6250331e-12, 5.7681996e-11, 1.4312085e-11, 3.4661054e-11, 1.451132e-11, 4.1207626e-11, 2.0039405e-11, 5.1141307e-11, 5.7767129e-11, 6.5028949e-11, 6.081504e-11, 6.6510061e-11, 6.9528559e-11, 5.3917837e-11, 3.3359199e-11, 3.1915825e-11, 2.4460763e-11, 2.6618498e-11, 1.9054772e-11, 2.2080929e-11, 2.1238369e-11, 4.8883122e-12, 2.9346301e-11, 3.8926909e-12, 1.8546972e-11, 3.352447e-11, 7.7369881e-12, 2.0904608e-11, 5.2964393e-11, 3.7098162e-11, 3.698628e-11, 5.4720328e-12, 1.7230799e-12, 1.4661718e-11, 3.0158781e-11, 8.727504e-13, 7.4551729e-12, 9.6010311e-12, 9.7009263e-12, 4.6964914e-11, 1.7044439e-11, 3.1317343e-11, 4.2369517e-11, 3.8669623e-11, 1.3587734e-11, 4.0327661e-11, 2.2638121e-11, 2.0275824e-11, 2.1832634e-12, 2.6967021e-11, 3.5043653e-11, 8.9498259e-12, 1.7058757e-11, 3.7238681e-12, 4.9141296e-11, 1.4965288e-11, 6.4129671e-11, 9.1424014e-12, 5.4471811e-11, 1.130724e-11, 1.602795e-11, 3.6961417e-11, 5.9972591e-12, 2.417473e-11, 3.6010304e-11, 2.7460281e-11, 1.8913365e-11, 2.2333219e-12, 9.1835805e-12, 1.0674682e-11, 2.0343309e-11, 1.0621071e-11, 2.5540186e-11, 1.0256232e-11, 4.1173994e-11, 4.7592922e-11, 3.8839778e-11, 5.586668e-11, 4.5768393e-11, 5.4112521e-11, 1.3272288e-11, 1.3262631e-11, 2.1268781e-12, 2.0194243e-11, 4.7091671e-12, 3.7831725e-11, 1.5198377e-11, 9.3552891e-12, 3.8123752e-11, 9.7382204e-12, 2.1738621e-11, 1.7108705e-12, 5.4503888e-12, 3.0085081e-12, 2.2196696e-12, 1.3662545e-11, 1.8426765e-11, 6.4032773e-12, 2.0263392e-11, 3.1608037e-11, 4.4126672e-11, 2.1159896e-11, 3.9597982e-11, 1.1844232e-11, 1.6582368e-11, 9.2536177e-13, 2.2899403e-11, 6.6586758e-12, 1.3248202e-11, 1.8486591e-11, 4.3278784e-11, 3.2563479e-11, 1.3640346e-11, 1.2093747e-11, 3.9193296e-12, 1.6752745e-11, 6.6797648e-12, 1.0561134e-11, 1.7613841e-11, 6.0695166e-12, 3.1665977e-11, 1.3746124e-11, 2.4588629e-12, 2.1681015e-11, 1.1307129e-11, 5.1117999e-11, 1.8270707e-11, 3.9627285e-12, 8.1229163e-12, 3.1189482e-14, 8.6509177e-13, 2.0935576e-11, 1.1765536e-11, 3.1098461e-11, 5.3431792e-11, 4.5414209e-11, 3.6909915e-11, 5.9130031e-11, 3.0514297e-11, 5.9756929e-11, 5.2456704e-11, 3.5227349e-11, 4.0291587e-11, 1.2385774e-11, 1.3110236e-11, 1.0282982e-11, 3.7945717e-12, 1.1037634e-11, 9.5456448e-12, 1.2120386e-11, 3.4301765e-11, 2.9848773e-11, 2.483648e-11, 1.5567101e-11, 1.8956764e-11, 3.6095881e-11, 5.7025684e-12, 1.6939771e-11, 3.0161445e-11, 6.3281338e-12, 1.0585664e-11, 1.3458537e-11, 1.4699567e-11, 2.6314706e-11, 7.8859428e-12, 2.2798398e-11, 1.1018876e-11, 1.6363931e-11, 6.347669e-12, 1.6589916e-11, 2.0036741e-12, 1.6865848e-11, 5.4995594e-12, 5.0944292e-12, 1.3116007e-11, 2.4353432e-11, 3.5570433e-12, 6.7930902e-12, 2.3220066e-12, 9.9536609e-12, 1.8856536e-11, 8.7824461e-12, 7.618224e-12, 1.6572712e-11, 5.5821394e-12, 2.3594118e-12, 1.351692e-11, 1.9621733e-11, 2.3416193e-11, 8.477988e-12, 1.7558232e-12, 1.3480181e-11, 1.6566829e-11, 8.3494562e-12, 1.0927638e-11, 4.0086691e-11, 1.6651962e-11, 2.7324424e-11, 3.4887816e-12, 1.3475297e-11, 2.1159452e-11, 5.2683577e-12, 1.3745236e-11, 3.5893205e-11, 3.4344276e-11, 4.7905261e-12, 2.1948068e-11, 4.4536575e-12, 5.2116617e-11, 3.6534865e-11, 6.9206452e-11, 3.8344298e-11, 4.4512489e-11, 2.1158231e-11, 1.856573e-11, 1.5882214e-12, 1.1754437e-11, 1.8347626e-11, 2.3172338e-11, 2.9199233e-11, 4.1969381e-11, 3.6500567e-11, 4.019036e-11, 5.0911105e-11, 3.4911625e-20]; option = { dataZoom: [ { type: 'slider', minSpan: 1 }, { type: 'inside', minSpan: 1 } ], tooltip: { trigger: 'axis', formatter: function (params) { let newParams = []; let tooltipString = []; newParams = [...params]; newParams.sort((a,b) => {return b.value - a.value}); newParams.forEach((p) => { const cont = p.marker + ' ' + p.seriesName + ': ' + p.value + ''; tooltipString.push(cont); }); return tooltipString.join(''); } }, legend: { data: legends }, grid: { left: '3%', right: '4%', bottom: '9%', containLabel: true }, // toolbox: { // feature: { // saveAsImage: {} // } // }, xAxis: { type: 'category', boundaryGap: false, data: xaxis }, yAxis: { min: 'dataMin', type: 'value', axisTick: { alignWithLabel: true }, scale: true, }, series: [ { name: legends[0], type: 'line', showSymbol: false, data: data0 }, { name: legends[1], type: 'line', showSymbol: false, lineStyle:{ type:'dashed' //'dotted'虚线 'solid'实线 }, data: data1 }, { name: legends[2], type: 'line', showSymbol: false, lineStyle:{ type:'dashed' //'dotted'虚线 'solid'实线 }, data: data2 }, { name: legends[3], type: 'line', showSymbol: false, lineStyle:{ type:'dashed' //'dotted'虚线 'solid'实线 }, data: data3 }, { name: legends[4], type: 'line', showSymbol: false, lineStyle:{ type:'dashed' //'dotted'虚线 'solid'实线 }, data: data4 }, { name: legends[5], type: 'line', showSymbol: false, lineStyle:{ type:'dashed' //'dotted'虚线 'solid'实线 }, data: data5 }, { name: legends[6], type: 'line', showSymbol: false, lineStyle:{ type:'dashed' //'dotted'虚线 'solid'实线 }, data: data6 }, { name: legends[7], type: 'line', showSymbol: false, lineStyle:{ type:'dashed' //'dotted'虚线 'solid'实线 }, data: data7 } ] }; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option);","categories":[],"tags":[{"name":"OpenFOAM","slug":"OpenFOAM","permalink":"https://daydreamatnight.github.io/tags/OpenFOAM/"},{"name":"fluid dynamics","slug":"fluid-dynamics","permalink":"https://daydreamatnight.github.io/tags/fluid-dynamics/"}],"author":"Ryan LI"},{"title":"Compile OpenFOAM from source on M1 Mac","slug":"Build-OpenFOAM-from-source-on-M1-Mac","date":"2022-06-09T09:11:13.000Z","updated":"2022-06-09T10:20:51.879Z","comments":true,"path":"2022/06/09/Build-OpenFOAM-from-source-on-M1-Mac/","link":"","permalink":"https://daydreamatnight.github.io/2022/06/09/Build-OpenFOAM-from-source-on-M1-Mac/","excerpt":"I just spent 3 hours building ESI OpenFOAM-v2112 from source code locally(no need docker) on my m1 MacBook air. This blog is to record the process.","text":"I just spent 3 hours building ESI OpenFOAM-v2112 from source code locally(no need docker) on my m1 MacBook air. This blog is to record the process. Although here is a very convenient already-built source for mac: gerlero/openfoam2112-app. I still chose to build it from the source on my own mac. Helpful resources:OpenFOAM v2112 source codeBrushXue/OpenFOAM-AppleM1OpenFOAM installation on Mac.pdfOpenFOAM wikiOpenFOAM doc Preliminaries Command line tools: xcode-select --install Homebrew: /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; Procedures Create a case-sensitive volume on mac. OpenFOAM requires a case-sensitive volume to build and run, yet mac does not support it by default. Open disk utility.app and follow these settings: Go to /Volumes/OpenFOAMs/, download and extract the source code and the patches for mac (thanks to BrushXue) to the same directory. Install dependencies with homebrew: brew install cmake open-mpi libomp adios2 boost fftw kahip metis Install modifiled scotch and CGAL@4 (Thanks to gerlero for creating this tap) brew tap gerlero/openfoam brew install scotch-no-pthread cgal@4 And you probably need to add the following: export CPATH=/opt/homebrew/include export LIBRARY_PATH=/opt/homebrew/lib Source OpenFOAM's environment bashrc: source etc/bashrc Check the system and build (about 1 hour on MacBook Air) foamSystemCheck ./Allwmake -j -s -l Install paraview from Homebrew brew install --cask paraview Add alias to $home/.zshrc alias of=&quot;source /Volumes/OpenFOAMs/OpenFOAM-v2112/etc/bashrc&quot;","categories":[],"tags":[{"name":"OpenFOAM","slug":"OpenFOAM","permalink":"https://daydreamatnight.github.io/tags/OpenFOAM/"},{"name":"mac","slug":"mac","permalink":"https://daydreamatnight.github.io/tags/mac/"}],"author":"Ryan LI"},{"title":"Review of Physical Informed Neural Network","slug":"Review-of-Physical-Informed-Neural-Network","date":"2022-06-08T18:20:20.000Z","updated":"2022-06-23T14:53:36.396Z","comments":true,"path":"2022/06/09/Review-of-Physical-Informed-Neural-Network/","link":"","permalink":"https://daydreamatnight.github.io/2022/06/09/Review-of-Physical-Informed-Neural-Network/","excerpt":"It's a brief note of the talk: Physics-Informed Deep learning, by Dr. Lu Lu, based on the review paper: Physics-informed machine learning[1]. During PHD, Lu Lu worked with Prof. George Em Karniadakis in the same group proposing the PINN[2] and now he is an assistant professor of the Pennsylvania University.","text":"It's a brief note of the talk: Physics-Informed Deep learning, by Dr. Lu Lu, based on the review paper: Physics-informed machine learning[1]. During PHD, Lu Lu worked with Prof. George Em Karniadakis in the same group proposing the PINN[2] and now he is an assistant professor of the Pennsylvania University. Here, we review some of the prevailing trends in embedding physics into machine learning, present some of the current capabilities and limitations and discuss diverse applications of physics-informed learning both for forward and inverse problems, including discovering hidden physics and tackling high-dimensional problems. Additional resouces:Papers:Physics Informed Deep Learning (Part I): Data-driven Solutions of Nonlinear Partial Differential Equations, M.Raissi, P.Perdikaris, G.E.KarniadakisPhysics Informed Deep Learning (Part II): Data-driven Discovery of Nonlinear Partial Differential Equations, M.Raissi, P.Perdikaris, G.E.KarniadakisCourse and slides:CS 598: Deep Generative and Dynamical ModelsCS598: Physics-Informed Neural Networks: A deep learning framework for solving forward and inverse problems involving nonlinear PDEsPhysics-Informed Neural Networks (PINNs)Blog:DS1 Physics Informed Neural Networks Karniadakis, G. E., Kevrekidis, I. G., Lu, L., Perdikaris, P., Wang, S., &amp; Yang, L. (2021). Physics-informed machine learning. Nature Reviews Physics, 3(6), 422-440. ↩︎ Raissi, M., Perdikaris, P., &amp; Karniadakis, G. E. (2019). Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations. Journal of Computational physics, 378, 686-707. ↩︎","categories":[],"tags":[{"name":"fluid dynamics","slug":"fluid-dynamics","permalink":"https://daydreamatnight.github.io/tags/fluid-dynamics/"},{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"Patterns, Machine learning for fluids dynamics","slug":"Lesson-note-Patterns-Machine-learning-for-fluids-dynamics","date":"2022-06-05T09:42:04.000Z","updated":"2022-06-08T18:16:23.553Z","comments":true,"path":"2022/06/05/Lesson-note-Patterns-Machine-learning-for-fluids-dynamics/","link":"","permalink":"https://daydreamatnight.github.io/2022/06/05/Lesson-note-Patterns-Machine-learning-for-fluids-dynamics/","excerpt":"The second course introduces the patterns and coherent structures in high-dimensional fluid dynamics and how machine learning is currently being used to extract them.","text":"The second course introduces the patterns and coherent structures in high-dimensional fluid dynamics and how machine learning is currently being used to extract them. This is a series of brief notes for the popular lesson: Machine Learning for Fluid Mechanics, by Dr. Steve Brunton. He is not only a good instructor, but an active researcher focusing combining techniques in dimensionality reduction, sparse sensing, and machine learning for the data-driven discovery and control of complex dynamical systems. As we all know, computer vision is one major and advanced field of Machine learning. And the developed CV techniques can be leveraged directly to process fluid fields just by seeing them as images or movies. Some notable works as follows. Patterns exist This is the fundamental fact, even in the most complex systems, patterns exist. Just like there are dominant patterns (normally called latent features in the ML world) to define whether there is a human face or a dog in an image, there are dominant patterers to define a fluid field. Interesting facts: In 1987, Sirovich wrote two papers that pioneered in two fields. In April, he applied the PCA/SVD algorithm to human faces to generate the \"eigenfaces\" for face recognition[1]. Later in October, he applied this same technique into fluid fields to extract the coherent structures of flow fields[2]. POD/PCA and Autoencoder Background POD: Given a complex fluid field sequence such as the von Kármán vortex street, one can tell there's a simple regular pattern emerging here even if it has lots of pixels or generated by a sophisticate simulation with large degree of freedom. The patterns can be extracted by simple tools in linear algebra. For example, subtracting off the mean flow then deploying a singular vector decomposition to get a POD expansion as: \\[ \\mathbf{u} \\approx \\bar{\\mathbf{u}} + \\sum^r_{k=1}\\boldsymbol{\\psi}_k(x)\\mathbf{a}_k(t) \\] It writes the spatial-temporal flow field as the mean flow plus the summation of several static eigenflow fields. And the eigen vector \\(\\mathbf{a}\\) changes with time enabling the summation also a function of time \\(t\\). POD method has been developed for 50 years and it is a cornerstone on how to analysis complex flow fields. Note that this can be seen as a special form of the Fourier decomposition, space-time separation of variables. Fourier transform are very useful to decompose space-time variables and POD is a data-driven generalisation of the Fourier transform that satisfies the particular fluid boundary conditions and is generated form physical data of an actual flow simulation. Autoencoder: In this modern era, the POD/PCA can be rewritten in the form of the neural network as shown above. It works as a bottom neck information filter where the encoder compress the complex data into a latent space and the decoder reconstructs the full flow field image. And the objective is to minimise the distance between the reconstructed image and the original image. And by constraining the hidden layer size as much as possible, the encoder is able to distill the most important fluid coherent structure for reconstruction of the flow field image. Deep Autoencoder: Now a deep autoencoder with more hidden layers with non-linear activation functions can be deployed to enhance the performance i.e. smaller latent space in the middle, better coordinate representations of the flow field, and simpler representations to work with downstream tasks. Example Michele Milano and Petros Koumoutsakos are the first to introduce AE into fluid dynamic. They applied neural network modelling for near wall turbulent flow[3], and compared with POD results, 2 decades ahead of its time. Robust PCA Following the above work, lots of things can be done such as robustify the extraction of patterns, on noisy data, corrupted data or data with outliers. Background PIV: Particle Image Velocimetry (PIV) is an experimental technique to measure the fluid non-invasively. And the flow field tend to become highly noisy with higher speed and larger window. RPCA: While in the field of the image science, Candès et.al[6] suggests the principal components of data can be recovered even if part of the data is arbitrarily corrupted. They describes the corrupted data as a superposition of a Low rank component \\(L_0\\) and a sparse component \\(S_0\\), and the robust PCA is presented to recover each components. They also deploy the RPCA to recover the main characters from the background in surveillance videos and remove the shadows and specialities in faces images (as shown above). Why not apply it into the fluid flow images? PIV uses the cross-correlation algorithm[4] to determine the displacement of each sub-window. This is the exact same algorithm used in the CNNs. However, they call it \"convolution\"[5], regardless of the fact that the actual convolution method is the transposition of the cross-correlation algorithm. Example: Isabel Scherl et.al[7] apply the RPCA algorithm to recover the the salt pepper corrupted flow fields, by solving a ralated relaxed optimisation problem. The low rank and sparse component refer to the coherent structure and the noise. And the POD and DMD modes separated from the recovered data can be highly optimised as well. Super resolution Background Super resolution is already a mature field in image sciences, and it can be directly deployed into flow fields. Example Above is the result of reconstructing the turbulence flow fields(Johns Hopkins Turbulence Database) from the coarse results obtained by applying an average pooling on the original flow fields[3]. Multiple MLPs are deployed for this task. Yet the good results only happen at the interpolation scenario, for the extrapolation i.e. prediction task, the reconstruction failed. More physics need to add to make this work. Compared with the flow field prediction, all the CV tasks with large pretrained models are interpolation tasks. The training data already contains all the data that needed. Statistical stationarity In stead of a simple flow passed a cylinder, most fluid fields in the real life are more complicated. It brings more difficulties for models to reconstruct the fluid. Example Callaham, J. L et.al [9] apply robust flow reconstruction via sparse representation on flow pass a cylinder, mixing layer, sea surface temperature and gulf of Mexico. And the modes needed to reconstruct each flow fields increase as shown above. This article mainly shows the sparse model outperforms the general model. But in the discussion session, it brings up the key requirements of the reconstruction: sufficient training data and sufficient measured information. And they quantify the rate of sufficiency in each cases. The residuals of projecting test data onto the linear subspaces of POD modes of increasing training data is provided. As more data is added to the training set, test set are more likely to be generalised by the training data modes. Personally, I don't really understand the term projection. Whether it is same as reconstruction but in an opposite direction? Need more knowledge on it. For flow pass a cylinder, the model performs well even with very few training data since the flow is simple and periodic. However, the mixing layer and Gulf of Mexico vorticity data have relatively large residual, indicating that there are still new structures that haven’t been observed in the training data. Above compares the normalised residual error of sparse representation-based reconstructions with increasing number of random point measurements. Similar to the research on amount of the training data, more information is needed from measurements to reconstruct a more complicate flow field. The result might be better if a powerful reconstruction model is used such as the Deep Autoencoder. It is still an open area. Reference Sirovich, L., &amp; Kirby, M. (1987). Low-dimensional procedure for the characterization of human faces. Josa a, 4(3), 519-524. ↩︎ Sirovich, L. (1987). Turbulence and the dynamics of coherent structures. I. Coherent structures. Quarterly of applied mathematics, 45(3), 561-571. ↩︎ Milano, M., &amp; Koumoutsakos, P. (2002). Neural network modeling for near wall turbulent flow. Journal of Computational Physics, 182(1), 1-26. ↩︎ Keane, R. D., &amp; Adrian, R. J. (1992). Theory of cross-correlation analysis of PIV images. Applied scientific research, 49(3), 191-215. ↩︎ LeCun, Y., Bottou, L., Bengio, Y., &amp; Haffner, P. (1998). Gradient-based learning applied to document recognition. Proceedings of the IEEE, 86(11), 2278-2324. ↩︎ Candès, E. J., Li, X., Ma, Y., &amp; Wright, J. (2011). Robust principal component analysis?. Journal of the ACM (JACM), 58(3), 1-37. ↩︎ Scherl, I., Strom, B., Shang, J. K., Williams, O., Polagye, B. L., &amp; Brunton, S. L. (2020). Robust principal component analysis for modal decomposition of corrupt fluid flows. Physical Review Fluids, 5(5), 054401. ↩︎ Erichson, N. B., Mathelin, L., Yao, Z., Brunton, S. L., Mahoney, M. W., &amp; Kutz, J. N. (2020). Shallow neural networks for fluid flow reconstruction with limited sensors. Proceedings of the Royal Society A, 476(2238), 20200097. ↩︎ Callaham, J. L., Maeda, K., &amp; Brunton, S. L. (2019). Robust flow reconstruction from limited measurements via sparse representation. Physical Review Fluids, 4(10), 103907. ↩︎","categories":[],"tags":[{"name":"fluid dynamics","slug":"fluid-dynamics","permalink":"https://daydreamatnight.github.io/tags/fluid-dynamics/"},{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"}],"author":"Ryan LI"},{"title":"Introduction, Machine learning for fluids dynamics","slug":"Lesson-note-Machine-learning-for-fluids-dynamics","date":"2022-06-01T09:09:11.000Z","updated":"2022-06-08T18:16:37.950Z","comments":true,"path":"2022/06/01/Lesson-note-Machine-learning-for-fluids-dynamics/","link":"","permalink":"https://daydreamatnight.github.io/2022/06/01/Lesson-note-Machine-learning-for-fluids-dynamics/","excerpt":"This is a series of brief notes for the popular lesson: Machine Learning for Fluid Mechanics, by Dr. Steve Brunton. He is not only a good instructor, but an active researcher focusing combining techniques in dimensionality reduction, sparse sensing, and machine learning for the data-driven discovery and control of complex dynamical systems.","text":"This is a series of brief notes for the popular lesson: Machine Learning for Fluid Mechanics, by Dr. Steve Brunton. He is not only a good instructor, but an active researcher focusing combining techniques in dimensionality reduction, sparse sensing, and machine learning for the data-driven discovery and control of complex dynamical systems. Given the background of the popularity of ML in the CV area, this lesson focus on how to apply it into the field of traditional physics science and engineering, especially dynamical systems and fluid mechanics. Introduction Several Q&amp;As: Explain machine learning in nutshell. Machine learning is a growing set of techniques for high dimensional, non-convex optimisations based on a growing wealth of data. Why machine learning suits fluid mechanics? Almost all of the fluid dynamics tasks (including Reduction, modelling, control, sensing and closure) can be written as nonlinear, non-convex, multi-scale and very high dimensional (very hard) optimisation problems that can't be solved efficiently by traditional methods. Yet it is exactly the field of machine learning. What is high dimensional? Fluid itself has many degrees of freedom, million or billion degrees of freedom might be needed for simulate a turbulent fluid. And a growing of data leads an explosion of dimension. What is non-linear? Because fluids is governed by a nonlinear PDE, the NS equation. What is non-convex? Because there exists local minima in the optimisation problems. What kind of ML do we need? Interpretable, generalisable i.e. reliable Sparse, low-dimensional, robust History Machine learning and fluid dynamics share a long history of interfaces. Pioneered by Rechenberg (1973) and Schwefel (1977), who introduced Evolution Strategies (ES) to design and optimise the profile of a multi-panel plate in order to minimise the drag. The stochastic was introduced and a optimisation similar to the SGD is applied to find the best configuration. Another link is Sir James Lighthill's report (1974), which leads the AI winter. His report says AI fails to meet the promises in several fields, such as speech recognition, and natural language processing (NLP). The first time I heard this part of history, I thought this Lighthill was some idiot who lacks insight. I never connected this man with the very person who proposed the Lighthill's Equation with the acoustic analogy method and founded the subject of aeroacoustics, during his PHD!Also, it reminds me a talk I saw by Geoffrey Hinton, who said he came to the US because he couldn't find a job in the UK with a degree in AI. Back then (1978) UK refused to fund almost any research topics related to AI and deep learning, partly of Sir Lighthill's consequences.It's just like someone of my field narrowly buried the AI halfway yet at the same time influenced a star in this area. Examples POD/PCA/SVA POD refers to the PCA done on the flow data. With a series of snapshots of a flow past a cylinder at \\(Re\\approx100\\), subtracting the mean flow and applying a singular value decomposition (SVA), the resulting dominant eigen flows (modes, representing the flow patterns) can be used to construct a reduced order model to reproduce the fluid flow field efficiently. One application of this method is shown below[1], RPCA, a variant of PCA is applied to denoise the artificially pepper-salt corrupted DNS simulation result, and real PIV experiment result. The outliers and the true fluid field are able to separate with a change of the \\(\\lambda\\). Closure modelling This is a DNS simulation on turbulent boundary layers by HTL. As we zoom in and out, massive fractal, multi-scale patterns are found in space and time. This happens everytime and everywhere when fluid flowing past a wing, car, or inside an engine. But instead of simulating the full DNS equation i.e. resolving the patterns with all the energy scales, we only want to get a reduced order model approximating the small energy scales while focusing on only the scales of energy that resulting in the macroscopic change of the fluid. Steve reckons this as the one of the most exciting area where ML can really make a practical impact on everyday industrials. And I heard that after a talk in China, he said a great progress on the area of turbulence might be made in the next 2 decades. (I'm not sure, just heard of it) One inspiring job[2] is mentioned which study the RANs closure models. They designed a novel customised structure that embed the physical variables one layer before the output layer of NN. And it inspires us how to \"bake in\" prior knowledge to design a model not only accurate but also physically meaningful\". Super resolution Super resolution is already a mature field in image sciences, and it can be directly deployed into flow fields. Above is the result of reconstructing the turbulence flow fields(Johns Hopkins Turbulence Database) from the coarse results obtained by applying an average pooling on the original flow fields[3]. Multiple MLPs are deployed for this task. Yet the good results only happen at the interpolation scenario, for the extrapolation i.e. prediction task, the reconstruction failed. More physics need to add to make this work. Deep autoencoders The classical POD/PCA can be written in a form of one-layer linear autoencoder. And instead solving by the analytic SVD algorithm, it can be solved by SGD. So why not change the two-layer, linear autoencoder into the non-linear, multilayer deep autoencoder? Based on this thought, Michele Milano and Petros Koumoutsakos deployed neural network modeling for near wall turbulent flow[4], and compared with POD results, 2 decades ahead of its time. This concepts are also developed to build the reduced order models. The pattens extracted from POD or AE can be used to build simple representations in a low dimensional coordinate. For example Bernd R. Noack et als' work[5] showed the dynamics of transient cylinder wakes can be concluded by a hierarchy of low-dimensional models lived on parabolic bowls. And these learned coordinates can be used with data-diven methods like SINDy(the sparse identification of nonlinear dynamics)[6] to build efficient models for predicting the modes purely from measurement data. Jean-Christophe Loiseau has done a lot work based on this[7]. The ultimate goal: Flow control It is a very principled optimisation of the flow field and of the control law with some objectives in mind. Those objectives come from the real wold such as: increasing the lift, decreasing the drag. And these optimisation problems can be solved better with machine learning tools. As shown by Bieker at als' diagram[8], instead of controlling a NS equation, an efficient alternative is controlling a machine learning surrogate model to realise the real-time control. Inspiration from biology At last to give us some confidence, Steve mentioned without knowing the NS equations, eagle can somehow manoeuvre the complex turbulence flow by its own sensors on its wings. And the insects, with way small neural system, they can handle the complex turbulence flow elegantly and seamlessly (I don't feel any self-confidence hearing this). And maybe we can learn something from them and fit into our engineering world. Scherl, I., Strom, B., Shang, J. K., Williams, O., Polagye, B. L., &amp; Brunton, S. L. (2020). Robust principal component analysis for modal decomposition of corrupt fluid flows. Physical Review Fluids, 5(5), 054401. ↩︎ Ling, J., Kurzawski, A., &amp; Templeton, J. (2016). Reynolds averaged turbulence modelling using deep neural networks with embedded invariance. Journal of Fluid Mechanics, 807, 155-166. ↩︎ Erichson, N. B., Mathelin, L., Yao, Z., Brunton, S. L., Mahoney, M. W., &amp; Kutz, J. N. (2020). Shallow neural networks for fluid flow reconstruction with limited sensors. Proceedings of the Royal Society A, 476(2238), 20200097. ↩︎ Milano, M., &amp; Koumoutsakos, P. (2002). Neural network modeling for near wall turbulent flow. Journal of Computational Physics, 182(1), 1-26. ↩︎ Noack, B. R., Afanasiev, K., MORZYŃSKI, M., Tadmor, G., &amp; Thiele, F. (2003). A hierarchy of low-dimensional models for the transient and post-transient cylinder wake. Journal of Fluid Mechanics, 497, 335-363. ↩︎ Brunton, S. L., Proctor, J. L., &amp; Kutz, J. N. (2016). Discovering governing equations from data by sparse identification of nonlinear dynamical systems. Proceedings of the national academy of sciences, 113(15), 3932-3937. ↩︎ Loiseau, J. C., Noack, B. R., &amp; Brunton, S. L. (2018). Sparse reduced-order modelling: sensor-based dynamics to full-state estimation. Journal of Fluid Mechanics, 844, 459-490. ↩︎ Bieker, K., Peitz, S., Brunton, S. L., Kutz, J. N., &amp; Dellnitz, M. (2019). Deep model predictive control with online learning for complex physical systems. arXiv preprint arXiv:1905.10094. ↩︎","categories":[],"tags":[{"name":"fluid dynamics","slug":"fluid-dynamics","permalink":"https://daydreamatnight.github.io/tags/fluid-dynamics/"},{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"}],"author":"Ryan LI"},{"title":"External flow fundamentals","slug":"External-flow-fundamentals","date":"2022-05-26T05:15:15.000Z","updated":"2022-06-16T07:51:56.427Z","comments":true,"path":"2022/05/26/External-flow-fundamentals/","link":"","permalink":"https://daydreamatnight.github.io/2022/05/26/External-flow-fundamentals/","excerpt":"Internal pipe flow is not enough for me, continue to review the tricky part.","text":"Internal pipe flow is not enough for me, continue to review the tricky part. 4 Fluid-structure interaction When an unbounded homogeneous flow approaches an obstacle, viscous effects become important and substantially deform the flow profile. The resulting boundary layers and wakes are responsible for generating forces and moments on the obstacle. 4.1 Examples 4.1.1 Lift generation Here comes the most popular question: how does an aircraft fly? The basic answer is that The airfoil is shaped so that its upper surface is longer than its lower surface. A parcel of fluid arriving at the leading edge then splits into two parcels, one following the upper surface and the other the lower surface. As the fluid has more distance to travel on the upper surface than on the lower surface, it goes faster to have the same transit time. The Bernoulli effect follows: the higher velocity on the upper surface yields a lower pressure and an ascending force is created: the lift. The use of Bernoulli effect is, to some extent, correct. However, based on experiment findings shown below, the same transit time assumption is not quite right. I{t}s clear the upper flow is accelerated compared to the lower flow. This happens already at the leading edge, but the lower flow never catches up with the upper one. As a result, the upper flow possesses a shorter transit time. As a consequence, the physical mechanism behind lift is not so simple. A plausible answer is twofolds. On the one hand, the fluid is accelerated on the upper surface and slowed down on the lower surface, creating a descending pressure gradient, hence lift. On the other hand, the fluid trajectory is overall deflected downwards when passing the airfoil. This implies that the airfoil creates a descending force onto the fluid, and, by Newton’s third law, that the fluid generates an ascending force onto the airfoil. 4.1.2 Wingtip vortices At the tip of the wing, when the lower pressure upper surface meets the higher pressure lower surface, wingtip vortices are generated. These vortices are generally strong, long-lived and consequently dangerous, as shown below: Flying through such a vortex will create a rolling moment that can destabilize the flight. Many such incidents have happened during takeoff and landing. As a result, airports have decided on quiet periods of one to two minutes between two successive takeoffs or landings to allow for these vortices to dissipate to a less dangerous strength. Yet the wingtip vortices are leveraged perfectly by the nature, the V-formation. When one bird follows another bird, it places itself a little bit on the side to benefit from the lift generated by the wingtip vortices of its leader. 4.1.3 Others Wind and ocean engineering also present important challenges in the area of fluid-structure interaction. The construction of tall building is necessary to accommodate large professional centres and these tall buildings interact strongly with the wind. Similar issues arise with bridges. Serious oscillation would be generated due to the \"wind load\". In water, it is important to understand fluid-structure interactions to design efficient breakwaters and protect constructions on the shore or beaches. Pier piles are also good examples of structures interacting with water and that have to be designed carefully. Lastly, we can take advantage of natural phenomena such as wind and currents by designing structures that will store such energy like wind and water turbines. 4.2 Effect of a structure on the fluid When an external flow goes past an obstacle, boundary layer and wake effects occur on the walls and after the obstacle respectively. 4.2.1 Boundary layers Convenient definition: a region where the fluid’s velocity parallel to the wall is smaller or equal to 99% of the external velocity. Inside the boundary layer, the flow feels the effect of the wall and is gradually slowed down as we approach the wall. The presence of these velocity gradients is a consequence of viscous dissipation. Outside the boundary layer, the flow does not feel the presence of the walls. It remains homogeneous and is considered inviscid. Note that this is only an assumption, the interaction between the boundary layer and the outer pressure distribution is neglected. For slender bodies at large \\(Re\\), such as airfoils, when placed parallel to the flow, this assumption provides good results due to the thin and weak boundary layer. There are two types of the boundary layers defined by the Reynolds number: Low \\(Re\\), laminar boundary layer. Because spatial variations are slow, the laminar boundary layer occupies a large spatial region. High \\(Re\\), two distinct regions in the boundary layer: laminar boundary layer similar to that of low-Re flows but much thinner turbulent boundary layer that occurs further away in the streamwise direction and is larger than the laminar boundary layer. The viscous displacement effect describes the non-zero velocity in the direction orthogonal to the wall because the velocity parallel to the wall varies in the direction orthogonal to the wall. For low \\(Re\\) laminar boundary layers, this effect is important For high \\(Re\\) boundary layers, these boundary layers are so thin that this effect is negligible. 4.2.2 Wakes When the inertia is non-trivial (equivalently viscous effects are not overwhelmingly dominant), the gradients of velocity induced by the boundary layer are advected downstream and create a wake past the obstacle. This region can display dramatic departures from the established flow infinitely far away from the obstacle. The sketch above shows how several typical regimes of the wake past a cylinder in different \\(Re\\)s: Low \\(Re\\): steady and symmetric flow \\(Re=\\mathcal{O}(10)\\): the upstream-downstream symmetry is broken flow separation occurs. The boundary layers separate from the wall and a recirculation zone is created where two counter-rotating vortices live. wake remains stationary the up-down symmetry is still preserved \\(Re=\\mathcal{O}(100)\\): the up-down symmetry is broken flow separation developed wake is now periodic in time, vortices periodically break away from the back of the cylinder in an alternate fashion and are advected downstream This type of wake is called Von Kármán streets. \\(Re&gt;\\mathcal{O}(1000)\\): any simple time-dependence in the wake is lost and it is now turbulent. Note that as the Reynolds number is increased, different types of turbulent wakes can be observed. At \\(Re = 5\\times10^3\\), the turbulent wake is detached from the wall and a laminar bubble is observed at the back of the cylinder. As the Reynolds number is increased, this bubble shrinks At \\(Re = 10^5\\), the back of the cylinder has become fully turbulent As Re is further increased, the turbulent wake becomes thinner and thinner and the influence of the cylinder on the flow decreases. This is the result of the fact that the characteristic length for advection becomes incomparably larger than the diameter of the cylinder 4.3 Effect of the fluid on a structure In this section, we look at the opposite interaction: the impact of boundary layers and wakes on the structures. 4.3.1 Free kick like Cristiano Ronaldo Personally, I'm not a big fan of football. The only football game I watch is FIFA. And I happened to watch this legendary game on live. I remember it was 3 o'clock in the morning and I barely held my scream. The explanation of such a trajectory lies in the Magnus effect which describes a spinning object moving through a fluid. Rotating the ball accelerates the flow on one side while slowing it down on the other. This difference of velocity breaks the symmetry of the flow and creates a difference of pressure. And this results in an additional force that bends the trajectory of the ball. 4.3.2 The Tacoma Narrows bridge Another famous aeroelastic failure is this 1.8km long bridge in the state of Washington. The 6 million dollar bridge collapsed in a steady standard wind in November, 1940, only 3 months after its opening date. Back then this wind interacted in an unexpected manner with the bridge and created a positive feedback loop called aeroelastic flutter. A oscillating wake due to the periodic vortex shedding excited a second torsional mode: the midpoint of the bridge remained motionless while the two opposite halves twisted in opposite directions. This torsion further enhanced the strength of the wake, which in turn enhanced the torsion until the bridge collapsed. 5 Boundary layer theory – Integral approach First, a control volume is defined as blow: Boundary ①: the segment \\((0, 0)\\) to \\((0, h)\\), where \\(\\mathbf{u} = U\\mathbf{\\hat{x}}\\). Boundary ②: the streamline \\((0, h)\\) to \\((L, \\delta)\\), where \\(\\mathbf{u}\\cdot \\mathbf{n} = 0\\). Boundary ③: the segment \\((L, \\delta)\\) to \\((L, 0)\\), where $ = u(x, y) + v(x, y)$. Boundary ④: the plate surface and streamline \\((L, 0)\\) to \\((0, 0)\\), where \\(u = 0\\). 5.1 Viscous displacement 5.1.1 Physical origin The viscous displacement determines the upstream streamlines parallel to the wall to move away from the wall i.e. boundary ② to tilt upward. It can be explained by the 2D compressible continuity equation: \\[ \\partial_x u+\\partial_y v=0 \\] Near the boundary ③, the no-slip condition gives \\(\\partial_xu&lt;0\\), to compensate for it, \\(\\partial_yv&gt;0\\), and the consequence of this is the viscous displacement. 5.1.2 Displacement thickness The quantity \\(\\delta^*\\) is called displacement thickness and represents the distance by which the wall would have to be moved in the wall normal direction to obtain the same flow rate in an inviscid flow. i.e. the additional blockage/deflection due to viscosity. By definition, it is easy to conclude that \\(\\delta = \\delta^*+h\\). And by mass conservation between the inlet and the outlet, the displacement thickness can be described: \\[ \\begin{aligned} \\rho\\int_1(\\mathbf{u}\\cdot\\mathbf{n})ds&amp;+\\rho\\int_3(\\mathbf{u}\\cdot\\mathbf{n})ds =0 \\\\ \\int^{\\delta-\\delta^*}_0(-U&amp;)dy+\\int^\\delta_0udy=0 \\\\ Uh&amp;= \\int^\\delta_0udy \\\\ \\end{aligned} \\] Substitute \\(h\\) with \\(\\delta-\\delta^*\\) : \\[ \\begin{aligned} U(\\delta-\\delta^*) &amp;= \\int^\\delta_0udy \\\\ U(\\delta-\\delta^*) &amp;= \\int^\\delta_0\\left(u+U-U\\right)dy \\\\ U(\\delta-\\delta^*) &amp;= U\\delta+\\int^\\delta_0\\left(u-U\\right)dy \\\\ \\Rightarrow \\quad\\delta^* = \\int_0^\\delta&amp;\\left(1-\\frac uU\\right)dy\\\\ \\Rightarrow \\quad\\color{purple}{\\frac{\\delta^*}{\\delta} = \\int_0^1}&amp;\\color{purple}{\\left(1-\\frac uU\\right)d\\eta}, \\quad\\mathrm{where~}\\eta=\\frac{y}{\\delta}\\\\ \\end{aligned} \\] 5.2 Friction drag 5.2.1 Drag as a boundary layer effect Assume a constant pressure throughout the domain, and a steady flow. The conservation of momentum in \\(\\mathbf{\\hat{x}}\\) writes: \\[ \\begin{aligned} \\rho\\int_1u(0,y)(\\mathbf{u}\\cdot\\mathbf{n})ds + \\underbrace{\\rho\\int_2u(x,y)(\\mathbf{u}\\cdot\\mathbf{n})ds+}_{\\mathrm{streamline:~}\\mathbf{u}\\cdot\\mathbf{n}=0} ...\\\\ \\rho\\int_3u(L,y)(\\mathbf{u}\\cdot\\mathbf{n})ds+ \\underbrace{\\rho\\int_4u(x,0)(\\mathbf{u}\\cdot\\mathbf{n})ds}_{\\mathrm{wall:~}u=0}= \\Sigma F_x = -D\\mathbf{\\hat{x}} \\end{aligned} \\] The equation simplifies into: \\[ \\begin{aligned} \\rho\\int_0^hU(-U)dy + \\rho\\int_0^\\delta u^2dy=-D \\\\ \\Rightarrow\\qquad D = \\rho hU^2 -\\rho\\int_0^\\delta u^2dy \\end{aligned} \\] Combine with the mass conservation result \\(Uh= \\int^\\delta_0udy\\): \\[ \\begin{aligned} D &amp;= \\rho \\int_0^\\delta Uudy-\\rho\\int_0^\\delta u^2dy \\\\ \\color{purple}{D }&amp;\\color{purple}{= \\rho \\int_0^\\delta \\frac{u}{U}\\left(1-\\frac{u}{U}\\right) dy} \\end{aligned} \\] 5.2.2 Momentum thickness The quantity \\(\\theta\\) is called momentum thickness and represents the distance by which the wall would have to be moved in the wall normal direction to obtain the same momentum in an inviscid flow. \\[ \\color{purple}\\frac{\\theta}{\\delta} = \\frac{D}{\\rho U^2\\delta} = \\int_0^1 \\frac{u}{U}\\left(1-\\frac{u}{U}\\right) d\\eta, \\quad \\mathrm{where~}\\eta = \\frac{y}{\\delta} \\] i.e. the momentum deficit can be determined by: \\[ \\rho U^2\\theta = \\rho \\int_0^\\delta \\frac{u}{U}\\left(1-\\frac{u}{U}\\right)dy \\] There is another Energy thickness writes: \\[\\color{purple}\\frac{\\theta&#39;}{\\delta} = \\int_0^1 \\frac{u}{U}\\left(1-\\frac{u^2}{U^2}\\right) d\\eta, \\quad \\mathrm{where~}\\eta = \\frac{y}{\\delta}\\] We can then define the shape factor: \\[ H = \\frac{\\delta^*}{\\theta} \\] Shape factor indicates the wall-normal distance on which the fluid is deflected from the plate compared to that on which gradients of streamwise velocities are felt.A large shape factor indicates a flow near separation. 5.2.3 Relation to wall shear stress The drag force is the integration of wall shear stress \\(\\tau_w\\) along the plate: \\[ D = \\int_0^L\\tau_wdx \\] Or in differential form: \\[ \\tau_w = \\partial_xD \\] Differentiate the momentum thickness representation: \\[ \\partial_x\\theta = \\frac{\\partial_xD}{\\rho U^2}=\\frac{\\tau_w}{\\rho U^2} \\] As a result, the wall shear: \\[ \\color{purple}\\tau_w = \\rho U^2\\partial_x\\theta \\] 5.3 Velocity profile approximations For laminar boundary layers, Von Kármán assumed that the velocity profile (\\(\\frac{u}{U}\\)) within the boundary layer had a parabolic shape: Given: \\[ \\eta = \\frac{y}{\\delta(x)} \\] The velocity profile (\\(\\frac{u}{U}\\)) writes: \\[ \\frac{u}{U}\\approx 2\\eta -\\eta^2, \\qquad 0\\leq \\eta\\leq 1 \\] For turbulent boundary layers, Prandtl highlighted a one-seventh power velocity profile: \\[ \\frac{u}{U}\\approx\\eta^\\frac{1}{7}, \\qquad 0\\leq \\eta\\leq 1 \\] These first order approximations are very close to the reality as shown below: 5.4 Laminar results (Von Kármán results) Based on Von Kármán's approximation, \\(\\frac{u}{U}\\approx \\frac{2y}{\\delta} -\\left(\\frac{y}{\\delta}\\right)^2\\). It is easy to get: Boundary thickness: The key point is that the wall shear stress can be expressed in two ways, by definition: \\[ \\begin{aligned} \\tau_w &amp;= \\mu \\partial_yu|_{y=0} \\\\ \\Rightarrow \\quad \\tau_{w} &amp;\\approx \\mu \\partial_{y}\\left.\\left(\\frac{2 y}{\\delta}-\\frac{y^{2}}{\\delta^{2}}\\right)\\right|_{y=0} \\\\ \\Rightarrow \\quad \\tau_{w} &amp;\\approx \\mu \\frac{2 U}{\\delta}\\\\ \\end{aligned} \\] and by the derivative of drag: \\[ \\begin{aligned} \\tau_w &amp;= \\rho U^2\\partial_x\\theta \\\\ \\Rightarrow \\quad \\tau_{w} &amp;\\approx \\rho U^2\\partial_x\\left[\\int_{0}^{\\delta}\\left(\\frac{2 y}{\\delta}-\\frac{y^{2}}{\\delta^{2}}\\right)\\left(1-\\frac{2 y}{\\delta}+\\frac{y^{2}}{\\delta^{2}}\\right) d y \\right] \\\\ \\Rightarrow \\quad \\tau_{w} &amp;\\approx \\frac{2\\rho U^2}{15}\\partial_x\\delta \\end{aligned} \\] As a result, connect these expressions: \\[ \\begin{aligned} &amp;\\mu \\frac{2 U}{\\delta} \\approx \\frac{2\\rho U^2}{15}\\partial_x\\delta \\\\ \\Rightarrow \\quad &amp;\\int_0^x dx \\approx \\int_0^\\delta \\frac{\\rho U}{15}\\delta d\\delta \\\\ \\Rightarrow \\quad &amp;x \\approx \\frac{\\rho U \\delta^2}{30\\mu} \\\\ \\Rightarrow \\quad &amp; \\left(\\frac{\\delta}{x}\\right)^2 \\approx \\frac{30\\mu}{\\rho U x} \\\\ \\Rightarrow \\quad &amp; \\color{purple}{\\frac{\\delta}{x} \\approx 5.5 Re_x^{-1/2}} \\\\ \\end{aligned} \\] where \\(\\color{purple}Re_x= Ux/\\nu\\) as the streamwise Reynold. the displacement thickness: \\[ \\begin{aligned} \\delta^* &amp;= \\int_0^\\delta\\left(1-\\frac{u}{U}\\right)dy \\\\ &amp;\\approx \\int_0^\\delta\\left(1-\\frac{2y}{\\delta}+\\left(\\frac{y}{\\delta}\\right)^2\\right)dy \\\\ \\Rightarrow \\quad \\delta^*&amp;\\approx \\frac{1}{3}\\delta\\\\ \\end{aligned} \\] with the boundary thickness expression: \\[ \\begin{aligned} \\color{purple}\\frac{\\delta^*}{x}\\approx 1.83 Re_x^{-1/2} \\end{aligned} \\] the momentum displacement and the factor of friction: \\[ \\begin{aligned} \\theta &amp;= \\int_{0}^{\\delta}\\left(\\frac{2 y}{\\delta}-\\frac{y^{2}}{\\delta^{2}}\\right)\\left(1-\\frac{2 y}{\\delta}+\\frac{y^{2}}{\\delta^{2}}\\right) d y \\\\ \\Rightarrow \\quad &amp; \\theta \\approx \\frac{2}{15}\\delta \\\\ \\Rightarrow \\quad &amp; \\color{purple}{\\frac{\\theta}{x} \\approx 0.73 Re_x^{-1/2}} \\end{aligned} \\] The factor of friction has the same order with the momentum displacement, as \\[ \\color{purple}{C_f \\approx 0.73 Re_x^{-1/2}} \\] the shape factor: \\[ \\color{purple} H = \\frac{\\delta^*}{\\theta} \\approx 2.5 \\] 5.5 Laminar results (Blasius results) Reference to MIT's note, MECH 346 – Heat Transfer's Youtube channel 5.5.1 Governing equations Conditions: 2D Steady Incompressible Neglect viscous dissipation, gravity and thermal dissipation Plus the thin layer assumption (\\(L\\gg\\delta\\)) for boundary layer (Obtained by non-dimensional scaling analysis, Full deriving on Appendix A.1): \\[ \\begin{aligned} u&amp;\\gg v \\\\ \\frac{\\partial}{\\partial y}&amp;\\gg\\frac{\\partial}{\\partial x} \\end{aligned} \\] The mass and momentum conservation equations reduces to: \\[ \\begin{aligned} \\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial y} &amp;= 0 \\\\ u\\frac{\\partial u}{\\partial x}+v\\frac{\\partial u}{\\partial y}&amp;=-\\frac{1}{\\rho}\\frac{\\partial p}{\\partial x}+ \\nu\\left(\\overbrace{\\frac{\\partial^2u}{\\partial x^2}}^{\\mathrm{0}}+\\frac{\\partial^2u}{\\partial y^2}\\right) \\\\ u\\frac{\\partial v}{\\partial x}+v\\frac{\\partial v}{\\partial y}&amp;= \\underbrace{-\\frac{1}{\\rho}\\frac{\\partial p}{\\partial y}}_{\\text{principle order}}+\\nu\\left(\\frac{\\partial^2v}{\\partial x^2}+\\frac{\\partial^2v}{\\partial y^2}\\right) \\end{aligned} \\] as a result: \\[ \\begin{aligned} \\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial y} &amp;= 0 \\\\ u\\frac{\\partial u}{\\partial x}+v\\frac{\\partial u}{\\partial y}&amp;=-\\frac{1}{\\rho}\\frac{\\partial p}{\\partial x}+\\nu\\frac{\\partial^2u}{\\partial y^2} \\\\ \\frac{1}{\\rho}\\frac{\\partial p}{\\partial y}&amp;=0 \\end{aligned} \\] For the flat plate boundary layer, it is easy to get \\(\\frac{\\partial p}{\\partial x}=0\\) because the free stream pressure gradient in the \\(x\\) direction is \\(0\\), so as in the boundary layer given the \\(\\frac{\\partial p}{\\partial y}=0\\). As a consequence there is no pressure gradient within the flat plate boundary layer. The final governing equation writes: \\[ \\color{purple} \\begin{aligned} \\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial y} &amp;= 0 \\\\ u\\frac{\\partial u}{\\partial x}+v\\frac{\\partial u}{\\partial y}&amp;=\\nu\\frac{\\partial^2u}{\\partial y^2} \\\\ \\end{aligned} \\] And the boundary conditions are: \\[ \\color{purple} \\begin{aligned} u=v = 0\\quad&amp;\\mathrm{at}\\quad y = 0\\\\ u = U\\quad&amp;\\mathrm{at}\\quad x = 0 \\\\ u \\rightarrow U\\quad&amp;\\mathrm{as}\\quad y \\rightarrow \\infty \\\\ \\end{aligned} \\] These conditions demand an infinite gradient in speed at the leading edge \\(x = y = 0\\), which implies a singularity in the mathematical solution there. The solution given by the boundary layer approximation is not valid at the leading edge. Define a stream function so that the continuity equation will be automatically included: \\[ \\begin{aligned} \\psi &amp;= \\int u dy \\\\ u = \\frac{\\partial\\psi}{\\partial y}&amp;, \\quad v = -\\frac{\\partial \\psi}{\\partial x} \\end{aligned} \\] Subscribe into the momentum equation to get an single variable equation: \\[ \\color{purple} \\frac{\\partial\\psi}{\\partial y} \\frac{\\partial^2\\psi}{\\partial x \\partial y}- \\frac{\\partial\\psi}{\\partial x} \\frac{\\partial^2\\psi}{\\partial y^2} = \\nu\\frac{\\partial^3\\psi}{\\partial y^3} \\] with boundary conditions: \\[ \\color{purple} \\begin{aligned} \\frac{\\partial\\psi}{\\partial y}=\\frac{\\partial\\psi}{\\partial x} = 0\\quad&amp;\\mathrm{at}\\quad y = 0\\\\ \\frac{\\partial\\psi}{\\partial y} = U\\quad&amp;\\mathrm{at}\\quad x = 0 \\\\ \\frac{\\partial\\psi}{\\partial y} \\rightarrow U\\quad&amp;\\mathrm{as}\\quad y \\rightarrow \\infty \\\\ \\end{aligned} \\] Through a coordinate transformation(similarity solution), this PDE can be transferred into an ODE and thus be solved easily. 5.5.2 Similarity solution In the study of partial differential equations, particularly in fluid dynamics, a self-similar solution is a form of solution which is similar to itself if the independent and dependent variables are appropriately scaled. In contrast to the most frequently used method of \"separation variables\", the similarity solution involves combining the variables in a special way. Another example of using similarity to solve Heat diffusion equation lies on the Appendix A.2. A self-similar equation doesn't change regardless how the variables scale. So assume a transformation: \\[ \\begin{aligned} y = \\lambda^a\\bar{y}\\\\ x = \\lambda^b\\bar{x}\\\\ \\psi = \\lambda^c\\bar{\\psi}\\\\ \\end{aligned} \\] The resulting scaled function and writes: \\[ \\begin{aligned} \\lambda^{3c-2a-b}\\frac{\\partial\\bar{\\psi}}{\\partial \\bar{y}} \\frac{\\partial^2\\bar{\\psi}}{\\partial \\bar{x} \\partial \\bar{y}}- \\lambda^{3c-2a-b}\\frac{\\partial\\bar{\\psi}}{\\partial \\bar{x}} \\frac{\\partial^2\\bar{\\psi}}{\\partial \\bar{y}^2} = \\lambda^{3c-3a}\\nu\\frac{\\partial^3\\bar{\\psi}}{\\partial \\bar{y}^3} \\\\ \\Leftrightarrow\\quad\\frac{\\partial\\bar{\\psi}}{\\partial \\bar{y}} \\frac{\\partial^2\\bar{\\psi}}{\\partial \\bar{x} \\partial \\bar{y}}- \\frac{\\partial\\bar{\\psi}}{\\partial \\bar{x}} \\frac{\\partial^2\\bar{\\psi}}{\\partial \\bar{y}^2} = \\lambda^{-3c-a+b}\\nu\\frac{\\partial^3\\bar{\\psi}}{\\partial \\bar{y}^3} \\end{aligned} \\] And the scaled boundary conditions gives: \\[ \\begin{aligned} \\lambda^{c-a}\\frac{\\partial\\bar{\\psi}}{\\partial \\bar{y}}=\\lambda^{c-b}\\frac{\\partial\\bar{\\psi}}{\\partial \\bar{x}} = 0\\quad&amp;\\mathrm{at}\\quad \\lambda^{a}\\bar{y} = 0\\\\ \\end{aligned} \\] As a result, all the powers should be 0: \\[ \\left.\\begin{array}{c} \\left.\\begin{array}{c} -c-a+b=0 \\\\ c-a=0 \\end{array}\\right\\} \\quad b=a / 2 \\\\ c-b=0 \\qquad \\qquad \\quad \\end{array}\\quad\\right\\} \\quad c=a / 2 \\] Here I need to put my derivation here: Similar to Appendix A.2, we can construct an expression of \\(\\psi\\) as: \\[ \\psi(x,y)= x^{1/2}f^\\dagger(\\eta^\\dagger), \\quad \\eta^\\dagger = yx^{-1/2} \\] Personal comment: I still don't know how to construct this kinda thing or why it work. The formula in Appendix gives me some idea but following it I got \\(\\psi(x,y)= x^{1}f^\\dagger(\\eta^\\dagger)\\), \\(\\eta^\\dagger = yx^{-1/2}\\) instead... Substitute the expression of \\(\\psi\\) into the equation with \\(f^{\\dagger&#39;} = \\partial_{\\eta^{\\dagger}}f^{\\dagger}\\): \\[ \\begin{aligned} \\frac{\\partial\\psi}{\\partial y} &amp;= f^{\\dagger&#39;} \\\\ \\frac{\\partial^2\\psi}{\\partial y^2} &amp;= x^{-1/2}f^{\\dagger&#39;&#39;} \\\\ \\frac{\\partial^3\\psi}{\\partial y^3}&amp;= x^{-1}f^{\\dagger&#39;&#39;&#39;}\\\\ \\frac{\\partial\\psi}{\\partial x} &amp;= \\frac{1}{2}x^{-1/2}f^{\\dagger}-\\frac{1}{2}x^{-1}f^{\\dagger&#39;}y \\\\ &amp;= \\frac{1}{2}x^{-1/2}(f^{\\dagger} -\\eta^{\\dagger} f^{\\dagger&#39;}) \\\\ \\frac{\\partial^2\\psi}{\\partial x \\partial y} &amp;= \\frac{1}{2}x^{-1/2}(x^{-1/2}f^{\\dagger&#39;} -x^{-1/2}\\eta^{\\dagger} f^{\\dagger&#39;&#39;} - x^{-1/2}f^{\\dagger&#39;}) \\\\ &amp;=-\\frac{1}{2}x^{-1}\\eta^{\\dagger} f^{\\dagger&#39;&#39;}\\\\ \\frac{\\partial\\psi}{\\partial y}\\frac{\\partial^2\\psi}{\\partial x \\partial y} &amp;= f^{\\dagger&#39;}\\left[-\\frac{1}{2}x^{-1}\\eta^{\\dagger} f^{\\dagger&#39;&#39;}\\right] \\\\ &amp;= -\\frac{1}{2}x^{-1} \\eta^{\\dagger}f^{\\dagger&#39;}f^{\\dagger&#39;&#39;} \\\\ -\\frac{\\partial\\psi}{\\partial x}\\frac{\\partial^2\\psi}{\\partial y^2} &amp;=\\frac{1}{2}x^{-1/2}(f^{\\dagger} -\\eta^{\\dagger} f^{\\dagger&#39;})\\left[x^{-1/2}f^{\\dagger&#39;&#39;}\\right] \\\\ &amp;= \\frac{1}{2}x^{-1}(f^{\\dagger} +\\eta^{\\dagger} f^{\\dagger&#39;})f^{\\dagger&#39;&#39;}\\\\ \\end{aligned} \\] As a result: \\[ \\begin{aligned} -\\frac{1}{2}x^{-1}\\eta^{\\dagger} f^{\\dagger&#39;}f^{\\dagger&#39;&#39;}+ \\frac{1}{2}x^{-1}(f^{\\dagger} &amp;+\\eta^{\\dagger} f^{\\dagger&#39;})f^{\\dagger&#39;&#39;} = \\nu x^{-1}f^{\\dagger&#39;&#39;&#39;}\\\\ \\Leftrightarrow \\qquad \\nu f^{\\dagger&#39;&#39;&#39;} - &amp;\\frac{1}{2} f^{\\dagger}f^{\\dagger&#39;&#39;} = 0 \\end{aligned} \\] Ok.. above is what I derived, it's still an ODE but normally we want a cleaner result. So Blasius construct \\(\\psi\\) and \\(\\eta\\) with physical meaningful non-dimensional parameters to get (reference to MECH 346 – Heat Transfer's Youtube channel): \\[ \\color{purple} \\psi(x,y)= (\\nu Ux)^{1/2}f(\\eta), \\quad \\eta = \\left(\\frac{U}{\\nu x}\\right)^{1/2}y \\] So that: \\[ \\begin{aligned} \\eta = \\sqrt{\\frac{U}{\\nu x}}y,&amp; \\quad\\mathrm{dimensionless~wall~normal~coordinate}\\\\ f = \\frac{\\psi}{\\sqrt{\\nu Ux}},&amp; \\quad\\mathrm{dimensionless~stream~function}\\\\ f&#39; = \\frac{u}{U},&amp; \\quad\\mathrm{dimensionless~velocity~profile} \\\\ f&#39;&#39; = \\frac{\\sqrt{\\nu Ux}}{U^2}\\partial_yu, &amp;\\quad\\mathrm{related~to~shear~stress} \\\\ \\end{aligned} \\] And terms of the governing equation becomes: \\[ \\begin{aligned} \\frac{\\partial\\psi}{\\partial y} &amp;= Uf&#39; \\\\ \\frac{\\partial^2\\psi}{\\partial y^2} &amp;= {(U\\nu x)}^{-1/2}f&#39;&#39; \\\\ \\frac{\\partial^3\\psi}{\\partial y^3}&amp;= U^2x^{-1}f&#39;&#39;&#39;\\\\ \\frac{\\partial\\psi}{\\partial x} &amp;= \\frac{1}{2}(\\nu U/x)^{1/2}(f -\\eta f&#39;)\\\\ \\frac{\\partial^2\\psi}{\\partial x \\partial y} &amp;=-\\frac{1}{2}Ux^{-1}\\eta f&#39;&#39; \\\\ \\frac{\\partial\\psi}{\\partial y}\\frac{\\partial^2\\psi}{\\partial x \\partial y} &amp;= -\\frac{1}{2}U^2x^{-1}\\eta f&#39;f&#39;&#39;\\\\ -\\frac{\\partial\\psi}{\\partial x}\\frac{\\partial^2\\psi}{\\partial y^2} &amp;= \\frac{1}{2}U^2x^{-1}(f +\\eta f&#39;)f&#39;&#39;\\\\ \\end{aligned} \\] And the ODE turns out to be: \\[ \\color{purple} 2f&#39;&#39;&#39; +ff&#39;&#39; = 0 \\] Resulting boundary condition is: \\[ \\color{purple} \\begin{aligned} f&#39; = 0\\quad &amp;at\\quad \\eta=0 \\quad\\mathrm{(no~slip)}\\\\ f = 0\\quad &amp;at\\quad \\eta=0 \\quad\\mathrm{(impenetrability)} \\\\ f&#39; = 1\\quad &amp;at\\quad \\eta\\rightarrow\\infty \\quad(u = U\\mathrm{~free stream}) \\\\ f&#39;&#39; = 0\\quad &amp;at\\quad \\eta\\rightarrow\\infty \\quad(\\partial_yu=0,\\mathrm{unnecessary}) \\\\ \\end{aligned} \\] 5.5.3 Solving the similarity solution Split the 3-order ODE into a set of 3 first order ODEs: \\[ \\left\\{\\begin{array}{l} f_p = f&#39; \\\\ f_{pp} = f_p&#39; \\\\ 2f&#39;_{pp} +ff_{pp} = 0 \\end{array}\\right. \\] with boundary conditions: \\[ \\begin{aligned} f_p = 0\\quad &amp;at\\quad \\eta=0 \\\\ f = 0\\quad &amp;at\\quad \\eta=0 \\\\ f_p = 1\\quad &amp;at\\quad \\eta\\rightarrow\\infty \\\\ f_{pp} = 0\\quad &amp;at\\quad \\eta\\rightarrow\\infty,\\mathrm{unnecessary} \\\\ \\end{aligned} \\] The third boundary condition has no closed form solution, so we need to solve it numerically. One method of doing it is guessing another initial condition \\(f_{pp} = ?\\) at \\(\\eta=0\\), integrating the equation from \\(\\eta=0\\) with Runge-Kutta method to meet the 3rd boundary condition i.e. transfer the boundary condition to the initial condition. Runge–Kutta method is an effective and widely used numerical method for solving the initial-value problems of differential equations. It integrated the function discretely from zero in small steps (\\(h\\)) in an order of 4 (more on LearnChemE's Youtube). \\[\\left\\{\\begin{array}{l}y_{n+1}=y_{n}+\\frac{1}{6}\\left(K_{1}+2 K_{2}+2 K_{3}+K_{4}\\right) \\\\K_{1}=h f\\left(x_{n}, y_{n}\\right) \\\\K_{2}=h f\\left(x_{n}+\\frac{1}{2} h, y_{n}+\\frac{1}{2} K_{1}\\right) \\\\K_{3}=h f\\left(x_{n}+\\frac{1}{2} h, y_{n}+\\frac{1}{2} K_{2}\\right) \\\\K_{4}=h f\\left(x_{n}+h, y_{n}+K_{3}\\right)\\end{array}\\right.\\] It turns out it meets the 3rd boundary condition when: \\[ f_{pp} = 0.332~at~ \\eta=0 \\] And the function looks like below: From the solution, we can see the stream function \\(f\\) first increases with a decreasing slop then approaches to a linear increase line. While the velocity profile \\(f&#39;\\) and shear stress \\(f&#39;&#39;\\) approach the 1 and 0 at the free stream respectively, Another method is solve \\(f_{pp}~at~ \\eta=0\\) directly numerically. And the solution is: \\[ f_{pp} = 0.332096~at~ \\eta=0 \\] More on MECH 346 – Heat Transfer's Youtube channel and MIT's note. 5.5.4 Blasius results As a consequence, similar to what we do based on the Von Kármán results result, recall the definition of the boundary layer: \\[ f_p = \\frac{u|_\\delta}{U} = 0.99 \\] It is easy to get the boundary layer thickness: \\[ \\begin{aligned} \\eta_1&amp;=\\sqrt{\\frac{U}{\\nu x}}\\delta\\approx5.0 \\\\ \\Rightarrow \\delta &amp;\\approx 5.0 \\sqrt{\\frac{\\nu x}{U}} \\\\ \\Rightarrow \\frac{\\delta}{x} &amp;\\approx 5.0 \\sqrt{\\frac{\\nu}{Ux}} \\\\ \\color{purple}{\\frac{\\delta}{x} }&amp;\\color{purple}{\\approx 5 Re_x^{-1/2}}\\\\ \\end{aligned} \\] with \\(\\color{purple}Re_x= Ux/\\nu\\) as the streamwise Reynolds number. the thickness displacement: \\[ \\begin{aligned} \\delta^* &amp;= \\int_0^\\delta\\left(1-\\frac{u}{U}\\right)dy \\\\ &amp;= \\sqrt{\\frac{\\nu x}{U}}\\int_0^{\\eta_1\\approx5.0 }\\left(1-f&#39;\\right)d\\eta \\\\ &amp;= \\sqrt{\\frac{\\nu x}{U}}\\left[\\eta_1 - f_1\\right]\\\\ \\end{aligned} \\] with \\(f_1 \\approx 3.283\\): \\[ \\begin{aligned} \\color{purple}\\frac{\\delta^*}{x}\\approx 1.721 Re_x^{-1/2} \\end{aligned} \\] the momentum displacement and the factor of friction: \\[ \\tau_w = \\rho\\nu\\frac{\\partial u}{\\partial y}|_{y=0} = \\rho\\nu U\\sqrt{\\frac{U}{\\nu x}}f&#39;&#39;(0) \\] with \\(f&#39;&#39;(0) \\approx 0.332\\): \\[ C_f = \\frac{\\tau_w}{1/2\\rho U^2} \\approx 0.664Re_x^{-1/2} \\] \\[ \\color{purple} \\frac{\\theta}{x} \\approx 0.664Re_x^{-1/2} \\] the shape factor: \\[ \\color{purple} H = \\frac{\\delta^*}{\\theta} \\approx 2.59 \\] 5.6 Validity of the laminar results The above results are based on the hypothesis that the boundary layer is thin enough so that the coupling with the outer flow is negligible. This theory breaks down as soon as \\(\\frac{\\delta}{x}=\\mathcal{O}(1)\\) i.e. \\(\\frac{\\delta}{x}&lt;0.1\\). As a result, based on the Blasius result, the upper limit of the streamwise Reynolds number depends on transition to turbulence writes \\[ 5Re_x^{-1/2}&lt;0.1\\\\ \\Rightarrow Re_{x,min} &gt; 2500 \\] For smaller \\(Re_x\\), the interaction with the outer flow is important and leads to departures from these results. Besides, at a threshold Reynolds number, the boundary layer becomes turbulent and the results above do not hold. This critical value of the Reynolds number is \\(Re_c\\approx 3 × 10^6\\). Usually, the surfaces are not smooth and transition occurs earlier, sometimes at Reynolds numbers as low as \\(10^5\\). 5.7 Comparison of the results Similar to what we do based on the Von Kármán results result, based on the Prandtl one-seventh power law, the turbulence results can be derived easily, here is the table of all results: Results \\(\\delta/x\\) \\(\\delta^*/x\\) \\(H\\) \\(c_f\\) Blasius laminar \\(5.0Re_x^{-1/2}\\) \\(1.72Re_x^{-1/2}\\) \\(2.59\\) \\(0.664Re_x^{-1/2}\\) Integral laminar \\(5.5Re_x^{-1/2}\\) \\(1.83Re_x^{-1/2}\\) \\(2.5\\) \\(0.73Re_x^{-1/2}\\) Error \\(10\\%\\) \\(6\\%\\) \\(3\\%\\) \\(10\\%\\) Integral turbulent \\(0.16Re_x^{-1/7}\\) \\(0.02Re_x^{-1/7}\\) \\(1.3\\) \\(0.027Re_x^{-1/7}\\) Several points: There is an error of less than 10% between integral and Blasius results. The boundary layer thickness \\(\\delta\\) grows like \\(x^{6/7}\\) for turbulent flows, which represents a faster growth than the \\(x^{1/2}\\) law for the laminar boundary layer. The viscous displacement thickness \\(\\delta^*\\) and the shape factor \\(H=\\delta^*/\\theta\\) for turbulent boundary layers is very small. The skin friction coefficient \\(c_f\\) is greater for turbulent boundary layers than for the laminar ones. Appendix A.1 Governing equation of boundary layers A.1.1 Scalings Started by scaling the spatial derivatives: \\[ \\partial_x \\sim \\frac{1}{L} \\qquad \\partial_y \\sim \\frac{1}{\\delta} \\] By the thin-layer condition: \\(L\\gg\\delta\\), we can introduce a small parameter \\(\\epsilon \\ll 1\\) as: \\[ \\frac{\\delta}{L} = \\epsilon \\] As a result, introduce the stream function \\(\\psi\\) under the conditions of 2D and incompressibility. The proportion of the streamwise and normal streamwise velocities \\(u, v\\) can be expressed as: \\[ \\frac{u}{v} = \\frac{\\partial_y\\psi}{-\\partial_x\\psi}\\sim\\frac{L}{\\delta} \\] which gives: \\[ \\Rightarrow \\quad v\\sim\\epsilon u \\] implying that the \\(v\\) is much smaller than \\(u\\). Then rescale the wall normal quantities according to the streamwise quantities: \\[ \\begin{aligned} x^* &amp;= \\frac{x}{L} \\\\ y^* &amp;= \\frac{y}{\\delta} = \\frac{y}{\\epsilon L}\\\\ u^* &amp;= \\frac{u}{U} \\\\ v^* &amp;= \\frac{v}{\\epsilon U} \\\\ p^* &amp;= \\frac{p}{\\rho U^2} \\end{aligned} \\] In this case, \\(p^*\\) can be thought of as a mathematical function to ensure incompressibility of the scaled function. A.1.2 Asymptotic derivation Substitute the scaled variables into the governing equations: \\[ \\begin{aligned} \\frac{U}{L} \\partial_{x^{*}} u^{*}+\\frac{\\epsilon U}{\\epsilon L} \\partial_{y^{*}} v^{*} &amp;= 0 \\\\ \\frac{U^{2}}{L} u^{*} \\partial_{x^{*}} u^{*}+\\frac{U^{2}}{L} v^{*} \\partial_{y^{*}} u^{*}&amp;=-\\frac{ U^{2}}{L} \\partial_{x^{*}} p^{*}+\\nu\\left(\\frac{U}{L^{2}} \\partial_{x^{*}}^{2} u^{*}+\\frac{U}{\\epsilon^{2} L^{2}} \\partial_{y^{*}}^{2} u^{*}\\right) \\\\ \\frac{\\epsilon U^{2}}{L} u^{*} \\partial_{x^{*}} v^{*}+\\frac{\\epsilon U^{2}}{L} v^{*} \\partial_{y^{*}} v^{*} &amp;=-\\frac{ U^{2}}{\\epsilon L} \\partial_{y^{*}} p^{*}+\\nu\\left(\\frac{\\epsilon U}{L^{2}} \\partial_{x^{*}}^{2} v^{*}+\\frac{U}{\\epsilon L^{2}} \\partial_{y^{*}}^{2} v^{*}\\right) \\end{aligned} \\] Can be simplified into: \\[ \\begin{aligned} \\partial_{x^{*}} u^{*}+\\partial_{y^{*}} v^{*} &amp;= 0 \\\\ u^{*} \\partial_{x^{*}} u^{*}+v^{*} \\partial_{y^{*}} u^{*} &amp;=-\\partial_{x^{*}} p^{*}+\\frac{1}{Re_{L}} \\partial_{x^{*}}^{2} u^{*}+\\frac{1}{\\epsilon^{2} Re_{L}} \\partial_{y^{*}}^{2} u^{*} \\\\ u^{*} \\partial_{x^{*}} v^{*}+v^{*} \\partial_{y^{*}} v^{*} &amp;=-\\frac{1}{\\epsilon^{2}} \\partial_{y^{*}} p^{*}+\\frac{1}{Re_{L}} \\partial_{x^{*}}^{2} v^{*}+\\frac{1}{\\epsilon^{2} Re_{L}} \\partial_{y^{*}}^{2} v^{*} \\end{aligned} \\] where \\(Re_L = UL/\\nu\\) To keep a balance between the advection(LHS) and diffusion (RHS), impose: \\[ \\epsilon^2Re_L=1 \\\\ \\Rightarrow \\epsilon = \\frac{\\delta}{L}=Re_L^{-1/2} \\] As a result, the leading order of the system is: \\[ \\begin{aligned} \\partial_{x^{*}} u^{*}+\\partial_{y^{*}} v^{*} &amp;= 0 \\\\ u^{*} \\partial_{x^{*}} u^{*}+v^{*} \\partial_{y^{*}} u^{*} &amp;=-\\partial_{x^{*}} p^{*}+\\partial_{y^{*}}^{2} u^{*} \\\\ 0&amp;=\\partial_{y^{*}} p^{*} \\end{aligned} \\] A.2 Solving the heat equation using similarity solution References：Dr Chris Tisdell's Youtube, UCL's class note. Given PDE with boundary and initial conditions: \\[ \\begin{aligned} \\frac{\\partial u}{\\partial t} =&amp; k\\frac{\\partial^2 u}{\\partial x^2}\\\\ u(x,0)=0, &amp;\\quad x&gt;0\\\\ u(x,t)\\rightarrow0, &amp;\\quad x\\rightarrow\\infty \\\\ \\partial_x u(0,t)=N, &amp;\\quad t&gt;0 \\end{aligned} \\] Determine a set of transformations: \\[ \\begin{aligned} x &amp;= \\lambda^a\\bar{x}\\\\ t &amp;= \\lambda^b\\bar{t}\\\\ u &amp;= \\lambda^c\\bar{u}\\\\ \\end{aligned} \\] Substitute into the equation: \\[ \\begin{aligned} \\lambda^{c-b}\\frac{\\partial \\bar{u}}{\\partial \\bar{t}} = \\lambda^{c-2a}k\\frac{\\partial^2 \\bar{u}}{\\partial \\bar{x}^2} \\\\ \\frac{\\partial \\bar{u}}{\\partial \\bar{t}} = \\lambda^{-2a+b}k\\frac{\\partial^2 \\bar{u}}{\\partial \\bar{x}^2} \\end{aligned} \\] Boundary condition: \\[ \\begin{aligned} \\frac{\\partial u}{\\partial x} =N, \\quad t&gt;0 \\\\ \\lambda^{c-a}\\frac{\\partial \\bar{u}}{\\partial \\bar{x}}=N \\end{aligned} \\] As a result: \\[ \\begin{aligned} -2a+b &amp;= 0 \\\\ c-a&amp;=0 \\end{aligned} \\] Determin \\(s\\) and \\(r\\) such that: \\[ \\bar{x\\vphantom{t}}\\bar{t}^s=xt^s\\qquad \\bar{u\\vphantom{t}}\\bar{t}^r = ut^r \\] Substitute we have: \\[ \\begin{aligned} \\bar{x\\vphantom{t}}\\bar{t}^s&amp;=xt^s \\\\ \\bar{x\\vphantom{t}}\\bar{t}^s &amp;= \\lambda^{a+sb}\\bar{x\\vphantom{t}}\\bar{t}^s \\\\ \\Rightarrow \\quad s &amp;= -a/b = -1/2 \\end{aligned} \\] and， \\[ \\begin{aligned} \\bar{u\\vphantom{t}}\\bar{t}^r&amp;=ut^r \\\\ \\bar{u\\vphantom{t}}\\bar{t}^r &amp;= \\lambda^{c+rb}\\bar{x\\vphantom{t}}\\bar{t}^r = \\lambda^{(c+2ar)}\\bar{x\\vphantom{t}}\\bar{t}^r\\\\ \\Rightarrow \\quad r &amp;= -c/b = -1/2 \\end{aligned} \\] With two terms unchanged by the transformation. A solution combines these two terms can be constructed as： \\(u(x,t) = t^{-r}f(xt^s) = t^{-r}f(\\eta)\\): \\[ \\begin{aligned} u(x,t) = t^{c/b}f(\\eta), \\quad\\mathrm{where~}\\eta = xt^{-a/b} \\\\ \\Leftrightarrow\\quad u(x,t) = t^{1/2}f(\\eta),\\quad\\mathrm{where~}\\eta = \\frac{x}{t^{1/2}} \\end{aligned} \\] Note that \\(u(x,t) = t^{c/b}f(\\eta), \\quad \\eta = xt^{-a/b}\\) is a general solution and it suits for every conditions. Substitute into the original function to get a ODE: \\[ \\begin{aligned} \\frac{\\partial u}{\\partial t} &amp;= \\frac{1}{2}t^{-1/2}f - \\frac{1}{2}t^{-1}xf&#39; \\\\ &amp;= \\frac{1}{2}t^{-1/2}f - \\frac{1}{2}t^{-1/2}\\eta f&#39;\\\\&amp;=\\frac{1}{2}t^{-1/2}\\left(f-\\eta f&#39;\\right)\\\\ \\frac{\\partial^2 u}{\\partial x^2} &amp;= t^{-1/2}f&#39;&#39;\\\\ \\end{aligned} \\] The resulting equation is therefore: \\[ \\begin{aligned} &amp;\\frac{1}{2}t^{-1/2}\\left(f-\\eta f&#39;\\right)= kt^{-1/2}f&#39;&#39; \\\\ \\Leftrightarrow\\quad&amp; \\frac{1}{2}\\left(f-\\eta f&#39;\\right)= kf&#39;&#39; \\\\ \\Leftrightarrow\\quad&amp; 2kf&#39;&#39;+\\eta f&#39;-f = 0 \\end{aligned} \\] The following work is solving this ODE, which is illustrated more on UCL's class note.","categories":[],"tags":[{"name":"fluid dynamics","slug":"fluid-dynamics","permalink":"https://daydreamatnight.github.io/tags/fluid-dynamics/"}],"author":"Ryan LI"},{"title":"Internal flow fundamentals","slug":"Internal-flow-fundamentals","date":"2022-05-20T16:24:41.000Z","updated":"2022-05-28T02:55:29.630Z","comments":true,"path":"2022/05/21/Internal-flow-fundamentals/","link":"","permalink":"https://daydreamatnight.github.io/2022/05/21/Internal-flow-fundamentals/","excerpt":"Feeling good deriving the basics, continue to review the following content.","text":"Feeling good deriving the basics, continue to review the following content. 1 Flow regimes — case study of duct flow 1.1 Examples of duct flows 1.1.1 Oil extraction Upon finding a natural oil reservoir, several techniques are employed to extract the oil. Drilling a long hole into the Earth and placing a duct in, the oil reservoir possesses a higher pressure then the atmosphere thus the oil is pushed upwards along the duct. Steam injection, drilling a second hole to inject steam, the addition of steam increase the pressure and push the oil further upwards. The increase in temperature reduces the viscosity. 1.1.2 Pipeline transport Transport systems designed to bring the oil to storage or treatment sites face many challenges. Take Trans-Alaska Pipeline System (TAPS) as an example, oil extracted is substantially warmer than anything at the surface, the permafrost (frozen ground) may warm up and become unstable. To avoid this , radiators have beed placed next to the pipeline. Besides, drag-reducing agents DRA are mixed with the oil to reduce the viscous drag produced by the massive turbulent flow inside. 1.1.3 Biological flow The cerebral blood flow in the cortex can be modelled through a complex assembly of ducts, mimicking the vessel network present in the brain. Experimental data coupled with numerical simulations can then provide prediction of the pressure map in the brain.Access to these results can then be used to predict the risks of blockage or damage of the vessels and thus of brain stroke. 1.2 Reynolds number In 1883, Osbourne Reynolds published his famous pipe flow experiment. He placed a pipe within a tank full of water. The water entered in the pipe through a converging cone to decrease the impact of entrance effects and the flow rate is controled by a valve. Aligned with the entrance of the pipe is a needle connected to a dye container. As the desired flow rate is reached, dye is injected within the pipe to trace out the fluid’s trajectory. In addition to making these observations, it is possible to characterise these different regimes in a simple manner, the quantities that influence the flow are: pipe diameter \\(l\\): \\([l]=L\\) fluid's velocity \\(u\\): \\([u]=LT^{-1}\\) fluid's density \\(\\rho\\): \\([\\rho] = mL^{-3}\\) fluid's dynamic viscosity \\(\\mu\\): \\([\\mu]=mL^{-1}T^{-1}\\) Combine these quantities to obtain a dimensionless number called Reynolds number, \\[ \\color{purple} Re = \\frac{\\rho V L}{\\mu} \\] With Reynolds number, 3 regimes of flow can be defined: Laminar flows: \\(0&lt;Re&lt;1000\\) Transitional flows: \\(1000&lt;Re&lt;4000\\) Turbulent flows: \\(4000&lt;Re\\) The intermittent bursts of turbulence displayed in the transitional regime are the signature of the passage of turbulent puffs. They can be observed by direct numerical simulation, like the figure above for Re = 2300. The upstream edge of the puff is well-defined, while the downstream edge is elongated and fuzzy. Puffs typically evolve in two different ways: Vanishing and decaying down to the laminar state or splitting, leading to an increasingly large turbulent fraction in the flow. Puffs decay rapidly in the laminar regime and split frequently in the turbulent regime, but they remain long-lived in the transitional one. The lifetime of a puff before decaying and splitting in pipe flow is studied as a function of Reynolds number, and the results are shown below. It is confirmed that the puffs are long-lived over a wide range of \\(Re\\)s. Importantly, there is an intersection between the decay and the splitting lifetime curves. This intersection provides a well-defined legitimate threshold between laminar and turbulent flows: \\(Re_c≈ 2040\\). 1.3 Other considerations 1.3.1 Newtonian/non-Newtonian fluids Water and air all follow the rule of constant viscosity, that is, the wall shear stress is \\(\\mu\\) proportional to the normal velocity gradient (shear, strain rate): \\[ \\tau = \\mu\\partial_nu \\] But not all types of fluids follow this law, as seen below. Shear thinning: ketchup, becoming less and less viscous as they are stirred. Shear thickening: corn starch, getting much harder to strain as they receive more stress. Mayonnaise: tooth paste, possessing a threshold stress below which they behave like solids and above which their rheological law is linear. If you hang the open container upside down, it will not flow. An additional force is needed on the container to create a flow. More complicated, Herschel–Bulkley fluids (e.g. paint) or even time-dependent visco-elastic fluids (e.g. polymers). 1.3.2 Compressibility When the flow speed reach the speed of sound, the fluid becomes compressible, meaning the density becomes variant in time and space. The best unidimensional quantity to describe this threshold is called Mach number: \\[ Ma = \\frac{u}{c} \\] where the \\(c\\) is the speed of sound, and the flowing regimes are observed defined by \\(Ma\\). \\(0&lt;Ma&lt;0.3\\): incompressible flows. \\(0.3&lt;Ma&lt;1\\): compressible subsonic flows. \\(1&lt;Ma\\): compressible supersonic flows. 2 Laminar flow cases 2.1 Incompressible framework 2.1.1 The Navier-Stokes equation The incompressible Navier–Stokes equation describes the motion of fluids under external forces. It writes: \\[ \\color{purple} \\frac{\\partial \\mathbf{V}}{\\partial t}+\\mathbf{V}\\cdot\\boldsymbol{\\nabla} \\mathbf{V} = \\mathbf{f} -\\frac{1}{\\rho}\\boldsymbol{\\nabla} p + \\nu\\boldsymbol{\\nabla}^2\\mathbf{V} \\] The left-hand-side of the Navier–Stokes equation represents inertia. It involves the rate of change of the velocity with time ∂tu as well as advection (u · ∇) u. The latter term quantifies how the fluid is transported by the flow velocity. In an equation such as the heat equation, this term applies to the temperature T, reads (u · ∇) T and quantifies how temperature is transported by the flow velocity. The right-hand-side represents all the forces acting on the fluid. In addition to the external forces f that we will not take into account in this Chapter, the other terms come from the divergence of the stress tensor. They include the pressure gradient −∇p that translates the fact that the fluid is attracted to low pressure regions and the viscous force μ∇2u quantifying the internal friction between in the fluid. 2.1.2 Continuity equation Recall the mass conservation equation in the Eulerian frame of reference, \\[ \\frac{\\partial\\rho}{\\partial t} + \\boldsymbol{\\nabla}\\cdot(\\rho\\mathbf{V})=0 \\] And with the incompressibility consumption, \\[ \\color{purple} \\boldsymbol{\\nabla}\\cdot\\mathbf{V} = 0 \\] 2.1.2 Additional hypotheses In the laminar flow regime, it is common to assume the flow as: steady: \\(\\partial_t=0\\) unidirectional: the flow is parallel the to walls symmetry: the flow is further simplified using the symmetries of the geometry 2.2 Pipe flow 2.2.1 Cylindrical coordinate In cylindrical coordinate, the velocity: \\[ \\mathbf{V} = u_r\\mathbf{\\hat {r}}+u_\\theta\\boldsymbol{\\hat {\\theta}}+u_z\\mathbf{\\hat {z}} \\] The line element writes: \\[ ds = dr\\mathbf{\\hat{r}} + rd\\theta\\boldsymbol{\\hat{\\theta}}+dz\\mathbf{\\hat{z}} \\] The gradient operator： \\[ \\boldsymbol{\\nabla} = \\partial_r\\mathbf{\\hat {r}}+\\frac{1}{r}\\partial_\\theta\\boldsymbol{\\hat {\\theta}}+\\partial_z\\mathbf{\\hat {z}} \\] And the directions change with \\(\\theta\\), as a consequence: \\[ \\partial_\\theta\\mathbf{\\hat{r}} = \\boldsymbol{\\hat {\\theta}}, \\qquad \\partial_\\theta\\boldsymbol{\\hat {\\theta}} = -\\mathbf{\\hat{r}} \\] Some useful equations: $$ \\[\\begin{aligned} \\boldsymbol{\\nabla} \\cdot \\mathbf{V} =&amp; \\frac{1}{r}\\partial_r(ru_r)+ \\frac{1}{r}\\partial_\\theta(u_\\theta) + \\partial_z(u_z) \\\\ (\\mathbf{V}\\cdot\\boldsymbol{\\nabla})\\mathbf{V} =&amp;\\left(u_{r} \\partial_{r} u_{r}+\\frac{u_{\\theta}}{r} \\partial_{\\theta} u_{r}-\\frac{u_{\\theta}^{2}}{r}+u_{z} \\partial_{z} u_{r}\\right) \\hat{\\mathbf{r}} \\\\ &amp;+\\left(u_{r} \\partial_{r} u_{\\theta}+\\frac{u_{r} u_{\\theta}}{r}+\\frac{u_{\\theta}}{r} \\partial_{\\theta} u_{\\theta}+u_{z} \\partial_{z} u_{\\theta}\\right) \\boldsymbol{\\hat{\\theta}}\\\\ &amp;+\\left(u_{r} \\partial_{r} u_{z}+\\frac{u_{\\theta}}{r} \\partial_{\\theta} u_{z}+u_{z} \\partial_{z} u_{z}\\right) \\hat{\\mathbf{z}}\\\\ \\boldsymbol{\\nabla}^2\\mathbf{V}=&amp;\\left[\\frac{1}{r} \\partial_{r}\\right.\\left.\\left(r \\partial_{r} u_{r}\\right)+\\frac{1}{r^{2}} \\partial_{\\theta}^{2} u_{r}-\\frac{u_{r}}{r^{2}}-\\frac{2}{r^{2}} \\partial_{\\theta} u_{\\theta}+\\partial_{z}^{2} u_{r}\\right] \\hat{\\mathbf{r}} \\\\ &amp;+ {\\left[\\frac{1}{r} \\partial_{r}\\left(r \\partial_{r} u_{\\theta}\\right)+\\frac{2}{r^{2}} \\partial_{\\theta} u_{r}+\\frac{1}{r^{2}} \\partial_{\\theta}^{2} u_{\\theta}-\\frac{u_{\\theta}}{r^{2}}+\\partial_{z}^{2} u_{\\theta}\\right] \\boldsymbol{\\hat{\\theta} }} \\\\ &amp;+ {\\left[\\frac{1}{r} \\partial_{r}\\left(r \\partial_{r} u_{z}\\right)+\\frac{1}{r^{2}} \\partial_{\\theta}^{2} u_{z}+\\partial_{z}^{2} u_{z}\\right] \\hat{\\mathbf{z}} } \\\\ \\end{aligned}\\] $$ 2.2.2 Governing equations Continuity equation: \\[ \\frac{1}{r}\\partial_r(ru_r)+ \\frac{1}{r}\\partial_\\theta(u_\\theta) + \\partial_z(u_z) = 0 \\] Navier–Stokes equation: \\[ \\begin{aligned} \\rho\\left[\\partial_{t} u_{r}\\right.&amp;\\left.+u_{r} \\partial_{r} u_{r}+\\frac{u_{\\theta}}{r} \\partial_{\\theta} u_{r}-\\frac{u_{\\theta}^{2}}{r}+u_{z} \\partial_{z} u_{r}\\right]=-\\partial_{r} p \\ldots \\\\ &amp;+\\mu\\left[\\frac{1}{r} \\partial_{r}\\left(r \\partial_{r} u_{r}\\right)+\\frac{1}{r^{2}} \\partial_{\\theta}^{2} u_{r}-\\frac{u_{r}}{r^{2}}-\\frac{2}{r^{2}} \\partial_{\\theta} u_{\\theta}+\\partial_{z}^{2} u_{r}\\right] \\\\ \\rho\\left[\\partial_{t} u_{\\theta}\\right.&amp;\\left.+u_{r} \\partial_{r} u_{\\theta}+\\frac{u_{r} u_{\\theta}}{r}+\\frac{u_{\\theta}}{r} \\partial_{\\theta} u_{\\theta}+u_{z} \\partial_{z} u_{\\theta}\\right]=-\\frac{1}{r} \\partial_{\\theta} p \\ldots \\\\ &amp;+\\mu\\left[\\frac{1}{r} \\partial_{r}\\left(r \\partial_{r} u_{\\theta}\\right)+\\frac{2}{r^{2}} \\partial_{\\theta} u_{r}+\\frac{1}{r^{2}} \\partial_{\\theta}^{2} u_{\\theta}-\\frac{u_{\\theta}}{r^{2}}+\\partial_{z}^{2} u_{\\theta}\\right] \\\\ \\rho\\left[\\partial_{t} u_{z}\\right.&amp;\\left.+u_{r} \\partial_{r} u_{z}+\\frac{u_{\\theta}}{r} \\partial_{\\theta} u_{z}+u_{z} \\partial_{z} u_{z}\\right]=-\\partial_{z} p \\ldots \\\\ &amp;+\\mu\\left[\\frac{1}{r} \\partial_{r}\\left(r \\partial_{r} u_{z}\\right)+\\frac{1}{r^{2}} \\partial_{\\theta}^{2} u_{z}+\\partial_{z}^{2} u_{z}\\right] \\end{aligned} \\] 2.2.3 Solution Boundary conditions, no-slip walls: \\[ \\mathbf{V}|_{r=R} = \\mathbf{0} \\] Further assumptions: no radial motion: \\(u_r = 0\\) no spiralling motion: \\(u_\\theta = 0\\) axisymmetric flow: \\(\\partial_\\theta\\mathbf{V}=0\\) As a result, the velocity becomes unidirectional and not vary with \\(\\theta\\): \\[ \\mathbf{V} = u_z(r,z)\\mathbf{\\hat{z}} \\] Then the Navier–Stokes equations is reduced to: \\[ \\begin{aligned} \\partial_zu_z&amp;=0 \\\\ \\partial_rp &amp;= \\partial_\\theta p = 0 \\end{aligned} \\] Together with above hypotheses the governing equation become: \\[ \\begin{aligned} \\mathbf{V}=u_z{r}\\mathbf{\\hat{z}} \\\\ p = p(z) \\end{aligned} \\] Lastly, the Navier-Stokes equation in the streamwise direction reduces to: \\[ 0 = -\\partial_zp+\\frac{\\mu}{r}\\partial_r(r\\partial_ru_z) \\] Note that the derivation of the equation above w.r.t. \\(z\\) leads to \\(\\partial^2_zp=0~( \\partial_zp=Const.)\\) The solution of the N-S equation above is: \\[ \\begin{aligned} &amp;\\frac{\\partial}{\\partial r}(r\\frac{\\partial u_z}{\\partial r})=r\\frac{\\partial p}{\\mu\\partial z} \\\\ \\Rightarrow\\quad&amp; \\frac{\\partial u_z}{\\partial r}=\\frac{r}{2}\\frac{\\partial p}{\\mu\\partial z}+\\frac{k_1}{r}\\\\ \\Rightarrow\\quad&amp; u_z=\\frac{r^2}{4}\\frac{\\partial p}{\\mu\\partial z}+k_1\\ln{r} + k_2 \\end{aligned} \\] To avoid the singularity on \\(r=0\\), \\(k_1=0\\), and \\(k_2\\) is determined by the boundary condition: \\[ \\begin{aligned} &amp;\\mathbf{V}|_{r=R} = \\mathbf{0}\\\\ \\Rightarrow\\quad &amp;u_z|_{r=R}=\\frac{R^2}{4}\\frac{\\partial p}{\\mu\\partial z} + k_2 = 0 \\\\ \\Rightarrow\\quad &amp;k_2 = -\\frac{R^2}{4}\\frac{\\partial p}{\\mu\\partial z} \\end{aligned} \\] The governing function of laminar pipe flow, also know as Poiseuille flow is therefore a quadratic law: \\[ \\color{purple} u_z=\\frac{R^2\\partial_z p}{4\\mu}\\left(\\frac{r^2}{R^2}-1\\right) \\] Assumptions:Laminar flowIncompressibleSteadyHomogeneous in \\(r\\) and \\(\\theta\\) directionsviscous 2.2.4 Some characteristic quantities The max velocity is reached at the centre of the pipe: \\[ u_z|_{max} = u_z(0) z=-\\frac{R^2\\partial_z p}{4\\mu} \\] The minus sign shows that the flow goes against the pressure gradient, from the high pressure to the low pressure regions. The average velocity can be calculated as: \\[ \\begin{aligned} u_z|_{avg} &amp;= \\frac{1}{\\pi R^2}\\int_0^R\\left[\\frac{R^2\\partial_z p}{4\\mu}\\left(\\frac{r^2}{R^2}-1\\right)\\right]2\\pi rdr \\\\ &amp;= -\\frac{R^2\\partial_z p}{8\\mu} \\\\ &amp;=\\frac12u_z|_{max} \\end{aligned} \\] The flow rate: \\[ \\begin{aligned} Q &amp;= A u_z|_{avg} \\\\ &amp;=-\\frac{\\pi R^4\\partial_z p}{8\\mu} \\end{aligned} \\] If the total pressure drop in the pipe with a length of \\(L\\) has a value: \\[ \\Delta p = \\partial_zpL \\] The flow rate is therefore: \\[ Q = -\\frac{\\pi R^4 \\Delta p}{8\\mu L} \\] And the wall shear stress is: \\[ \\begin{aligned} \\tau_{w} &amp;= \\mu \\partial_r u_z|_{r = R} \\\\ &amp;= -\\frac{R\\Delta p}{2L} \\end{aligned} \\] Note that \\(\\tau_w\\) can be related with the average velocity, and therefore the flow rate: \\[ \\tau_w =\\frac{4\\mu u_z|_{avg}}{R} \\] 2.3 Other cases 2.3.1 Non-viscous pipe flow Inviscid flows are yielded by the Euler function (ignore the body force): \\[ \\partial_t\\mathbf{V}+\\mathbf{V}\\cdot\\boldsymbol{\\nabla}\\mathbf{V} = -\\frac{1}{\\rho}\\boldsymbol{\\nabla} p \\] and the continuity function: \\[ \\boldsymbol{\\nabla}\\cdot\\mathbf{V} = 0 \\] And because of the inviscid condition, the boundary equation at the wall is stated as \"free-slip\", instead of the \"no-slip\" condition: \\[ u_r|_{r=R}=0\\qquad\\partial_ru_\\theta|_{r=R} = 0\\qquad \\partial_ru_z|_{r=R}=0 \\] The incompressibility constraint simplifies into: \\[ \\begin{aligned} &amp;\\partial_zu_z=0 \\\\ \\Rightarrow\\quad&amp;\\partial_z=Const. \\end{aligned} \\] Assumptions:Laminar flowIncompressibleSteadyHomogeneous in \\(r\\) and \\(\\theta\\) directionsinviscid The maximum and average values are equal: \\[ u_z|_{max} = u_z|_{avg} = u_z \\] and the flow rate is: \\[ Q = Au_z = \\pi R^2u_z \\] And there is no friction shear stress at walls. 2.3.2 Channel flow Channel flow describes a three-dimensional flow confined between two parallel plates and driven similarly to pipe flow by a pressure gradient. Assumptions:Laminar flowIncompressibleSteadyHomogeneous in \\(x\\) and \\(z\\) directionsviscous Similar to the Poiseuille flow, yet in the cartesian coordinate, the velocity is defined as: \\[ \\mathbf{V} = u_x(y)\\mathbf{\\hat{x}} \\] And the N-S equation is reduced to: \\[ 0 = -\\partial_xp+\\mu\\partial_y^2u_x \\] with the boundary conditions: \\[ \\mathbf{V}|_{y=\\pm h} = \\mathbf{0} \\] The velocity is therefore: \\[ \\color{purple} u_x = \\frac{\\partial_xph^2}{2\\mu}\\left(\\frac{y^2}{h^2}-1\\right) \\] This is also called plane Poiseuille flow. 2.3.3 Plane Couette flow Plane Couette flow describes a three-dimensional flow confined between two parallel plates yet driven by sliding walls. Same assumptions are adopted as the channel flow. Similar to the channel flow, the velocity governing equation is: \\[ 0 = \\mu\\partial_y^2u_x \\] Yet the boundary conditions are changed to be: \\[ \\begin{aligned} &amp;u_x|_{y=h} = U \\\\ &amp;u_x|_{y=-h} = -U \\end{aligned} \\] As the velocity function become: \\[ \\color{purple} u_x =- \\frac{ U}{h}y \\] 3 Viscous losses 3.1 Pressure drop 3.1.1 Experimental evidence In 1839, Hagen studied water flows in long brass pipes and hinted at the possible existence of two different regimes of viscous flows: laminar and turbulent. He characterised, in particular, laminar flows through the following law: \\[ \\Delta p = k\\frac{LQ}{R^4}+\\mathrm{entrance~effects} \\] where \\(k = Const.\\), \\(L\\) is the length of the pipe, \\(Q\\) the flow rate and \\(R\\) the radius of the pipe. As he increased Q beyond a certain threshold, Hagen observed that this law broke down, and deduced the existence of a second regime. This experimental observations are easily reproduced and the results sketched in figure below. 3.1.2 Dimensional analysis We consider a laminar flow in a horizontal pipe for which density and gravity effects are negligible. The dimensions of related quantities are: pressure drop \\(\\Delta p\\): \\([\\Delta p] = [ML^{-1}T^{-2}]\\) flow rate \\(Q\\): \\([Q]=[L^3T^-1]\\) pipe length \\(L\\): \\([L]=[L]\\) pipe radius \\(R\\):\\([R]=[L]\\) fluid's dynamic viscosity \\(\\mu\\): \\([\\mu]=[ML^-1T^-1]\\) As the pressure gradient is constant along the pipe and the flow fully characterised by the radial direction only, we can write \\[ \\frac{\\Delta p}{L}=\\mathcal{F}(Q, R, \\mu) \\] We note that the left-hand-side has dimension proportional to a mass M and that only the dynamic viscosity has dimension proportional to a mass. We can then divide by the dynamic viscosity to get rid of this dimension. \\[ \\frac{\\Delta p}{\\mu L}=\\mathcal{F}(Q, R) \\] Similarly, to get rid of the length dimension, multiply by \\(R\\). Then divide by \\(R^3\\). \\[ \\frac{\\Delta p R}{\\mu L}=\\mathcal{F}(\\frac{Q}{R^3}) \\] At this stage, both the left-hand-side and the right-hand-side terms are both homogeneous to the inverse of a time. Upon dividing the one by the other, we obtain the following relationship: \\[ \\frac{\\Delta p R^4}{\\mu LQ}=Const. \\] which provide the following pressure loss drop law: \\[ \\Delta p = C_{onst.} \\mu\\frac{ LQ}{ R^4} \\] This law is very similar to that obtained experimentally by Hagen. In particular, it shows that Hagen’s constant \\(k\\) is homogeneous to a dynamic viscosity. 3.1.3 Theoretical answer Recall the streamwise velocity reads: \\[ u_z=\\frac{R^2\\partial_z p}{4\\mu}\\left(\\frac{r^2}{R^2}-1\\right) \\] giving the following flow rate: \\[ Q = -\\frac{\\pi R^4\\Delta p}{8\\mu L} \\] And the $p $ as a function of \\(Q,R,\\mu,L\\) reads: \\[ \\color{purple} \\Delta p = \\frac{8}{\\pi}\\mu\\frac{LQ}{R^4} \\] 3.2 Head loss 3.2.1 The Bernoulli equation As a result of the friction between the fluid and the wall, the energy and head decrease between these two sections. We take this into account by adding a term to the Bernoulli equation as: \\[ \\frac{p_1}{\\rho g}+\\frac{u_1^2}{2g}+z_1 = \\frac{p_2}{\\rho g}+\\frac{u_2^2}{2g}+z_2+h_f \\] where \\(h_f\\) is called head loss and accounts for the viscous dissipation. The equivalent loss of energy per unit volume is \\(\\rho ghf\\). Relevantly, \\(\\frac{p}{\\rho g}\\) is called pressure head and \\(\\frac{u^2}{2g}\\) is called kinetic head. Conditions:SteadyIncompressibleStreamwiseViscous. 3.2.2 Application to pipe flow Given a inclined laminar pipe. The velocity of the fluid is invariant with the streamwise direction \\(x\\), so \\(u_1= u_2\\). We can then express the head loss: \\[ h_f = \\frac{\\Delta p}{\\rho g}+\\Delta z \\] Apply the momentum equation for the control volume shown above: \\[ \\Sigma F_x = \\rho\\pi R^2\\left(u_{2avg}^2-u_{1avg}^2\\right) \\] There are three forces acting on the fluid in the x direction： pressure: \\(\\Delta p\\pi R^2\\) weight: \\(\\rho L \\pi R^2 \\sin(\\phi)g\\) shear: \\(-\\tau_w2\\pi RL\\) Additionally, with constant fluid velocity i.e. \\(u_{1avg} = u_{2avg}\\), the momentum equation can be simplified as: \\[ \\Delta p\\pi R^2+\\rho L \\pi R^2 \\sin(\\phi)g-\\tau_w2\\pi RL=0 \\] as a result: \\[ \\frac{\\Delta p}{\\rho g}+\\Delta z = \\frac{2\\tau_wL}{\\rho gR} \\] and the head loss therefore writes: \\[ \\color{purple} h_f = \\frac{2\\tau_wL}{\\rho gR} = \\frac{4\\tau_wL}{\\rho gd} \\] Recall the wall shear for the Poiseuille flow, \\(\\tau_w =\\frac{4\\mu u_{avg}}{R}\\) \\[ \\color{purple} h_f = \\frac{8\\mu u_{avg} L}{\\rho gR^2} = \\frac{32\\mu u_{avg} L}{\\rho gd^2} \\] 3.2.3 Physical interpretation We can experimentally observe quantities related to the Bernoulli equation. Static pressure tubes directly connected to the side of the pipe directly observe the pressure head \\(p/ρg\\). When this quantity is summed with the altitude \\(z\\) and tracked along the pipe, we obtain the hydraulic grade line. The use of Pitot tubes provides additional information: as they are oriented in the direction of the flow, they are sensitive to the fluid’s velocity and include the kinetic head \\(u^2/2g\\). The line obtained by summing the kinetic head together with the pressure head and the altitude is called energy grade line. When viscous effects are non-negligible, the head loss can be observed as loss of pressure and therefore as a drop for both lines. This situation is depicted below: 3.2.4 General formulae (Turbulent flow) The theory above only describes the steady laminar flow, but flows are often turbelent in applications. A need for general expression of head loss arose. In 1850, Weisbach used physical intuition to lead the way to a unifying theory. He realised that the head loss was proportional to \\(L/d\\) and also approximately proportional to \\(u_{avg}^2\\) experimentally for turbulent flows. He then suggested the following relationship: \\[ \\color{purple} h_f = f\\frac{L}{d}\\frac{u_{avg}^2}{2g} \\] where f is a non-dimensional parameter called Darcy friction factor. Still out of physical intuition, he precised that the friction factor depend on the Reynolds number, the duct shape and the roughness of the wall for turbulent flows. For laminar flow in a pipe: \\[ \\begin{aligned} \\frac{32 \\mu u_{a v g} L}{\\rho g d^{2}} &amp;=f_{l a m} \\frac{L}{d} \\frac{u_{a v g}^{2}}{2 g} \\\\ \\Rightarrow f_{l a m} &amp;=\\frac{64 \\mu u_{a v g} L d g}{\\rho g d^{2} L u_{a v g}^{2}}, \\\\ \\Rightarrow f_{\\text {lam }} &amp;=\\frac{64 \\mu}{\\rho d u_{a v g}} \\\\ \\Rightarrow \\color{purple}{f_{l a m} }&amp; \\color{purple}{=\\frac{64}{R e_{d}}} \\end{aligned} \\] where \\(Re_d\\) denotes the Reynolds number based on the diameter of the pipe For turbulent flow: No theoretical or experimental laws, in 1939, Colebrook provided an interpolation formula of empirical data: \\[ \\frac{1}{f^{1 / 2}}=-2 \\log \\left(\\frac{\\epsilon / d}{3.7}+\\frac{2.51}{R e_{d} f^{1 / 2}}\\right) \\] where \\(\\epsilon/d\\) (roughness height) quantifies the relative roughness of the walls, with \\(\\epsilon\\) being related to the size of the disturbance from a smooth wall. For a perfectly smooth pipe, \\(\\epsilon/d = 0\\). And this value increase with the roughness of the wall. Colebrook’s formula is transcendental and cannot be solved by hand. Hence, in 1944, Moody plotted what is now known as the Moody chart (below) to provide directly readable data. This chart is nowadays a standard in the engineering world. 3.3 Entrance effects 3.3.1 Definition Away from the pipe, the external flow is homogeneous (therefore, not dissipative, or conservative); the flow within the pipe displays vanishing velocity at the wall due to viscosity. It is dissipative. Thus, there is a region (time if you follow the fluid) where the flow progressively accommodates to the presence of walls. This region is called entrance region and this progress is called the entrance effects, firstly observed by Hagen. 3.3.2 Entrance length Use dimensional analysis: The entrance length \\(L_e=[L]\\) is related to: pipe diameter \\(d\\): \\([d]=[L]\\) average fluid velocity \\(u_{avg}\\): \\(u_{avg}=[LT^{-1}]\\) fluid's density \\(\\rho\\): \\(\\rho = [ML^{-3}]\\) fluid's dynamic viscosity \\(\\mu\\): \\(\\mu = [ML^{-1}T^{-1}]\\) As \\([L_e/d]=[1]\\), combine other quantities to get a dimensionless product: \\[ \\begin{aligned} u_{avg}^a \\rho^b \\mu^c d^d &amp;= L^{a}T^{-a}M^{b}L^{-3b}M^{c}L^{-c}T^{-c}L^d \\\\ &amp;= L^{a-3b-c+d}T^{-a-c}M^{b+c} = L^0T^0M^0\\\\ \\Rightarrow \\quad &amp;\\left\\{\\begin{array}{l} a-3b-c+d=0 \\\\ -a-c=0 \\\\ b+c=0 \\end{array}\\right.\\\\ \\Rightarrow \\quad &amp;a=b=d=-c \\end{aligned} \\] As a result, let \\(c=\\gamma\\): \\[ \\left[\\frac{L_{e}}{d}\\right]=\\left[\\frac{\\rho u_{a v g} d}{\\mu}\\right]^{\\gamma} \\] The RHS is Reynolds number based on the diameter of the pipe, \\(Re_d\\), finally: \\[ \\color{purple} \\frac{L_e}{d}= \\mathcal{F}(Re_d^\\gamma) \\] the following empirical laws shows that: laminar flows: \\(\\frac{L_e}{d}\\approx0.06Re_d\\) turbulent flows: \\(\\frac{L_e}{d}\\approx1.6Re_d\\) Note that these laws provide some interesting differences between laminar and turbulent flows: at \\(Re_d= 2000\\), the entrance length of a laminar flow is \\(L_e= 120d\\) while a turbulent flow at \\(Re_d= 10000\\) will yield an entrance length of only \\(L_e= 16d\\).","categories":[],"tags":[{"name":"fluid dynamics","slug":"fluid-dynamics","permalink":"https://daydreamatnight.github.io/tags/fluid-dynamics/"}],"author":"Ryan LI"},{"title":"Derivation of Non-dimensional NS Equations","slug":"Derivation-of-Non-dimensional-NS-Equations","date":"2022-05-20T02:13:03.000Z","updated":"2022-05-20T16:26:44.229Z","comments":true,"path":"2022/05/20/Derivation-of-Non-dimensional-NS-Equations/","link":"","permalink":"https://daydreamatnight.github.io/2022/05/20/Derivation-of-Non-dimensional-NS-Equations/","excerpt":"Feeling unsafe when deploying CFD algorithms, the best way to alleviate the anxiety is to derive the fundamentals again.","text":"Feeling unsafe when deploying CFD algorithms, the best way to alleviate the anxiety is to derive the fundamentals again. Introduce dimensionless parameters into the incompressible Navier-Stokes equations to arrive at a non-dimensional form. 1 Motivation To reduce the dimensionality of the problem. 2 Dimensional analysis Given fundamental physical quantities such as length \\([L]\\), time \\([T]\\), mass \\([M]\\) and temperature \\([\\Theta]\\), Aera \\(A\\) is \\([L^2]\\) Velocity \\(V\\) is \\([LT^{-1}]\\) Acceleration \\(a\\) is \\([LT^{-2}]\\) Force \\(F\\) is \\([MLT^{-2}]\\) Pressure \\(p\\) is \\([ML^{-1}T^{-2}]\\) Energy \\(J\\) is \\([ML^2T^{-2}]\\) The principle of dimensional homogeneity states the dimensions on both sides of an equation balance. And it applies to all equations of mechanics. In dimensional analysis, take Bernoulli equation as an example, there are 4 factors: \\[ \\frac{p}{\\rho} + \\frac{1}{2}V^2 +gz = Const. \\] Dimensional variables: variables, \\(p\\), \\(V\\) and \\(z\\) Dimensional parameters: fixed throughout experiment although with a dimension, \\(\\rho\\), \\(g\\) and \\(Const\\) Pure constants: mathematical manipulations, \\(\\pi\\) and \\(e\\approx2.718\\) Special care:Angles are dimensionless yet the units are radiansSome physical quantities are dimensionless by their definition, such as strain as a change in length per unit lengthIntegration and differentiation change the dimension of the equation as well 3 Non-dimensionalisation of equations Any dimensionally homogeneous equation can be non-dimensionalised, This process roughly proceeds as follows: Identify which quantities are variables (vary or measured) and parameters (fixed per experiment). Identify the number of fundamental dimensions, \\(N\\), involved. Select \\(N\\) parameters to be scaling parameters with which to define dimensionless variables. Note: There are often multiple choices here and the choice will depend on exactly what we are aiming to show with our data. Scale each variable \\(u\\) by combinations of these scaling parameters \\(s_i\\) to arrive at a non-dimensional form \\(u^∗\\). i.e. write \\(u^∗ = \\alpha(s_i)u\\). Substitute into the equation and simplify to arrive at its non-dimensional form. Some rules for selecting scaling parameters: They must not form a dimensionless group amongst themselves. For example: \\[ S_{0}^{a} V_{0}^{b}=[L]^{a}\\left[L T^{-1}\\right]^{b}=L^{0} T^{0} \\quad \\Leftrightarrow \\quad a=b=0 \\] Do not include the output variables you wish to analyse/plot. Example Give the falling-body equation, and follow the process \\[ S = S_0+V_0t+\\frac{1}{2}gt^2 \\] Divide the variables and parameters: \\[ \\mathrm{Variables:~}S,t,\\qquad\\mathrm{Parameters:~}S_0,V_0,g \\] Identify the dimensions: \\[ S = [L], \\quad t=[T],\\quad S_0=[L],\\quad V_0=[L/t],\\quad g=[L/t^2] \\] And 2 dimensions exist: \\([L]\\) and \\([T]\\) There are 3 options of parameters choosing, choose \\((S_0,V_0)\\) for instance, Non-dimensional variables can be described as: \\[ S^* = \\frac{1}{S_0}S \\qquad t^* = \\frac{V_0}{S_0}t \\] Subscribe into the function to get a non-dimensional form of it: \\[ S^* = 1+t^*+\\frac{1}{2}\\alpha t^{*2}, \\quad \\mathrm{with} \\quad \\alpha = \\frac{gS_0}{V_0^2} \\] It is a function of a single dimensionless parameter \\(\\alpha\\) identifying the effect of gravity. Similarly, choose \\((S_0,g)\\), we have \\[ S^{**} = \\frac{g}{V_0^2}S \\qquad t^{**} = \\frac{g}{V_0}t \\] The non-dimensional form body-drop function is therefore: \\[ S^* = \\alpha+ t^{**}+ \\frac{1}{2}gt^{**},\\quad \\mathrm{with} \\quad \\alpha=\\frac{gS_0}{V_0^2} \\] Here, \\(\\alpha\\) identifies the effect of \\(V_0\\). The reduction in the number of variables/parameters (2 in this case, from 5 down to 3) equals the number of fundamental dimensions of the problem. This observation was formalised by Buckingham. 4 Buckingham’s Pi theorem Proposed by Buckingham in 1914, it is a means of finding dimensionless groups, or \\(\\Pi\\)s If a physical process satisfies the PDH(Principle of Dimensional Homogeneity) and involves \\(n\\) dimensional variables, it can be reduced to a relation between only \\(k\\) dimensionless variables or \\(\\Pi\\)s. The reduction \\(j = n - k\\) equals the maximum number of variables that do not form a \\(\\Pi\\) among themselves and is always less than or equal to the number of dimensions describing the variables. Find the reduction \\(j\\), then select \\(j\\) scaling variables that do not form a \\(\\Pi\\) among themselves. Each desired \\(\\Pi\\) group will be a power product of these \\(j\\) variables plus one additional variable, which is assigned any convenient nonzero exponent. Each \\(\\Pi\\) group thus found is independent. The first part of this theorem describes what sort of a reduction we can achieve for a given equation. The second part describes a methodology for systematically identifying \\(\\Pi\\)’s Example 1 Suppose we have that the drag force on a body depends on length of the body, velocity of the flow, density and viscosity of the fluid: \\[ F = f(L,V,\\rho,\\mu) \\] Dimensions of each variables are: \\[ F=\\left[M L T^{-2}\\right], \\quad L=[L], \\quad V=\\left[L T^{-1}\\right], \\quad \\rho=\\left[M L^{-3}\\right], \\quad \\mu=\\left[M L^{-1} T^{-1}\\right] \\] 3 dimensions exist, \\(j=3\\) And we expect to find \\(k = 5-3 = 2 ~\\Pi\\) groups. We are intersted in how the drag force relates to the velocity, so we choose \\((L,\\rho,\\mu)\\), The two \\(\\Pi\\)s are: \\[ \\begin{array}{ll} \\Pi_{1}=L^{a} \\rho^{b} \\mu^{c} F=L^{0} \\rho^{1} \\mu^{-2} F &amp; {[1]\\left[M L^{-3}\\right]\\left[M L^{-1} T^{-1}\\right]^{-2}\\left[M L T^{-2}\\right]=\\left[M^{0} L^{0} T^{0}\\right]} \\\\ \\Pi_{2}=L^{a} \\rho^{b} \\mu^{c} V=L^{1} \\rho^{1} \\mu^{-1} V &amp; {[L]\\left[M L^{-3}\\right]\\left[M L^{-1} T^{-1}\\right]^{-1}\\left[L T^{-1}\\right]=\\left[M^{0} L^{0} T^{0}\\right]} \\end{array} \\] As a result we have the dimensionless coefficients: \\[ C_{f}=\\frac{\\rho F}{\\mu^{2}}=f(\\mathrm{Re}) \\quad \\text { with } R e=\\frac{\\rho L V}{\\mu} \\] \\(C_f\\) is the force coefficients and \\(Re\\) is the famous Reynolds number. Example 2 At low velocities (laminar flow), the volume flow \\(Q\\) through a small-bore tube is a function only of the tube radius \\(R\\), the fluid viscosity \\(\\mu\\) and the pressure drop per unit tube length \\(dp/dx\\). Using the Pi theorem, find an appropriate dimensionless relationship. We have: \\[ Q = f(R,\\mu,dp/dx) \\] with dimensions: \\[ Q=\\left[L^{3} T^{-1}\\right], \\quad R=[L], \\quad \\mu=\\left[M L^{-1} T^{-1}\\right], \\quad d p / d x=\\left[M L^{-2} T^{-2}\\right] \\] 3 dimensions \\(\\Rightarrow\\) 3 scaling variables &amp; 1 \\(\\Pi\\) group. Choose \\((R, \\mu, dp/dx)\\): \\[ \\begin{aligned} \\Pi_{1} &amp;=R^{a} \\mu^{b}(d p / d x)^{c} Q \\\\ &amp;=[L]^{a}\\left[M L^{-1} T^{-1}\\right]^{b}\\left[M L^{-2} T^{-2}\\right]^{c}\\left[L^{3} T^{-1}\\right] \\\\ &amp;=\\left[M^{0} L^{0} T^{0}\\right] \\quad \\Leftrightarrow \\quad a=-4, b=1, c=-1 \\end{aligned} \\] Therefore we have: \\[ C = \\frac{Q\\mu}{R^4(dp/dx)} \\] 5 Non-dimensionalisation of the governing equations Give incompressible, no gravity governing equations. Take the case of open flow past an infinitely long circular cylinder. The continuity and momentum equations are given by: \\[ \\begin{aligned} 0 &amp;= \\boldsymbol{\\nabla}\\cdot\\mathbf{V} \\\\ \\rho\\frac{\\mathrm{d}\\mathbf{V}}{dt} &amp;= -\\boldsymbol{\\nabla}p + \\mu \\boldsymbol{\\nabla}^2\\mathbf{V} \\end{aligned} \\] Plus boundary conditions: \\[ \\begin{aligned} \\mathrm{Solid~surface:~}&amp;\\mathbf{V}=0 \\\\ \\mathrm{Inlet~or~outlet:~}&amp;\\mathrm{Known}~\\mathbf{V},p \\end{aligned} \\] Plus the cylinder has diameter \\(D\\) and the flow has free-stream velocity of \\(U_0\\). Recall that one might suppose that our velocity field is a function of the cylinder diameter, the free-stream velocity, as well as the fluid density and viscosity. We have that: \\[ \\mathbf{V} = f(\\mathbf{x},t,p,D,U_0,\\rho,\\mu) \\] with dimensions: \\[ \\begin{aligned} \\Pi_{1} &amp;=R^{a} \\mu^{b}(d p / d x)^{c} Q \\\\ &amp;=[L]^{a}\\left[M L^{-1} T^{-1}\\right]^{b}\\left[M L^{-2} T^{-2}\\right]^{c}\\left[L^{3} T^{-1}\\right] \\\\ &amp;=\\left[M^{0} L^{0} T^{0}\\right] \\quad \\Leftrightarrow \\quad a=-4, b=1, c=-1 \\end{aligned} \\] 3 dimensions and 8 variables \\(\\Rightarrow\\) 3 scaling variables &amp; 5 \\(\\Pi\\) group. Choose \\((D,U_0,\\rho)\\) since they cannot form a \\(\\Pi\\) group, we have: \\[ \\begin{aligned} &amp;\\Pi_{1}=U_{0}^{a} D^{b} \\rho^{c} V=U_{0}^{-1} V \\\\ &amp;\\Pi_{2}=U_{0}^{a} D^{b} \\rho^{c} \\mathbf{x}=D^{-1} \\mathbf{x} \\\\ &amp;\\Pi_{3}=U_{0}^{a} D^{b} \\rho^{c} t=U_{0} D^{-1} t \\\\ &amp;\\Pi_{4}=U_{0}^{a} D^{b} \\rho^{c} p=\\left[L T^{-1}\\right]^{a}[L]^{b}\\left[M L^{-3}\\right]^{c}\\left[M L^{-1} T^{-2}\\right]=U_{0}^{-2} \\rho^{-1} p \\\\ &amp;\\Pi_{5}=U_{0}^{a} D^{b} \\rho^{c} \\mu=\\left[L T^{-1}\\right]^{a}[L]^{b}\\left[M L^{-3}\\right]^{c}\\left[M L^{-1} T^{-1}\\right]=U_{0}^{-1} D^{-1} \\rho^{-1} \\mu \\end{aligned} \\] Therefore: \\[ \\frac{V}{U_{0}}=f\\left(\\frac{x}{D}, \\frac{t U_{0}}{D}, \\frac{p}{U_{0}^{2} \\rho}, \\frac{\\mu}{\\rho U_{0} D}\\right) \\] Use above to write down the non-dimensional scaling of the parameters: \\[ V^{*}=\\frac{1}{U_{0}} V \\quad \\mathbf{x}^{*}=\\frac{1}{D} \\mathbf{x} \\quad t^{*}=\\frac{U_{0}}{D} t \\quad p^{*}=\\frac{1}{\\rho U_{0}^{2}} p \\quad \\nabla^{*}=D \\nabla \\quad \\mu^{*}=\\frac{1}{\\rho U_{0} D} \\mu \\] Therefore the non-dimensional form of N-S equations: \\[ \\begin{aligned} 0 &amp;= \\boldsymbol{\\nabla^*}\\cdot\\mathbf{V^*} \\\\ \\rho\\frac{\\mathrm{d}\\mathbf{V^*}}{dt^*} &amp;= -\\boldsymbol{\\nabla^*}p^* + \\frac{1}{Re} \\boldsymbol{\\nabla^{*2}}\\mathbf{V^*} \\end{aligned} \\] where \\(Re = \\frac{\\rho U_0D}{\\mu}\\) and with boundary conditions: \\[ \\begin{aligned} \\mathrm{Solid~surface:~}&amp;\\mathbf{V^*}=0 \\\\ \\mathrm{Inlet~or~outlet:~}&amp;\\mathrm{Known}~\\mathbf{V^*},p^* \\end{aligned} \\] In this case, rather than analysing our flow problem with respect to the four parameters (cylinder radius, free-stream velocity, density and viscosity), we need only analyse it with respect to the single dimensionless Reynolds number. Besides, the above can be generalised by considering \\(U_0\\) and \\(D\\) to be any characteristic velocity- and length-scale of the specific problem being considered. 6 Dimensionless parameters To conclude we highlight a couple of the dimensionless parameters which can arise in the incompressible Navier-Stokes equations. There are no dimensionless parameters in the continuity equation. However, there is one in the momentum equation, the Reynolds number \\[ Re = \\frac{\\rho U_0D}{\\mu} \\] It can be considered as the ratio of inertial to viscous effects and is widely considered the most important parameter in fluid mechanics. If the free-stream velocity \\(U_0\\) were instead considered to be oscillating rather than constant, and of the form: \\[ U = U_0\\cos(\\omega t) \\] then the problem can be considered as: \\[ \\mathbf{V} = f(\\mathbf{x},t,p,D,U_0,\\rho,\\mu, \\omega) \\] And the non-dimensionalised \\(U(t)\\), we observe that: \\[ \\frac{U}{U_0}=U^*=\\cos\\left(\\frac{\\omega D}{U_0}t^*\\right) \\] where \\(\\omega\\) is the frequency. We now have an additional dimensionless parameter called the Strouhal number: \\[ St = \\frac{\\omega D}{U_0} \\] There are many other dimensionless parameters which arise in specific types of flow problems.","categories":[],"tags":[{"name":"fluid dynamics","slug":"fluid-dynamics","permalink":"https://daydreamatnight.github.io/tags/fluid-dynamics/"}],"author":"Ryan LI"},{"title":"Derivation of Differential Fluid Equations","slug":"Derivation-of-Differential-Fluid-Equations","date":"2022-05-14T08:54:02.000Z","updated":"2022-05-29T07:55:39.096Z","comments":true,"path":"2022/05/14/Derivation-of-Differential-Fluid-Equations/","link":"","permalink":"https://daydreamatnight.github.io/2022/05/14/Derivation-of-Differential-Fluid-Equations/","excerpt":"Feeling unsafe when deploying CFD algorithms, the best way to alleviate the anxiety is to derive the fundamentals again.","text":"Feeling unsafe when deploying CFD algorithms, the best way to alleviate the anxiety is to derive the fundamentals again. 1 Acceleration and Mass Conservation 1.1 Acceleration field of a fluid 1.1.1 Material / substantial / convective derivatives Given a spatial-temporal property \\(f(x,y,z,t)\\) of a fluid particle in the Eulerian coordinate. After an infinitesimal period, the change in \\(f\\) , is therefore: \\[ \\begin{aligned} \\Delta f = f(x+\\Delta x,y+\\delta x,z+\\delta z,t+\\Delta t)- f(x,y,z,t) \\end{aligned} \\] set the position and time change tend to 0, \\[ \\Delta f = \\frac{\\partial f}{\\partial x}\\Delta x+\\frac{\\partial f}{\\partial y}\\Delta y+\\frac{\\partial f}{\\partial z}\\Delta z+\\frac{\\partial f}{\\partial t}\\Delta t \\] considering: \\[ \\Delta x = u \\Delta t, \\Delta y = v \\Delta t, \\Delta z = w \\Delta t \\] then \\[ \\frac{\\Delta f }{\\Delta t}=\\frac{\\partial f}{\\partial t} + \\frac{\\partial f}{\\partial x}u+\\frac{\\partial f}{\\partial y}v+\\frac{\\partial f}{\\partial z}w \\] In the limit as \\(\\Delta t \\rightarrow 0\\), \\[ \\frac{D f }{D t}=\\frac{\\partial f}{\\partial t} + \\frac{\\partial f}{\\partial x}u+\\frac{\\partial f}{\\partial y}v+\\frac{\\partial f}{\\partial z}w \\] or in a vector form: \\[ \\color{purple} \\frac{D f }{D t}=\\frac{\\partial f}{\\partial t} + \\mathbf{V} \\cdot \\boldsymbol{\\nabla} f \\] In the scalar case \\(\\boldsymbol{\\nabla} f\\) is simply the gradient of a scalar, while in the vector case, \\(\\boldsymbol{\\nabla} \\mathbf{f}\\) is the covariant derivative of the vector. Like the Reynolds Transport Theorem in the integral part, the material derivative connects the Lagrangian and Eulerian frame of references. 1.1.2 Material derivative of velocity Set \\(f\\) as \\(\\mathbf{V}\\) and the fluid acceleration as \\(\\mathbf{a}\\), substitute to the formula above: \\[ \\mathbf{a} = \\frac{D \\mathbf{V} }{D t}=\\underbrace{\\frac{\\partial \\mathbf{V}}{\\partial t}}_{\\text {local}} + \\underbrace{\\mathbf{V} \\cdot \\boldsymbol{\\nabla} \\mathbf{V}}_{\\text {convective}} \\] where \\(\\frac{\\partial \\mathbf{V}}{\\partial t}\\) is called local acceleration while \\((\\mathbf{V} \\cdot \\boldsymbol{\\nabla}) \\mathbf{V}\\) is the convective acceleration. It is also written as \\(\\mathbf{a} = \\frac{D \\mathbf{V} }{D t}=\\frac{\\partial \\mathbf{V}}{\\partial t} + (\\mathbf{V} \\cdot \\boldsymbol{\\nabla}) \\mathbf{V}\\), but it's equivalent. 1.2 Differential equation of mass conservation Take an infinitesimally small cubic control volume as below. With the integral form with one-dimensional assumption: \\[ \\int_{C V} \\frac{\\partial \\rho}{\\partial t} d \\mathcal{V}+\\sum_{i}\\left(\\rho_{i} A_{i} V_{i}\\right)_{o u t}-\\sum_{i}\\left(\\rho_{i} A_{i} V_{i}\\right)_{i n}=0 \\] Density can be considered uniform in the CV, \\[ \\int_{C V} \\frac{\\partial \\rho}{\\partial t} d \\mathcal{V} = \\frac{\\partial \\rho}{\\partial t} dxdydz \\] Inlet mass flow in 3 directions \\[ \\dot{m}_{x} = \\rho udydz, \\dot{m}_{y} = \\rho vdxdz, \\dot{m}_{z} = \\rho udxdy \\] Outlet mass flow in x direction particular \\[ \\dot{m}_{x+dx} = \\left(\\rho u+\\frac{\\partial \\rho u}{\\partial x }dx\\right)dydz \\] Substitute all in the continuous function \\[ \\frac{\\partial \\rho}{\\partial t} dxdydz +\\frac{\\partial \\rho u}{\\partial x}dxdydz +\\frac{\\partial \\rho v}{\\partial y}dxdydz +\\frac{\\partial \\rho w}{\\partial z}dxdydz = 0 \\] simplify: \\[ \\frac{\\partial \\rho}{\\partial t} +\\frac{\\partial \\rho u}{\\partial x} +\\frac{\\partial \\rho v}{\\partial y} +\\frac{\\partial \\rho w}{\\partial z} = 0 \\] or in the vector form: \\[ \\color{purple} \\frac{\\partial \\rho}{\\partial t}+\\boldsymbol{\\nabla} \\cdot(\\rho\\mathbf{V})=0 \\] The only requirements of this equation are the density \\(\\rho\\) and velocity \\(\\mathbf{V}\\) are continuous in time and space. As a result, this equation is always called the equation of continuity. 1.2.1 Simplifications steady flow: \\(\\partial/\\partial t = 0\\), \\[ \\boldsymbol{\\nabla} \\cdot(\\rho\\mathbf{V})=0 \\] Incompressible flow: \\(\\rho = Const\\) spacial and temporal: \\[ \\boldsymbol{\\nabla} \\cdot\\mathbf{V}=0 \\] It makes the equation linear and much more tractable to solving analytically. 1.3 Cylindrical coordinates 1.3.1 Transformation of coordinates From cartesian to cylindrical: \\[ r=\\sqrt{x^{2}+y^{2}} \\quad \\theta=\\tan ^{-1} \\frac{y}{x} \\quad z=z \\] From cylindrical to cartesian: \\[ x=r \\cos \\theta \\quad y=r \\sin \\theta \\quad z=z \\] 1.3.2 Differential operators Two differential operators in polar coordinate: \\[ \\begin{aligned} \\boldsymbol{\\nabla} f &amp;=\\frac{\\partial f}{\\partial r} \\hat{\\boldsymbol{r}}+\\frac{1}{r} \\frac{\\partial f}{\\partial \\theta} \\hat{\\boldsymbol{\\theta}}+\\frac{\\partial f}{\\partial z} \\hat{\\boldsymbol{z}}\\\\ \\boldsymbol{\\nabla} \\cdot \\mathbf{V} &amp;=\\frac{1}{r} \\frac{\\partial}{\\partial r}\\left(r V_{r}\\right)+\\frac{1}{r} \\frac{\\partial}{\\partial \\theta}\\left(V_{\\theta}\\right)+\\frac{\\partial}{\\partial z}\\left(V_{z}\\right) \\end{aligned} \\] 6.3.3 Continuous function in cylindrical coordinates It is easy to substitute the equation of divergence into the continuous function, \\[ \\frac{\\partial \\rho}{\\partial t}+\\frac{1}{r} \\frac{\\partial}{\\partial r}\\left(r \\rho V_{r}\\right)+\\frac{1}{r} \\frac{\\partial}{\\partial \\theta}\\left(\\rho V_{\\theta}\\right)+\\frac{\\partial}{\\partial z}\\left(\\rho V_{z}\\right)=0 \\] 2 Linear Momentum and Energy 2.1 Conservation laws from differential Reynolds transport theorem Recall RTT on a fixed control volume \\(\\Omega\\): \\[ \\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(B_{s}\\right)=\\int_{\\Omega} \\frac{\\partial(\\beta \\rho)}{\\partial t} d \\mathcal{V}+\\int_{\\partial \\Omega} \\beta \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A \\] where \\[ \\beta=\\frac{\\partial B}{\\partial m} \\quad \\Rightarrow \\quad B=\\int_{\\bar{\\Omega}} \\beta \\rho d \\mathcal{V} \\] \\(\\bar{\\Omega}\\) denotes the control volume in a Lagrangian frame of reference (close system), while \\(\\Omega\\) denotes the control volume in an Eulerian frame of reference (open system). Open system: matter and energy goes in and outClose system: energy goes in and out while matter cannotIsolated system: matter and energy cannot go in and out In the Lagrangian frame of reference, \\[ \\frac{\\mathrm{d}}{\\mathrm{d} t}(B)=\\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(\\int_{\\bar{\\Omega}} \\beta \\rho d \\mathcal{V}\\right)\\underbrace{=}_{Leibniz&#39;s Rule}\\int_{\\bar{\\Omega}} \\frac{\\partial(\\beta \\rho)}{\\partial t} d \\mathcal{V}=\\int_{\\bar{\\Omega}} s d \\mathcal{V} \\] Leibniz's rule: the derivative moves into the integral symbol: \\[\\frac{d}{d x}\\left(\\int_{a}^{b} f(x, t) d t\\right)=\\int_{a}^{b} \\frac{\\partial}{\\partial x} f(x, t) d t\\] Where \\(s\\) denotes the \"rate of change of \\(B\\) per unit volume\" Then the RTT is instead: \\[ \\int_{\\bar{\\Omega}} s d \\mathcal{V} = \\int_{\\Omega} \\frac{\\partial(\\beta \\rho)}{\\partial t} d \\mathcal{V}+\\int_{\\partial \\Omega} \\beta \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A \\] Use divergence theorem, drop the bar notation with \\(\\Delta t \\rightarrow 0\\), and arrive a differential form: \\[ \\begin{array}{r} \\int_{\\Omega} s d \\mathcal{V}=\\int_{\\Omega} \\frac{\\partial(\\beta \\rho)}{\\partial t} d \\mathcal{V}+\\int_{\\Omega} \\boldsymbol{\\nabla} \\cdot(\\beta \\rho \\mathbf{V}) d \\mathcal{V} \\\\ \\int_{\\Omega} \\frac{\\partial(\\beta \\rho)}{\\partial t}+\\boldsymbol{\\nabla} \\cdot(\\beta \\rho \\mathbf{V})-s d \\mathcal{V}=0 \\\\ \\Leftrightarrow \\color{purple}{\\frac{\\partial(\\beta \\rho)}{\\partial t}+\\boldsymbol{\\nabla} \\cdot(\\beta \\rho \\mathbf{V})-s=0} \\end{array} \\] Divergence theorem: \\[\\int_{S} \\boldsymbol{\\nabla} \\cdot \\mathbf{F} d A=\\int_{\\partial S} \\mathbf{F} \\cdot \\hat{\\mathbf{n}} d s\\] 2.1.1 Continuity equation for mass Substitute \\(\\beta = 1\\) and \\(s=0\\) (mass created = 0) into the differential RTT: \\[ \\frac{\\partial(\\rho)}{\\partial t}+\\boldsymbol{\\nabla} \\cdot(\\rho \\mathbf{V})=0 \\] and for incompressible flow: \\[ \\boldsymbol{\\nabla} \\cdot \\mathbf{V}=0 \\] 2.1.2 Continuity equation for linear momentum Substitute \\(\\beta =\\mathbf{V}\\) into the differential RTT: \\[ \\frac{\\partial(\\rho \\mathbf{V})}{\\partial t}+\\boldsymbol{\\nabla} \\cdot(\\rho \\mathbf{V}\\otimes \\mathbf{V}) -\\mathbf{s} =0 \\] \\(\\mathbf{s}\\) denotes the force per unit volume, and $$ denotes the outer product. Outer product or dyadic product follows: \\[\\left[\\begin{array}{c}u_{1} \\\\u_{2} \\\\\\vdots \\\\u_{m}\\end{array}\\right] \\otimes \\left[\\begin{array}{c}v_{1} \\\\v_{2} \\\\\\vdots \\\\v_{n}\\end{array}\\right]=\\left[\\begin{array}{cccc}u_{1} v_{1} &amp; u_{1} v_{2} &amp; \\ldots &amp; u_{1} v_{n} \\\\u_{2} v_{1} &amp; u_{2} v_{2} &amp; \\ldots &amp; u_{2} v_{n} \\\\\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\u_{m} v_{1} &amp; u_{m} v_{2} &amp; \\ldots &amp; u_{m} v_{n}\\end{array}\\right]\\] The divergence of a dyad follows this formula: \\[\\begin{aligned}&amp;\\boldsymbol{\\nabla} \\cdot(f \\mathbf{a})=(\\boldsymbol{\\nabla} f) \\cdot \\mathbf{a}+(\\boldsymbol{\\nabla} \\cdot \\mathbf{a}) f \\\\&amp;\\boldsymbol{\\nabla} \\cdot(\\mathbf{a b})=(\\boldsymbol{\\nabla} \\cdot \\mathbf{a}) \\mathbf{b}+\\mathbf{a} \\cdot \\boldsymbol{\\nabla} \\mathbf{b}\\end{aligned}\\] Expand the equation: \\[ \\begin{aligned} \\rho \\frac{\\partial \\mathbf{V}}{\\partial t}+\\mathbf{V} \\frac{\\partial \\rho}{\\partial t}+\\mathbf{V V} \\cdot \\boldsymbol{\\nabla} \\rho+\\rho \\mathbf{V} \\cdot \\boldsymbol{\\nabla} \\mathbf{V}+\\rho \\mathbf{V} \\boldsymbol{\\nabla} \\cdot \\mathbf{V} &amp;=\\mathbf{s} \\\\ \\Leftrightarrow \\mathbf{V}\\left(\\frac{\\partial \\rho}{\\partial t}+\\mathbf{V} \\cdot \\boldsymbol{\\nabla} \\rho+\\rho(\\boldsymbol{\\nabla} \\cdot \\mathbf{V})\\right)+\\rho\\left(\\frac{\\partial \\mathbf{V}}{\\partial t}+(\\mathbf{V} \\cdot \\boldsymbol{\\nabla} ) \\mathbf{V}\\right) &amp;=\\mathbf{s} \\end{aligned} \\] With \\(\\mathbf{V} \\cdot \\boldsymbol{\\nabla} \\rho+\\rho(\\boldsymbol{\\nabla} \\cdot \\mathbf{V})=\\boldsymbol{\\nabla} \\cdot(\\rho \\mathbf{V})\\), we have the first left term a continuity equation. Drop it we have: \\[ \\mathbf{V}\\underbrace{\\left(\\frac{\\partial \\rho}{\\partial t}+\\boldsymbol{\\nabla} \\cdot(\\rho \\mathbf{V})\\right)}_{0}+ \\rho\\underbrace{\\left(\\frac{\\partial \\mathbf{V}}{\\partial t}+(\\mathbf{V} \\cdot \\boldsymbol{\\nabla} ) \\mathbf{V}\\right)}_{\\mathrm{material~derivative}} =\\mathbf{s} \\] With the definition of material derivative, \\[ \\color{purple} \\rho\\left(\\frac{D \\mathbf{V}}{D t}\\right) =\\mathbf{s} \\] Without source or sink, the quantity \\(\\mathbf{s}\\) therefore represents ”force per unit volume“ \\(\\mathbf{s}=\\frac{\\mathrm{d} \\mathbf{F}}{\\mathrm{d} \\mathcal{V}}\\). 2.2 Forces The forces contain body forces and surface forces \\(\\mathbf{F}=\\mathbf{F_b}+\\mathbf{F_s}\\), Body forces are due to external fields, take gravitational force as an example, \\[ d \\mathbf{F}_{g}=\\rho \\mathbf{g} d x d y d z \\quad \\mathbf{g}=-g \\mathbf{k} \\] Consider the only body force in fluid dynamic is the gravity: \\[ \\color{purple} \\frac{\\mathrm{d}\\mathbf{F_b}}{\\mathrm{d}\\mathcal{V}} = \\rho\\mathbf{g} \\] Surface forces are due to hydrostatic pressure and viscous stresses on the CS: \\[ \\sigma_{i j}=\\left|\\begin{array}{ccc} -p+\\tau_{x x} &amp; \\tau_{y x} &amp; \\tau_{z x} \\\\ \\tau_{x y} &amp; -p+\\tau_{yy} &amp; \\tau_{z y} \\\\ \\tau_{x z} &amp; \\tau_{y z} &amp; -p+\\tau_{z z} \\end{array}\\right| \\] Similar to what we do in the Mass Conservation, the force is due to the stress change in each direction, for instance: \\[ dF{s,xx} = \\left(\\sigma_{xx}+\\frac{\\partial\\sigma_{xx}}{\\partial x}dx\\right)dydz-\\sigma_{xx}dydz = \\frac{\\partial\\sigma_{xx}}{\\partial x}d\\mathcal{V} \\] as a result: \\[ \\begin{aligned} &amp;\\frac{\\mathrm{d} F_{x}}{\\mathrm{~d} \\mathcal{V}}=-\\frac{\\partial p}{\\partial x}+\\frac{\\partial \\tau_{x x}}{\\partial x}+\\frac{\\partial \\tau_{y x}}{\\partial y}+\\frac{\\partial \\tau_{z x}}{\\partial z} \\\\ &amp;\\frac{\\mathrm{d} F_{y}}{\\mathrm{~d} \\mathcal{V}}=-\\frac{\\partial p}{\\partial y}+\\frac{\\partial \\tau_{x y}}{\\partial x}+\\frac{\\partial \\tau_{y y}}{\\partial y}+\\frac{\\partial \\tau_{z y}}{\\partial z} \\\\ &amp;\\frac{\\mathrm{d} F_{z}}{\\mathrm{~d} \\mathcal{V}}=-\\frac{\\partial p}{\\partial z}+\\frac{\\partial \\tau_{x z}}{\\partial x}+\\frac{\\partial \\tau_{y z}}{\\partial y}+\\frac{\\partial \\tau_{z z}}{\\partial z} \\end{aligned} \\] surface force in vector form: \\[ \\color{purple} \\frac{\\mathrm{d} \\mathbf{F_s}}{\\mathrm{d} \\mathcal{V}}=- \\boldsymbol{\\nabla} p+ \\boldsymbol{\\nabla} \\cdot\\boldsymbol{\\tau_{ij}} \\] \\(\\frac{\\mathrm{d} \\mathbf{F_s}}{\\mathrm{d} \\mathcal{V}}\\) also represents the Cauchy stress tensor: 2.3 General differential linear momentum equation Substitute force terms into earlier momentum conservation expression, \\[ \\color{purple} \\rho\\frac{D \\mathbf{V}}{D t} = \\rho\\mathbf{g} - \\boldsymbol{\\nabla} p+ \\boldsymbol{\\nabla} \\cdot\\mathbf{\\tau_{ij}} \\] \\[ \\mathrm{density × acceleration = (Gravity + Pressure + Viscous) ~forces~per~unit~volume} \\] These equations are valid for any fluid in general motion, particularly those which include viscous stresses. The non-linear convective terms on the left-hand side also complicates direct mathematical analysis. 2.4 Differential energy equations Similar to earlier routes, we arrive energy conservation equation: \\[ \\dot{Q}-\\dot{W}_{v}=\\left(\\rho \\frac{D e}{D t}+\\mathbf{V} \\cdot \\boldsymbol{\\nabla} p+p \\boldsymbol{\\nabla} \\cdot \\mathbf{V}\\right) \\mathrm{d}\\mathcal{V} \\] Note that \\(\\dot{W}_{s} = 0\\) since there is no shaft work in an infinitesimal CV, as a result, similar CV flux analysis can be done to \\(\\dot{Q}\\) and \\(\\dot{W}_{v}\\): Heat conduction \\(\\dot{Q}\\) is regulated by Fourier's law stating that the heat flux is proportional to the gradient of the temperature, \\(\\mathbf{q} = K\\boldsymbol{\\nabla}T\\), using similar flux analysis to infinitesimal CV： \\[ \\dot{Q}=\\boldsymbol{\\nabla} \\cdot(k \\boldsymbol{\\nabla} T)\\mathrm{d}\\mathcal{V} \\] Similarly, the rate of work due to viscous stresses can be expanded to give: \\[ \\dot{W}_{v}=-\\boldsymbol{\\nabla} \\cdot\\left(\\mathbf{V} \\cdot \\boldsymbol{\\tau}_{i j}\\right)\\mathrm{d}\\mathcal{V} \\] Substitute into energy conservation equation to give: \\[ \\rho \\frac{D e}{D t}+\\mathbf{V} \\cdot \\boldsymbol{\\nabla} p+p \\boldsymbol{\\nabla} \\cdot \\mathbf{V} = \\boldsymbol{\\nabla} \\cdot(k \\boldsymbol{\\nabla} T) +\\boldsymbol{\\nabla} \\cdot\\left(\\mathbf{V} \\cdot \\boldsymbol{\\tau}_{i j}\\right) \\] 2.4.1 General energy equation Splitting the viscous work term: \\[ \\boldsymbol{\\nabla} \\cdot\\left(\\mathbf{V} \\cdot \\boldsymbol{\\tau}_{i j}\\right) \\equiv \\mathbf{V} \\cdot \\left( \\boldsymbol{\\nabla} \\cdot \\boldsymbol{\\tau_{ij}} \\right) + \\underbrace{\\boldsymbol{\\tau_{ij}} : \\left( \\boldsymbol{\\nabla}\\mathbf{V} \\right)}_{\\boldsymbol{\\Phi}} \\] where \\(\\boldsymbol{\\Phi}\\) denotes the viscous-dissipation function, representing the dissipation of energy due to viscous effects. For Newtonian flow in a Cartesian coordinates: \\[ \\boldsymbol{\\Phi}=\\mu\\left[2\\left(\\frac{\\partial u}{\\partial x}\\right)^{2}+2\\left(\\frac{\\partial v}{\\partial y}\\right)^{2}+2\\left(\\frac{\\partial w}{\\partial z}\\right)^{2}+\\left(\\frac{\\partial v}{\\partial x}+\\frac{\\partial u}{\\partial y}\\right)^{2}+\\left(\\frac{\\partial w}{\\partial y}+\\frac{\\partial v}{\\partial z}\\right)^{2}+\\left(\\frac{\\partial u}{\\partial z}+\\frac{\\partial w}{\\partial x}\\right)^{2}\\right] \\] Dissipated energy means during the flow, it is converted into the internal energy of the material. Note \\(\\boldsymbol{\\Phi}\\) is always positive, implying that viscous flow always loses energy. Expanding \\(e = \\hat{u}+\\frac{1}{2}V^{2}+gz\\), the general differential energy equation is : \\[ \\color{purple} \\rho \\frac{D \\hat{u}}{D t}+p(\\boldsymbol{\\nabla} \\cdot \\mathbf{V})=\\boldsymbol{\\nabla} \\cdot(k \\boldsymbol{\\nabla} T)+\\mathbf{\\Phi} \\] with further assumptions: \\[ \\begin{aligned} d \\hat{u} &amp; \\approx c_{v} d T \\\\ c_{v}, \\mu, k, \\rho &amp; \\approx \\mathrm{const} \\end{aligned} \\] for incompressible flow, we have: \\[ \\color{purple}{\\rho c_{v} \\frac{\\partial T}{\\partial t} =\\cdot(k \\boldsymbol{\\nabla}^2 T)+\\mathbf{\\Phi}} \\] 3 Euler and Navier-Stokes Equations Recall differential linear momentum equation: \\[ \\rho\\mathbf{g} - \\boldsymbol{\\nabla} p+ \\boldsymbol{\\nabla} \\cdot\\boldsymbol{\\tau_{ij}} = \\rho\\frac{D \\mathbf{V}}{D t} \\] Equations of motion of \\(\\boldsymbol{\\tau_{ij}}\\) is still needed, and its different depending on types of fluid 3.1 Euler equations (frictionless flow) Use the inviscid flow assumption, that is \\(\\boldsymbol{\\tau_{ij}}=0\\), the momentum equation reduces to: \\[ \\color{purple} \\rho\\mathbf{g} - \\boldsymbol{\\nabla} p+ \\boldsymbol{\\nabla} \\cdot\\boldsymbol{\\tau_{ij}} = \\rho\\frac{D \\mathbf{V}}{D t} \\] Fluids with low viscosity can be reasonably modelled as inviscid, except near boundaries. 3.2 Newtonian fluid 3.2.1 Strain Strains of a fluid particle evaluate the deformation due to an applied shear stress. and strain is defined as (anticlockwise positive): \\[ \\mathrm{strain_{xy}} = \\Delta\\theta_x-(-\\Delta\\theta_y) \\] In a continuous system, the rate of strain is then: \\[ \\frac{\\mathrm{d}}{\\mathrm{d}t}(\\mathrm{strain_{xy}}) = \\epsilon_{xy} = \\frac{\\partial v}{\\partial x} + \\frac{\\partial u}{\\partial y} \\] or in vector form: \\[ \\boldsymbol{\\epsilon} = \\nabla \\mathbf{V}+(\\nabla \\mathbf{V}^{\\top}) \\] 3.2.2 Viscosity Newton defined a newtonian fluid by a fluid in which the viscous stresses are linearly proportional to the local strain rates. \\[ \\boldsymbol{\\tau_{ij}} \\propto \\boldsymbol{\\epsilon_{ij}} \\] In order to apply this to the Naiver–Stokes equations, three assumptions were made by Stokes: The stress tensor is a linear function of the strain rate tensor or equivalently the velocity gradient. The fluid is isotropic. For a fluid at rest, \\(\\boldsymbol{\\nabla} \\cdot\\boldsymbol{\\tau_{ij}} = 0\\) (so that hydrostatic pressure results). And it leads to: \\[ \\color{purple} \\boldsymbol{\\tau}=\\mu\\left(\\nabla \\mathbf{u}+\\nabla \\mathbf{u}^{\\top}\\right)+\\lambda(\\nabla \\cdot \\mathbf{u}) \\mathbf{I} \\] or \\[ \\boldsymbol{\\tau_{ij}}=\\mu\\left(\\frac{\\partial u_{i}}{\\partial x_{j}}+\\frac{\\partial u_{j}}{\\partial x_{i}}\\right)+\\delta_{i j} \\lambda \\frac{\\partial u_{k}}{\\partial x_{k}} \\\\ \\] where, \\[ \\delta_{i j}= \\begin{cases}0 &amp; \\text { if } i \\neq j \\\\ 1 &amp; \\text { if } i=j\\end{cases} \\] As a result, expand the formula: \\[ \\boldsymbol{\\tau_{ij}}=\\left|\\begin{array}{ccc} 2 \\mu \\frac{\\partial u}{\\partial x}+\\lambda \\frac{\\partial u_{}}{\\partial x_{k}} &amp; \\mu\\left(\\frac{\\partial u}{\\partial y}+\\frac{\\partial v}{\\partial x}\\right) &amp; \\mu\\left(\\frac{\\partial u}{\\partial z}+\\frac{\\partial w}{\\partial x}\\right) \\\\ \\mu\\left(\\frac{\\partial v}{\\partial x}+\\frac{\\partial u}{\\partial y}\\right) &amp; 2 \\mu \\frac{\\partial v}{\\partial y}+\\lambda \\frac{\\partial v}{\\partial y} &amp; \\mu\\left(\\frac{\\partial v}{\\partial z}+\\frac{\\partial w}{\\partial y}\\right) \\\\ \\mu\\left(\\frac{\\partial w}{\\partial x}+\\frac{\\partial u}{\\partial z}\\right) &amp; \\mu\\left(\\frac{\\partial w}{\\partial y}+\\frac{\\partial v}{\\partial z}\\right) &amp; 2 \\mu \\frac{\\partial w}{\\partial z}+\\lambda \\frac{\\partial w}{\\partial z} \\end{array}\\right| \\] And \\(\\mu\\) and \\(\\lambda\\) represents the shear/dynamic viscosity and volume/bulk viscosity respectively, The value of λ, which produces a viscous effect associated with volume change, is very difficult to determine, not even its sign is known with absolute certainty. Even in compressible flows, the term involving λ is often negligible; however it can occasionally be important even in nearly incompressible flows and is a matter of controversy. When taken nonzero, the most common approximation is λ ≈ −2/3μ. 3.3 Navier-Stokes equations Substitute the stress representation into the linear momentum equation: \\[ \\rho\\frac{D \\mathbf{V}}{D t} = \\rho\\mathbf{g} - \\boldsymbol{\\nabla} p+ \\boldsymbol{\\nabla} \\cdot \\mu\\left( \\left(\\boldsymbol{\\nabla} \\mathbf{V}+\\boldsymbol{\\nabla} \\mathbf{V}^{\\top}\\right)-\\frac{2}{3}(\\nabla \\cdot \\mathbf{V}) \\mathbf{I}\\right) \\] with further simplification we have: \\[ \\color{purple} \\rho \\frac{\\mathrm{D} \\mathbf{V}}{\\mathrm{D} t}=\\rho\\left(\\frac{\\partial \\mathbf{V}}{\\partial t}+\\mathbf{V} \\cdot \\nabla \\mathbf{V}\\right)=-\\nabla p+\\mu \\nabla^{2} \\mathbf{V}+\\frac{1}{3} \\mu \\nabla(\\nabla \\cdot \\mathbf{V})+\\rho \\mathbf{g} \\] 3.3.1 Incompressible Navier-Stokes equations With incompressible flow we have no bulk viscosity so: \\[ \\boldsymbol{\\tau}=\\mu\\left(\\nabla \\mathbf{u}+\\nabla \\mathbf{u}^{\\top}\\right) \\] And the Incompressible Navier-Stokes equations is therefore: \\[ \\rho\\frac{D \\mathbf{V}}{D t} = \\rho\\mathbf{g} - \\boldsymbol{\\nabla} p+ \\boldsymbol{\\nabla} \\cdot \\mu\\left( \\boldsymbol{\\nabla} \\mathbf{V}+\\boldsymbol{\\nabla} \\mathbf{V}^{\\top}\\right) \\] with \\(\\boldsymbol{\\nabla} \\cdot \\mathbf{V}=0\\) for incompressible flow: \\[ \\boldsymbol{\\nabla} \\cdot \\mu\\left( \\boldsymbol{\\nabla} \\mathbf{V}+\\boldsymbol{\\nabla} \\mathbf{V}^{\\top}\\right) = \\mu\\boldsymbol{\\nabla}^2\\mathbf{V} \\] as a result: \\[ \\color{purple} \\frac{\\partial\\mathbf{V}}{\\partial t} + \\mathbf{V} \\cdot \\nabla \\mathbf{V}= \\mathbf{g} - \\boldsymbol{\\nabla}\\frac{p}{\\rho} + \\nu\\boldsymbol{\\nabla}^2\\mathbf{V} \\] where \\(\\nu = \\frac{\\mu}{\\rho}\\), called kinetic viscosity Meaning of each term: \\[\\overbrace{\\underbrace{\\frac{\\partial \\mathbf{V}}{\\partial t}}_{\\text {Variation }}+\\underbrace{(\\mathbf{V} \\cdot \\nabla) \\mathbf{V}}_{\\text {Convection }}}^{\\text {Inertia (per volume) }}= \\overbrace{\\underbrace{\\nu \\nabla^{2} \\mathbf{V}}_{\\text {Diffusion }}\\underbrace{-\\nabla w}_{\\begin{array}{c}\\text { Internal } \\\\\\text { source }\\end{array}}}^{\\text {Divergence of stress }}+\\underbrace{\\mathbf{g}}_{\\begin{array}{c}\\text { External } \\\\\\text { source }\\end{array}} .\\] Expanding along every coordinates gives that: \\[ \\begin{align} \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v\\frac{\\partial u}{\\partial y} + w \\frac{\\partial u}{\\partial z}&amp;= g_x - \\frac{1}{\\rho}\\frac{\\partial p}{\\partial x} + \\nu\\left(\\frac{\\partial^2u}{\\partial^2x}+\\frac{\\partial^2u}{\\partial^2y}+\\frac{\\partial^2u}{\\partial^2z}\\right) \\\\ \\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v\\frac{\\partial v}{\\partial y} + w \\frac{\\partial v}{\\partial z}&amp;= g_y - \\frac{1}{\\rho}\\frac{\\partial p}{\\partial y} + \\nu\\left(\\frac{\\partial^2v}{\\partial^2x}+\\frac{\\partial^2v}{\\partial^2y}+\\frac{\\partial^2v}{\\partial^2z}\\right) \\\\ \\frac{\\partial w}{\\partial t} + u \\frac{\\partial w}{\\partial x} + v\\frac{\\partial w}{\\partial y} + w \\frac{\\partial w}{\\partial z}&amp;= g_z - \\frac{1}{\\rho}\\frac{\\partial p}{\\partial z} + \\nu\\left(\\frac{\\partial^2w}{\\partial^2x}+\\frac{\\partial^2w}{\\partial^2y}+\\frac{\\partial^2w}{\\partial^2z}\\right) \\end{align} \\] 3.3.2 Cylindrical coordinates Recall the coordinates transformation: \\[ r=\\sqrt{x^{2}+y^{2}} \\quad \\theta=\\tan ^{-1} \\frac{y}{x} \\quad z=z \\] and the differential operators: \\[ \\begin{aligned} \\boldsymbol{\\nabla} f &amp;=\\frac{\\partial f}{\\partial r} \\hat{\\boldsymbol{r}}+\\frac{1}{r} \\frac{\\partial f}{\\partial \\theta} \\hat{\\boldsymbol{\\theta}}+\\frac{\\partial f}{\\partial z} \\hat{\\boldsymbol{z}}\\\\ \\boldsymbol{\\nabla} \\cdot \\mathbf{V} &amp;=\\frac{1}{r} \\frac{\\partial}{\\partial r}\\left(r V_{r}\\right)+\\frac{1}{r} \\frac{\\partial}{\\partial \\theta}\\left(V_{\\theta}\\right)+\\frac{\\partial}{\\partial z}\\left(V_{z}\\right)\\\\ \\boldsymbol{\\nabla}^2f &amp;= \\left(\\frac{1}{r} \\frac{\\partial}{\\partial r}\\left(r \\frac{\\partial f}{\\partial r}\\right)+\\frac{1}{r^{2}} \\frac{\\partial^{2} f}{\\partial \\theta^{2}}+\\frac{\\partial^{2} f}{\\partial z^{2}}\\right) \\end{aligned} \\] And in z direction \\[ \\begin{align} \\frac{\\partial V_r}{\\partial t} + V_r \\frac{\\partial V_r}{\\partial r} + V_\\theta\\frac{1}{r}\\frac{\\partial V_r}{\\partial \\theta} + V_z \\frac{\\partial V_r}{\\partial z}&amp;= g_r - \\frac{1}{\\rho}\\frac{\\partial p}{\\partial r} + \\nu\\left(\\frac{1}{r} \\frac{\\partial}{\\partial r}\\left(r \\frac{\\partial V_{r}}{\\partial r}\\right)+\\frac{1}{r^{2}} \\frac{\\partial^{2} V_{r}}{\\partial \\theta^{2}}+\\frac{\\partial^{2} V_{r}}{\\partial z^{2}}\\right) \\\\ \\frac{\\partial V_\\theta}{\\partial t} + V_r \\frac{\\partial V_\\theta}{\\partial r} + V_\\theta\\frac{1}{r}\\frac{\\partial V_\\theta}{\\partial \\theta} + V_z \\frac{\\partial V_\\theta}{\\partial z}&amp;= g_\\theta - \\frac{1}{\\rho r}\\frac{\\partial p}{\\partial \\theta} + \\nu\\left(\\frac{1}{r} \\frac{\\partial}{\\partial r}\\left(r \\frac{\\partial V_{\\theta}}{\\partial r}\\right)+\\frac{1}{r^{2}} \\frac{\\partial^{2} V_{\\theta}}{\\partial \\theta^{2}}+\\frac{\\partial^{2} V_{\\theta}}{\\partial z^{2}}\\right) \\\\ \\frac{\\partial V_z}{\\partial t} + V_r \\frac{\\partial V_r}{\\partial r} + V_\\theta\\frac{1}{r}\\frac{\\partial V_z}{\\partial \\theta} + V_z \\frac{\\partial V_z}{\\partial z}&amp;= g_z - \\frac{1}{\\rho}\\frac{\\partial p}{\\partial z} + \\nu\\left(\\frac{1}{r} \\frac{\\partial}{\\partial r}\\left(r \\frac{\\partial V_{z}}{\\partial r}\\right)+\\frac{1}{r^{2}} \\frac{\\partial^{2} V_{z}}{\\partial \\theta^{2}}+\\frac{\\partial^{2} V_{z}}{\\partial z^{2}}\\right) \\end{align} \\] 3.3 Closing the system To summarise, the 3 main functions are: \\[ \\begin{aligned} \\frac{\\partial \\rho}{\\partial t}+\\nabla \\cdot(\\rho\\mathbf{V}) &amp;=0 &amp; &amp; \\text { continuity } \\\\ \\rho \\mathbf{g}-\\nabla p+\\boldsymbol{\\nabla} \\cdot \\boldsymbol{\\tau}_{i j} &amp;=\\rho \\frac{D \\mathbf{V}}{D t} &amp; &amp; \\text { momentum } \\\\ \\rho \\frac{D \\hat{u}}{D t}=p(\\boldsymbol{\\nabla} \\cdot \\mathbf{V}) &amp;=\\boldsymbol{\\nabla} \\cdot(k \\boldsymbol{\\nabla} T)+\\mathbf{\\Phi} &amp; &amp; \\text { energy } \\end{aligned} \\] Note that there are five unknowns \\(\\rho,\\mathbf{V}, p, \\hat{u},T\\), but only three equations. Additional equations are state relations for the thermodynamic properties of the fluid. For example for perfect gas: \\[ \\rho=\\frac{p}{R T} \\quad \\hat{u}=\\int c_{v} d T \\] The system of equations is now well-posed and can be solved, subject to boundary conditions. 3.3.1 Incompressible system We have: \\[ \\begin{aligned} \\boldsymbol{\\nabla} \\cdot \\mathbf{V} &amp;=0 \\\\ \\rho \\frac{D \\mathbf{V}}{D t} &amp;=\\rho \\boldsymbol{g}-\\nabla p+\\mu \\nabla^{2} \\mathbf{V} \\\\ \\rho c_{p} \\frac{D T}{D t} &amp;=k \\nabla^{2} T+\\mathbf{\\Phi} \\end{aligned} \\] Note that for incompressible flow, \\(\\rho,\\mu,k\\) are constants, only 3 unknowns are left \\(p, \\mathbf{V}, T\\). So the incompressible system is already closed. Besides, continuity and momentum equations are independent of the \\(T\\), thus decouple from the energy equation. 3.4 Boundary conditions Wall: these are typically solid, impermeable and there is a no-slip condition at the wall. Inlet: known velocity \\(\\mathbf{V}\\) and pressure \\(p\\) (and temperature \\(T\\)) 3.5 Stream function Stream function provides a mathematical tool to automatically satisfy the continuity constraint, after which we can then solve the momentum equation. It is only applicable to flows which are steady, incompressible and two-dimensional. With continuity equation: \\[ \\boldsymbol{\\nabla}\\cdot\\mathbf{V} = 0 \\Leftrightarrow \\frac{\\partial u }{\\partial x} + \\frac{\\partial v}{\\partial y} = 0 \\] We seek to replace the velocity components \\(u\\) and \\(v\\) with a scalar function \\(\\psi(x,y)\\), which satisfies the above constraint: \\[ \\frac{\\partial}{\\partial x}\\left(\\frac{\\partial \\psi}{\\partial y}\\right) + \\frac{\\partial}{\\partial y}\\left(-\\frac{\\partial \\psi}{\\partial x}\\right) \\equiv 0 \\] As a result: \\[ u=\\frac{\\partial \\psi}{\\partial y} \\qquad v=-\\frac{\\partial \\psi}{\\partial x} \\] 3.5.1 Properties of stream function Recall the definition of a streamline: \\[ \\begin{align} &amp; \\frac{dy}{v} = \\frac{dx}{u} \\\\ \\Leftrightarrow\\quad &amp; \\frac{\\partial \\psi}{\\partial y}u+\\frac{\\partial \\psi}{\\partial x}v=0 \\\\ \\Leftrightarrow\\quad &amp; d\\psi=0 \\\\ \\Leftrightarrow\\quad &amp; \\psi=Const \\end{align} \\] The change of \\(\\psi\\) across a control surface of unit depth is equal to the volume flow through the surface \\[ \\begin{aligned} d Q &amp;=(\\mathbf{V} \\cdot \\boldsymbol{n}) d A \\\\ &amp;=\\left(\\boldsymbol{i} \\frac{\\partial \\psi}{\\partial y}-\\boldsymbol{j} \\frac{\\partial \\psi}{\\partial x}\\right) \\cdot\\left(\\boldsymbol{i} \\frac{\\mathrm{d} y}{\\mathrm{~d} s}-\\boldsymbol{j} \\frac{\\mathrm{d} x}{\\mathrm{~d} s}\\right) d s \\\\ &amp;=\\frac{\\partial \\psi}{\\partial x} d x+\\frac{\\partial \\psi}{\\partial y} d y \\\\ &amp;=d \\psi \\end{aligned} \\] The flow direction can be determined by observing whether \\(\\psi\\) increases or decreases 4 Vorticity and Irrotationality 4.1 Vorticity Recall how a fluid particle deforms under shear stresses: The angular velocity \\(\\omega_z\\) is defined as the average rate of counter-clockwise turning of the two sides: \\[ \\omega_z = \\frac{1}{2}\\left(\\frac{\\mathrm{d}(\\Delta\\theta_x)}{\\mathrm{d}t}+\\frac{\\mathrm{d}(\\Delta\\theta_y)}{\\mathrm{d}t}\\right) =\\frac{1}{2}\\left(\\frac{\\partial v}{\\partial x}-\\frac{\\partial u}{\\partial y}\\right) \\] Similarly, \\[ \\omega_{x}=\\frac{1}{2}\\left(\\frac{\\partial w}{\\partial y}-\\frac{\\partial v}{\\partial z}\\right) \\quad \\omega_{y}=\\frac{1}{2}\\left(\\frac{\\partial u}{\\partial z}-\\frac{\\partial w}{\\partial x}\\right) \\] Combine together the angular velocity: \\[ \\boldsymbol{\\omega}=\\frac{1}{2}(\\underbrace{\\boldsymbol{\\nabla} \\times \\mathbf{V}}_{\\text {curl } \\mathbf{V}})=\\frac{1}{2}\\left|\\begin{array}{ccc} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\ \\frac{\\partial}{\\partial x} &amp; \\frac{\\partial}{\\partial y} &amp; \\frac{\\partial}{\\partial z} \\\\ u &amp; v &amp; w \\end{array}\\right| \\] And the vorticity is defined as twice the angular velocity i.e. curl of velocity: \\[ \\boldsymbol{\\xi}=2 \\boldsymbol{\\omega}=\\operatorname{curl} \\mathbf{V}=\\boldsymbol{\\nabla} \\times \\mathbf{V} \\] 4.2 Vorticity function for two-dimensional incompressible flow First some math: \\[ \\begin{aligned} \\boldsymbol{\\nabla} \\times \\boldsymbol{\\nabla} \\phi &amp; \\equiv 0 \\qquad\\qquad&amp;(4.1) \\\\ \\boldsymbol{\\nabla} \\times\\left(\\boldsymbol{\\nabla}^{2} \\mathbf{V}\\right) &amp;=\\boldsymbol{\\nabla}^{2}(\\boldsymbol{\\nabla} \\times \\mathbf{V}) \\qquad\\qquad&amp;(4.2) \\\\ (\\mathbf{V} \\cdot \\boldsymbol{\\nabla}) \\mathbf{V} &amp;=\\boldsymbol{\\nabla}\\left(\\frac{1}{2} \\mathbf{V} \\cdot \\mathbf{V}\\right)-\\mathbf{V} \\times \\boldsymbol{\\xi} \\qquad\\qquad&amp;(4.3) \\\\ \\boldsymbol{\\nabla} \\times(\\mathbf{V} \\times \\boldsymbol{\\xi}) &amp;=-\\boldsymbol{\\xi}(\\boldsymbol{\\nabla} \\cdot \\mathbf{V})+(\\boldsymbol{\\xi} \\cdot \\boldsymbol{\\nabla}) \\mathbf{V}-(\\mathbf{V} \\cdot \\boldsymbol{\\nabla}) \\boldsymbol{\\xi} \\qquad\\qquad&amp;(4.4) \\end{aligned} \\] Recall the incompressible momentum equation: \\[ \\frac{\\partial\\mathbf{V}}{\\partial t} + \\mathbf{V}\\cdot\\boldsymbol{\\nabla}\\mathbf{V} = \\mathbf{g} -\\boldsymbol{\\nabla}\\left(\\frac{p}{\\rho}\\right) + \\nu\\boldsymbol{\\nabla}^2\\mathbf{V} \\] Take the curl for each term: \\[ \\underbrace{\\boldsymbol{\\nabla} \\times\\frac{\\partial\\mathbf{V}}{\\partial t} }_{\\frac{\\partial\\boldsymbol{\\xi}}{\\partial t}}+ \\boldsymbol{\\nabla} \\times \\underbrace{\\mathbf{V}\\cdot\\boldsymbol{\\nabla}\\mathbf{V}}_{\\boldsymbol{\\nabla}\\left(\\frac{1}{2} \\mathbf{V} \\cdot \\mathbf{V}\\right)-\\mathbf{V} \\times \\boldsymbol{\\xi},~\\mathrm{by}(4.3)} = \\underbrace{\\boldsymbol{\\nabla} \\times\\mathbf{g}}_{0} - \\underbrace{\\boldsymbol{\\nabla} \\times\\boldsymbol{\\nabla}\\left(\\frac{p}{\\rho}\\right)}_{0,~\\mathrm{by} (4.1)}+ \\nu\\underbrace{\\boldsymbol{\\nabla} \\times\\boldsymbol{\\nabla}^2\\mathbf{V}}_{\\boldsymbol{\\nabla}^{2}(\\boldsymbol{\\nabla} \\times \\mathbf{V}),~ \\mathrm{by} (4.2)} \\] As a result: \\[ \\frac{\\partial\\boldsymbol{\\xi}}{\\partial t}+ \\underbrace{\\boldsymbol{\\nabla} \\times\\boldsymbol{\\nabla}\\left(\\frac{1}{2} \\mathbf{V} \\cdot \\mathbf{V}\\right)}_{0,~\\mathrm{by} (4.1)}-\\boldsymbol{\\nabla} \\times\\mathbf{V} \\times \\boldsymbol{\\xi}= \\nu\\boldsymbol{\\nabla}^2\\boldsymbol{\\xi} \\] Apply \\((4.4)\\) cancel terms due to assumptions: \\[ \\frac{\\partial\\boldsymbol{\\xi}}{\\partial t} +\\underbrace{\\boldsymbol{\\xi}(\\boldsymbol{\\nabla} \\cdot \\mathbf{V})}_{0,~\\mathrm{steady~incompressible}} -\\underbrace{(\\boldsymbol{\\xi} \\cdot \\boldsymbol{\\nabla}) \\mathbf{V}}_{0,~\\mathrm{2D~flow}} +(\\mathbf{V} \\cdot \\boldsymbol{\\nabla}) \\boldsymbol{\\xi}= \\nu\\boldsymbol{\\nabla}^2\\boldsymbol{\\xi} \\] Finally, the vorticity function for 2D incompressible flow is: \\[ \\color{purple} \\frac{\\partial\\boldsymbol{\\xi}}{\\partial t} +(\\mathbf{V} \\cdot \\boldsymbol{\\nabla}) \\boldsymbol{\\xi}= \\frac{D\\boldsymbol{\\xi}}{D t}= \\nu\\boldsymbol{\\nabla}^2\\boldsymbol{\\xi} \\] Some of the terms have specific physical interpretations:\\((\\mathbf{V} \\cdot \\boldsymbol{\\nabla}) \\boldsymbol{\\xi}\\) is convection\\((\\boldsymbol{\\xi} \\cdot \\boldsymbol{\\nabla}) \\mathbf{V}\\) is stretching\\(\\nu\\boldsymbol{\\nabla}^2\\boldsymbol{\\xi}\\) is diffusion Note that there is no pressure term in the vorticity equation, implying that vorticity dynamics are localised in space. 4.2.1 Combine with continuity equation Recall the definition of the stream function and take the curl: \\[ \\begin{aligned} \\mathbf{V} &amp;= \\mathbf{i}\\frac{\\partial\\psi}{\\partial y}-\\mathbf{j}\\frac{\\partial\\psi}{\\partial x} \\\\ \\boldsymbol{\\nabla}\\times\\mathbf{V} &amp;= -\\mathbf{k}\\boldsymbol{\\nabla}^2\\psi = -\\mathbf{k}\\left( \\frac{\\partial^2\\psi}{\\partial x^2} + \\frac{\\partial^2\\psi}{\\partial y^2} \\right) \\end{aligned} \\] Substitute these into the vorticity equation, a 4th-order single equation in \\(\\psi\\) arrived: \\[ \\color{purple} \\frac{\\partial \\psi}{\\partial y} \\frac{\\partial}{\\partial x}\\left(\\nabla^{2} \\psi\\right)-\\frac{\\partial \\psi}{\\partial x} \\frac{\\partial}{\\partial y}\\left(\\nabla^{2} \\psi\\right)=\\nu \\nabla^{2}\\left(\\nabla^{2} \\psi\\right) \\] Assumptions made:Steady flowIncompressibleTwo dimensional One important special case is when \\[ \\boldsymbol{\\nabla}^2\\psi = \\frac{\\partial^2\\psi}{\\partial x^2} + \\frac{\\partial^2\\psi}{\\partial y^2} = 0 \\] The flow is irrotational. 4.3 Full Bernoulli equations We now consider a flow which is inviscid (although may still be compressible). Recall Euler's equation: \\[ \\frac{\\partial\\mathbf{V}}{\\partial t} + \\mathbf{V}\\cdot\\boldsymbol{\\nabla}\\mathbf{V} = \\mathbf{g} -\\frac{1}{\\rho}\\boldsymbol{\\nabla}\\left(p\\right) \\] Expand the convection term by \\((4.3)\\): \\[ \\frac{\\partial\\mathbf{V}}{\\partial t} + \\boldsymbol{\\nabla}\\left(\\frac{1}{2} V^2\\right)+ \\underbrace{\\boldsymbol{\\xi}\\times\\mathbf{V}}_{\\mathbf{a}\\times\\mathbf{b}=-\\mathbf{b}\\times\\mathbf{a}}- \\mathbf{g} +\\frac{1}{\\rho}\\boldsymbol{\\nabla}\\left(p\\right)=0 \\] Try to integrate it along an arbitrary trajectory in the flow, dot with a small displacement vector \\(d\\mathbf{r}\\): \\[ \\left[\\frac{\\partial\\mathbf{V}}{\\partial t} + \\boldsymbol{\\nabla}\\left(\\frac{1}{2} V^2\\right)+ \\boldsymbol{\\xi}\\times\\mathbf{V}- \\mathbf{g} +\\frac{1}{\\rho}\\boldsymbol{\\nabla}\\left(p\\right)\\right]d\\mathbf{r}=0 \\] The 3rd term equals 0 when: Irrotational flow: \\(\\mathbf{\\xi}\\equiv0\\) No flow: \\(\\mathbf{V}\\equiv0\\), not possible \\(d\\mathbf{r}\\) is parallel to \\(\\mathbf{V}\\), \\(\\mathbf{V} \\times d \\boldsymbol{r} \\equiv 0\\) since \\((\\boldsymbol{\\xi} \\times \\mathbf{V}) \\cdot d \\boldsymbol{r} \\equiv(\\mathbf{V} \\times d \\boldsymbol{r}) \\cdot \\boldsymbol{\\xi}\\) our path is a streamline In order to eliminate the 3rd term while keeping the flow rotational, we integrate the equation along the streamline segment \\(ds\\), \\[ \\begin{aligned} \\int_1^2\\left[\\frac{\\partial\\mathbf{V}}{\\partial t} + \\boldsymbol{\\nabla}\\left(\\frac{1}{2} V^2\\right)- \\mathbf{g} +\\frac{1}{\\rho}\\boldsymbol{\\nabla}\\left(p\\right)\\right]ds=0 \\\\ \\int_1^2\\frac{\\partial\\mathbf{V}}{\\partial t}ds + \\left(\\frac{1}{2} V_2^2-\\frac{1}{2} V_1^2\\right) + g(z_2-z_1) +\\int_1^2\\frac{1}{\\rho}\\left(dp\\right)=0 \\end{aligned} \\] Rearrange to get the unsteady Bernoulli equation for compressible flow: \\[ \\color{purple}\\int_1^2\\frac{\\partial\\mathbf{V}}{\\partial t}ds+\\int_1^2\\frac{1}{\\rho}\\left(dp\\right)+ \\left(\\frac{1}{2} V_2^2-\\frac{1}{2} V_1^2\\right) + g(z_2-z_1)=0 \\] Plus the steady and incompressible conditions, the function reduced to the familiar expression: \\[ \\color{purple} \\frac{p}{\\rho}+\\frac{1}{2}V^2+gz = Const,~\\mathrm{~along~a~streamline} \\] Plus the irrotational condition, the 3rd term remains 0 regardless the trajectory, the function becomes: \\[ \\color{purple} \\frac{p}{\\rho}+\\frac{1}{2}V^2+gz = Const,~\\mathrm{~everywhere} \\] 4.4 Velocity potential Vector analysis tells us that if the curl of a vector field is zero then that vector field must itself be the gradient of a scalar function. That is, The function \\(\\phi\\) is called a potential function. \\[ \\boldsymbol{\\nabla} \\times \\mathbf{V} \\equiv 0 \\quad \\Rightarrow \\quad \\mathbf{V}=\\boldsymbol{\\nabla} \\phi \\] Velocity potential \\(\\phi\\) is another scalar function, a complementary to the stream function \\(\\psi\\).It is applicable only in irrotational flow. Some useful properties: In Cartesian coordinate, it reduce the 3 velocity components \\(u\\), \\(v\\), \\(w\\) into a single scalar: \\[ u=\\frac{\\partial \\phi}{\\partial x} \\quad v=\\frac{\\partial \\phi}{\\partial y} \\quad w=\\frac{\\partial \\phi}{\\partial z} \\] Line of constant \\(\\phi\\) is called potential lines. In two-dimensional flow, potential lines are everywhere orthogonal to the streamlines, because: \\[ u=\\frac{\\partial \\psi}{\\partial y}=\\frac{\\partial \\phi}{\\partial x} \\quad v=-\\frac{\\partial \\psi}{\\partial x}=\\frac{\\partial \\phi}{\\partial y} \\] The dot-product of their gradients are: \\[ \\left[\\frac{\\partial \\psi}{\\partial x} \\mathbf{i}+\\frac{\\partial \\psi}{\\partial y} \\mathbf{j}\\right] \\cdot\\left[\\frac{\\partial \\phi}{\\partial x} \\mathbf{i}+\\frac{\\partial \\phi}{\\partial y} \\mathbf{j}\\right]=u(-v)+u v \\equiv 0 \\] If \\(\\phi\\) exists, substitute the definition into the unsteady Bernoulli equation, \\[ \\frac{\\partial \\phi}{\\partial t}+\\int \\frac{d p}{\\rho}+\\frac{1}{2}|\\boldsymbol{\\nabla} \\phi|^{2}+g z=\\mathrm{const} \\] It is an equation between just two scalar quantities, \\(\\phi\\) and \\(p\\). 5 Vortex Motion and Applications Vortices are structures within the flow in which fluid is rotating about an axis line (which may be straight or curved). A vortex line is therefore defined as a line which is always in the same direction as the local vorticity vector \\(\\boldsymbol{\\xi}\\). Similar to streamline, vortex lines \\((x, y, z) = (x(s), y(s), z(s))\\) are obtained by solving: \\[ \\frac{dx/ds}{d\\xi_x}=\\frac{dy/ds}{d\\xi_y}=\\frac{dz/ds}{d\\xi_z} \\] Similar to steam tube, vertex lines which pass through a closed curve in space form a vortex tube. 5.1 Circulation Fluid circulation describes the strength of rotation, or strength of fluid swirling, within a closed contour \\(C(t)\\). Mathematically it is defined as the integral of velocity along the contour curve: \\[ \\Gamma=\\oint_{C(t)} \\mathbf{V} d s=\\int_{S} \\boldsymbol{\\xi} \\cdot \\boldsymbol{n} d S \\] 5.1.1 Material elements and its motion Consider how a infinitesimal displacement \\(d\\mathbf{s}\\) deforms over a small time \\(dt\\), illustrated in the diagram below. We have \\(d(d\\mathbf{s})\\) the material line element: \\[ \\begin{aligned} d(d \\boldsymbol{s})=d \\boldsymbol{s}_{1}-d \\boldsymbol{s}_{0} &amp;=\\left(\\boldsymbol{x}+d \\boldsymbol{s}_{0}+\\mathbf{V}\\left(\\boldsymbol{x}+d \\boldsymbol{s}_{0}\\right) d t\\right)-(\\boldsymbol{x}+\\mathbf{V}(\\boldsymbol{x}) d t)-d \\boldsymbol{s}_{0} \\\\ &amp;=\\left(\\mathbf{V}\\left(\\boldsymbol{x}+d \\boldsymbol{s}_{0}\\right)-\\mathbf{V}(\\boldsymbol{x})\\right) d t \\\\ &amp;=d \\boldsymbol{s}_{0} \\frac{\\partial \\mathbf{V}}{\\partial\\left(d \\boldsymbol{s}_{0}\\right)} d t \\\\ &amp;=d \\boldsymbol{s}_{0} \\cdot \\boldsymbol{\\nabla} \\mathbf{V} d t \\end{aligned} \\] Therefore: \\[ \\frac{D(d\\mathbf{s})}{Dt} = (ds\\cdot\\boldsymbol{\\nabla})\\mathbf{V} \\] 5.2 Kelvin’s Circulation Theorem Kelvin’s Circulation Theorem status the expression of the rate of change of the circulation \\(\\frac{D\\Gamma}{Dt}\\) and determine how a circulation around a fluid loop varies as the loop moves with the flow. (reference) Apply material derivative to circulation we have: \\[ \\begin{aligned} \\frac{D}{Dt}\\Gamma&amp;=\\frac{D}{Dt}\\oint_{C(t)} \\mathbf{V} d \\mathbf{s} \\\\ &amp;= \\oint_{C(t)}\\frac{D}{Dt}(\\mathbf{V} d \\mathbf{s} ) \\\\ &amp;= \\oint_{C(t)}\\frac{D\\mathbf{V}}{Dt}\\cdot d \\mathbf{s} + \\oint_{C(t)}\\mathbf{V}\\cdot \\frac{D(d \\mathbf{s})}{Dt} \\\\ \\end{aligned} \\] Substitute material line element into the last term to get a scalar inside the loop integration, then we have: \\[ \\frac{D}{Dt}\\Gamma = \\oint_{C(t)}\\frac{D\\mathbf{V}}{Dt}d \\mathbf{s} \\] Recall the general linear momentum equation and substitute the material derivative of velocity: \\[ \\begin{aligned} \\frac{D}{Dt}\\Gamma &amp;= \\oint_{C(t)}\\left(\\mathbf{g} - \\frac{\\boldsymbol{\\nabla}p}{\\rho} + \\frac{\\boldsymbol{\\boldsymbol{\\nabla}\\cdot\\tau_{ij}}}{\\rho}\\right)d \\mathbf{s} \\\\ &amp;= \\oint_{C(t)}\\mathbf{g}d \\mathbf{s} - \\oint_{C(t)}\\frac{\\boldsymbol{\\nabla}p}{\\rho} d\\mathbf{s} + \\oint_{C(t)}\\frac{\\boldsymbol{\\nabla}\\cdot\\boldsymbol{\\tau_{ij}}}{\\rho}d \\mathbf{s} \\end{aligned} \\] This function is not zero unless: 1st term: body force torque is zero, body force is irrotational, \\(\\mathbf{g} = \\nabla\\phi\\), \\(\\phi\\) is a scalar. 2nd term: \\(p = p(\\rho)\\) or \\(\\rho = const.\\)(incompressible and isotropic) 3rd term: inviscid, \\(\\boldsymbol{\\tau_{ij}}=0\\) 5.2.1 Aerofoil lift and Kutta-Joukowski Theorem One application of the Kelvin Circulation Theorem is in explaining the lift attained by an aerofoil during the shedding of the starting vortex. Consider a stationary aerofoil shown in the diagram below. At time \\(t = 0\\), the aerofoil is stationary, there is no vorticity and around the path \\(C(t)\\) the circulation is \\(\\Gamma = 0\\). As the flow velocity increases, vorticity is shed behind the aerofoil leading to positive \\(\\Gamma\\). By Kelvin’s circulation theorem, the circulation \\(\\Gamma_0\\) around \\(C(t)\\) is independent of time. Therefore, there must be negative \\(\\Gamma_1\\) around the aerofoil, which leads to lift by the Kutta-Joukowski theorem (\\(L&#39; = −\\rho u\\Gamma\\)). 5.3 Helmholtz Theorems Suppose we have an inviscid, incompressible fluid of constant density moving under a conservative body force, then The quantity \\[ \\Gamma=\\int_{S} \\boldsymbol{\\xi} \\cdot \\boldsymbol{n} d S \\] is the same for all cross-sections \\(S\\) of a vortex tube. i.e. the strength of a vortex is constant along the length of the vortex. A vortex filament cannot end in the fluid; it must extend to the boundaries of the fluid, infinity, or form a closed loop If fluid is initially irrotational, in the absense of rotational forces, it remains irrotational indefinitely. 5.3.1 Vortex rings A vivid example of Helmholtz’s theorems can be seen in vortex (smoke) rings. These are vortices in which the core vortex line forms a closed loop (theorem #2). Such vortices can retain their strength (theorem #1) and travel significant distances (the smoke is carried in the vortex).","categories":[],"tags":[{"name":"fluid dynamics","slug":"fluid-dynamics","permalink":"https://daydreamatnight.github.io/tags/fluid-dynamics/"}],"author":"Ryan LI"},{"title":"Derivation of Integral Fluid Equations","slug":"Derive-the-NS-equation-from-scratch-AGAIN","date":"2022-05-12T09:39:18.000Z","updated":"2022-05-20T16:26:46.974Z","comments":true,"path":"2022/05/12/Derive-the-NS-equation-from-scratch-AGAIN/","link":"","permalink":"https://daydreamatnight.github.io/2022/05/12/Derive-the-NS-equation-from-scratch-AGAIN/","excerpt":"Feeling unsafe when deploying CFD algorithms, the best way to alleviate the anxiety is to derive the fundamentals again.","text":"Feeling unsafe when deploying CFD algorithms, the best way to alleviate the anxiety is to derive the fundamentals again. 1 Control Volumes 1.1 Basic Physical laws of fluid Mechanics 1.1.1 Control mass &amp; Lagrangian frame of reference 4 terms &amp; 3 facts: A system (or control mass) is a collection of moving particles of interest. The boundary separates the system with its surroundings. The boundary may move and deform with the moving particles. 1.1.2 Laws of Mechanics 3 laws of a control mass (suitable for bath fluid and solid systems): Conservation of mass \\[ m=const\\text { or equivalently } \\frac{\\mathrm{d} m}{\\mathrm{~d} t}=0 \\] Linear momentum equation (Newton's second law) \\[ \\textbf{F} = m\\textbf{a} = m\\frac{d\\textbf{V}}{dt} = \\frac{d}{dt}(m\\textbf{V}) \\] First law of thermodynamics \\[ dE=\\delta Q-\\delta W \\] Angular coordinate is not considered 1.1.3 Control volume &amp; Eulerian frame of reference A control volume is a region of interest in space. A control surface closures the control volume Mass, heat and work can cross the control surface and mass and properties can change with time within the control volume. 1.1.4 Volume and mass rate of flow 3 key quantities of interest: Velocity \\(\\textbf{V}\\), Volume flow \\(Q\\) and Mass flow \\(\\dot{m}\\). Shown above, given a flow of fluid passing through an infinitesimal control surface (\\(S\\)) with an area of \\(dA\\) at an angle \\(\\theta\\) to the surface outward normal \\(\\textbf{n}\\), in time \\(dt\\), the volume of the flow can be expressed as: \\[ d \\mathcal{V}=V d t d A \\cos \\theta=(\\mathbf{V} \\cdot \\mathbf{n}) d A d t \\] Flow rate through surface can be integrated as: \\[ \\color{purple}{Q=\\int_{S} \\frac{\\mathrm{d} \\mathcal{V}}{\\mathrm{d} t}=\\int_{S}(\\mathbf{V} \\cdot \\mathbf{n}) d A} \\] Sign of \\(Q\\) is important, inflow = negative, outflow = positive. And the corresponding mass flow is: \\[ \\dot{m}=\\int_{S} \\rho(\\mathbf{x})(\\mathbf{V} \\cdot \\mathbf{n}) d A \\] In the special case that \\(\\rho\\) and \\(\\mathbf{V}\\) remain constant in space, \\[ \\dot{m}=\\rho AV \\] 1.2 The Reynolds Transport Theorem The theorem refers to the relationship between (a) time derivative of a system property and (b) the rate of change of that property within a region of interest. Let \\(B\\) be the property (e.g. mass, energy, momentum) and \\(\\beta\\) be the amount of \\(B\\) per unit mass \\(\\mathrm{d}B/\\mathrm{d}m\\), often called the intensive value. The Reynolds Transport Theorem stats that: \\[ \\color{purple}{\\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(B_{s}\\right)=\\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(\\int_{C V} \\beta \\rho d \\mathcal{V}\\right)+\\int_{C S} \\beta \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A} \\] 1.2.1 concise proof Consider a fixed control volume with fluid moving through it shown as below. The control mass (particles) of interest move from the area surrounded by the solid circle to the area surrounded by dashed line within a time interval of \\(dt\\). The change rate of \\(B\\) of the control mass equals the sum of the change rate of B in the fixed control volume (\\(CV\\)) outflow of B from the fixed control volume (\\(CV\\)) inflow of B into the fixed control volume (\\(CV\\)) The condition fixed is critical, if the control volume is moving with a velocity \\(\\mathbf{V_{s}}\\), a reference system conversion is needed to set control volume fix, i.e. using relative velocity \\(\\mathbf{V_{r}}=\\mathbf{V}-\\mathbf{V_{s}}\\) Consider \\(b = \\mathrm{d}B/\\mathrm{d}m\\) Total amount of \\(B\\) in the fixed control volume (\\(CV\\)) is: \\[ B_{C V}=\\int_{C V} \\beta d m=\\int_{C V} \\beta \\rho d \\mathcal{V} \\] Correspondingly, the change rate of \\(B\\) within \\(CV\\): \\[ \\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(\\int_{C V} \\beta \\rho d \\mathcal{V}\\right) \\] Sum of inflow and outflow of \\(B\\) toward \\(CV\\): \\[ \\int_{C S} \\beta \\rho(\\mathbf{V} \\cdot \\hat{\\mathbf{n}}) d A_{o u t} + \\int_{C S} \\beta \\rho(\\mathbf{V} \\cdot \\hat{\\mathbf{n}}) d A_{in} = \\int_{C S} \\beta \\rho(\\mathbf{V} \\cdot \\hat{\\mathbf{n}}) d A \\] Though this equation seems intuitive, more steps are needed to prove this from the idea of limits. As a result, the Reynolds transport theorem is arrived. 2 Conservation of Mass and Momentum The Reynolds transport theorem (RTT) establishes the relation between control mass and control volume, we already have control mass laws in 1.1.2 Laws of Mechanics. To have the laws of fluid mechanics, the only thing needed is bringing RTT into laws of mechanics. classDiagram direction LR mechanical --&gt; RTT RTT --&gt; fluid class mechanical&#123; +Conservation of Mass +Newton&#x27;s 2nd law +Theomal equation &#125; class fluid&#123; +Continuity equation +Momentum equation +Energy equation &#125; 2.1 Conservation of Mass We have RTT together with: \\[ B=m, \\\\ \\Rightarrow \\beta=\\frac{\\mathrm{d}m}{\\mathrm{d}m}=1, \\\\ \\frac{\\mathrm{d}m}{\\mathrm{d}t}=0 \\] As a result, \\[ \\color{purple}{\\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(m\\right)=0=\\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(\\int_{C V} \\rho d \\mathcal{V}\\right)+\\int_{C S} \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A} \\] 2.1.1 simplification In the case of a fixed \\(CV\\), the equation becomes, \\[ \\int_{C V} \\frac{\\partial}{\\partial t}\\rho d \\mathcal{V}+\\int_{C S} \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A=0 \\] Note that if \\(CV\\) is deformable, \\({\\color{red}\\frac{\\mathrm{d}}{\\mathrm{d} t}}\\left(\\int_{C V} \\beta d \\mathcal{V}\\right)\\neq \\left(\\int_{C V} {\\color{red}\\frac{\\partial}{\\partial t}}\\beta d \\mathcal{V}\\right)\\). Note that instead of \\(\\frac{\\mathrm{d}}{\\mathrm{d} t}\\), \\(\\frac{\\partial}{\\partial t}\\) is used when moving into the integration sign \\(\\int_{CS}\\), because inside the integration, \\(\\beta=\\beta(x,y,z,t)\\). Steady flow \\(\\frac{\\partial}{\\partial t}\\rho=0\\), then \\[ \\int_{C S} \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A=0 \\] it also means the rate of mass entering the \\(CV\\) equals that of leaving it i.e. \\[ \\sum_{i}\\left(\\dot{m}_{i}\\right)_{i n}=\\sum_{i}\\left(\\dot{m}_{i}\\right)_{o u t} \\] as a result \\[ \\dot{m}_{CS} = \\int_{C S} \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A \\] Incompressible flow \\(rho=Constant\\), then it happens when a steady flow has a speed &lt; 0.3 Ma \\[ \\int_{C S}(\\mathbf{V} \\cdot \\mathbf{n}) d A=0 \\] it means net volume flow entering and leaving the \\(CV\\) is zero 2.2 Linear Momentum Equation We have RTT together with: \\[ \\mathbf{B}=m\\mathbf{V}, \\\\ \\Rightarrow \\beta=\\frac{\\mathrm{d}m\\mathbf{V}}{\\mathrm{d}m}=\\mathbf{V}, \\\\ \\textbf{F} = \\frac{d}{dt}(m\\textbf{V}) \\] therefore: \\[ \\color{purple}{\\sum\\mathbf{F} = \\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(\\int_{C V} \\mathbf{V} \\rho d \\mathcal{V}\\right)+\\int_{C S} \\mathbf{V} \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A} \\] Some comments on this equation:this is a vector equation that can be divided into 3 directions, e.g. in x direction: \\[\\sum\\mathbf{F_{x}} = \\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(\\int_{C V} \\mathbf{V} \\rho d \\mathcal{V}\\right)+\\int_{C S} \\mathbf{V} \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A\\]\\(\\sum \\mathbf{F}\\) includes forces acting on the boundary (pressure and viscous stress forces) and body force (gravity).inertial (non-accelerating) frame of reference is needed 3 Energy Equation and the Bernoulli Equation 3.1 the energy equation We have RTT together with: \\[ \\mathbf{B}=E, \\\\ \\Rightarrow \\beta=\\frac{\\mathrm{d}E}{\\mathrm{d}m}=e, \\\\ dE=\\delta Q-\\delta W \\] As a result: \\[ \\frac{\\mathrm{d}Q}{\\mathrm{d} t}-\\frac{\\mathrm{d}W}{\\mathrm{d} t}=\\frac{\\mathrm{d}E}{\\mathrm{d} t}=\\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(\\int_{C V} e\\rho d \\mathcal{V}\\right)+\\int_{C S} e\\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A \\] where \\(Q\\) denotes heat added to the system(energy diffusion) \\(W\\) denotes work done by the system(performed by forces) \\(e\\), energy per unit mass is a sum of Internal: \\(e_{i}=\\hat{u}\\), temperature, internal pressure Kinetic: \\(e_{k}=\\frac{u^{2}}{2}\\), momentum of fluid Potential: \\(e_{p}=gz\\), gravity \\[ e=\\hat{u}+\\frac{u^{2}}{2}+gz \\] \\(\\hat{u}\\) denotes the internal energy, nothing to do with \\(u\\) the velocity Other forms of energy might be involved such as chemical, electromagnetic, but is neglected here. 3.1.1 Work \\[ \\dot{W} = \\dot{W}_{s}+\\dot{W}_{p}+\\dot{W}_{v} \\] Note the symbol of work in this section is actually rate of work \\(\\dot{W} = \\frac{dW}{dt}\\) As shown, work is a sum of: Shaft work: \\(\\dot{W}_{s}\\), done by the fluid Pressure work: \\(\\dot{W}_{p}\\), only applicable at surfaces, net effect is always zero Pressure work performed on a surface element: \\[ d \\dot{W}_{p}=-p(-\\mathbf{V} \\cdot \\mathbf{n}) d A \\] and the total pressure work on a control surface can then be integrated: \\[ \\dot{W}_{p}=\\int_{CS}p(\\mathbf{V} \\cdot \\mathbf{n}) d A \\] Viscous work: \\(W_{v}\\), only applicable at surfaces, due to the shear stresses Viscous work performed on a surface in differential and integral formats: \\[ d \\dot{W}_{v}=-\\tau \\cdot \\mathbf{V} d A \\] \\[ \\dot{W}_{v}=-\\int_{C S} \\tau \\cdot \\mathbf{V} d A \\] Note the negative sign represents the work done on the fluid, instead of the other way around. This term is always negligible when the control surface is at a:Solid surface: \\(\\mathbf{V}=0\\) from no-slip condition at wall, so \\(\\dot{W}_{v}=0\\)Machine surface, always absorbed in $ _{s}$Inlets and outlets, flow is approximately normal to the surface, the only stresses are normal and typically extremely small, neglected.This term needs to be evaluated for steamline surfaces. As a result the rate of work is: \\[ \\dot{W} = \\dot{W}_{s}+\\int_{CS}p(\\mathbf{V} \\cdot \\mathbf{n}) d A-\\int_{C S} (\\tau \\cdot \\mathbf{V})_{stream} d A \\] 3.1.2 General Energy Equation Substitute previous work equation into the energy equation, while leave the viscosity work as a whole: \\[ \\dot{Q}-\\dot{W}_{s}-\\int_{CS}p(\\mathbf{V} \\cdot \\mathbf{n}) d A-\\dot{W}_{v}=\\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(\\int_{C V} e\\rho d \\mathcal{V}\\right)+\\int_{C S} e\\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A \\] Combine the left 3rd term, with the most right term: \\[ \\dot{Q}-\\dot{W}_{s}-\\dot{W}_{v}=\\frac{\\mathrm{d}}{\\mathrm{d} t}\\left(\\int_{C V} e\\rho d \\mathcal{V}\\right)+\\int_{C S} \\left(e+\\frac{p}{\\rho}\\right)\\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A \\] Substitute into \\(e=\\hat{u}+\\frac{u^{2}}{2}+gz\\), and \\(\\hat{h}=\\hat{u}+\\frac{p}{\\rho}\\), here is the final form of the energy equation: \\[ \\color{purple}{\\begin{aligned} \\dot{Q}-\\dot{W}_{s}-\\dot{W}_{v} &amp;=\\frac{\\mathrm{d}}{\\mathrm{d} t}\\left[\\int_{C V}\\left(\\hat{u}+\\frac{1}{2} V^{2}+g z\\right) \\rho d \\mathcal{V}\\right] \\\\ &amp;+\\int_{C S}\\left(\\hat{h}+\\frac{1}{2} V^{2}+g z\\right) \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A \\end{aligned}} \\] Enthalpy: The amount of heat content used or released in a system of constant pressure \\[\\hat{h}=\\hat{u}+\\frac{p}{\\rho}\\] 3.1.3 Simplicatation One-dimensional, we have the surface integration \\[ \\begin{aligned} \\int_{C S}\\left(\\hat{h}+\\frac{1}{2} V^{2}+g z\\right) \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A=&amp; \\sum\\left(\\hat{h}+\\frac{1}{2} V^{2}+g z\\right)_{out} \\dot{m}_{out} \\\\ &amp;-\\sum\\left(\\hat{h}+\\frac{1}{2} V^{2}+g z\\right)_{in} \\dot{m}_{in} \\end{aligned} \\] Steady one dimensional flow with one inlet (point 1) and outlet (point 2) \\[ \\dot{Q}-\\dot{W}_{s}-\\dot{W}_{v}=\\dot{m}_{1}\\left(\\hat{h}_{1}+\\frac{1}{2} V_{1}^{2}+g z_{1}\\right)-\\dot{m}_{2}\\left(\\hat{h}_{2}+\\frac{1}{2} V_{2}^{2}+g z_{2}\\right) \\] by conservation of mass i.e. \\(\\dot{m}_{1} = \\dot{m}_{2}\\), \\[ \\hat{h}_{1}+\\frac{1}{2} V_{1}^{2}+g z_{1}=\\left(\\hat{h}_{2}+\\frac{1}{2} V_{2}^{2}+g z_{2}\\right)-q+w_{s}+w_{v} \\] where \\(q\\), \\(w_{s}\\) and \\(w_{v}\\) are energy, shaft work and viscosity work per unit mass, respectively. 3.2 The Bernoulli Equation 3.2.1 Streamlines, streamtubes, pathlines and streaklines Streamline, a line tangent to the velocity field everywhere. \\[ \\frac{d x}{u}=\\frac{d y}{v}=\\frac{d z}{w}=\\frac{d r}{|\\mathbf{V}|} \\] Streamtube, a closed arrangement of streamlines over which fluid cannot pass. Pathline, actual trajectory followed by a given particle over time. Streakline, history of a particles position which passed through a given point For steady flow, streamlines, pathlines and streaklines coincide. 3.2.2 Derivation of Bernoulli's Equation Control volume: streamtube Conservation of mass in steady and incompressibility condition: \\[ \\int_{C S} \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A =0 \\] \\[ \\mathrm{d}\\dot{m} = \\rho\\mathbf{V}A = \\rho\\left(\\mathbf{V}+\\mathrm{d}\\mathbf{V}\\right)\\left(A+\\mathrm{d}A\\right) \\] The forces along tube in the streamwise direction: Body force due to gravity: \\[ \\begin{aligned} F_{B}=-d W \\sin \\theta &amp;=-\\rho g d \\mathcal{V} \\sin \\theta \\\\ &amp;=-\\rho g\\left(A+\\frac{d A}{2}\\right) d s \\sin \\theta \\\\ &amp;=-\\rho g\\left(A+\\frac{d A}{2}\\right) d z \\\\ &amp;\\approx-\\rho gAd z \\end{aligned} \\] Surface force due to pressure, in frictionless condition: \\[ \\begin{aligned} F_{S} &amp;=p A-(p+d p)(A+d A)+\\frac{1}{2}(p+p+d p) d A \\\\ &amp;\\approx-A d p \\end{aligned} \\] Apply linear momentum conservation in the streamwise direction, steady condition: \\[ \\begin{aligned} F_{B}+F_{S} &amp;=\\int_{C S} V \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A \\\\ &amp;=V \\rho(-V) A+(V+d V) \\rho(V+d V)(A+d A) \\end{aligned} \\] With continuity equation before \\(\\rho VA=\\rho(V+d V)(A+d A)\\): \\[ \\begin{aligned} F_{B}+F_{S} &amp;=\\int_{C S} V \\rho(\\mathbf{V} \\cdot \\mathbf{n}) d A \\\\ &amp;=V \\rho(-V) A+(V+d V) \\rho VA \\\\ &amp;=\\rho AVd V \\end{aligned} \\] Substitute the forces: \\[ \\begin{aligned} -\\rho gAd z -A d p=\\rho AVd V \\\\ \\color{purple}{gd z +\\frac{d p}{\\rho}+Vd V =0} \\end{aligned} \\] Integrated along a streamline: \\[ \\begin{aligned} \\int_{S}gd z +\\int_{S}\\frac{d p}{\\rho}+\\int_{S}Vd V =0 \\\\ \\color{purple}{gz+\\frac{p}{\\rho}+\\frac{1}{2}V^{2}=C} \\end{aligned} \\] Assumptions below are made:steady flowincompressible, typically \\(Ma&lt;0.3\\)frictionlessflow along a single streamline","categories":[],"tags":[{"name":"fluid dynamics","slug":"fluid-dynamics","permalink":"https://daydreamatnight.github.io/tags/fluid-dynamics/"}],"author":"Ryan LI"},{"title":"Swin transformer","slug":"paper-reading-Swin-transformer","date":"2022-05-09T03:37:19.000Z","updated":"2022-06-09T10:25:16.671Z","comments":true,"path":"2022/05/09/paper-reading-Swin-transformer/","link":"","permalink":"https://daydreamatnight.github.io/2022/05/09/paper-reading-Swin-transformer/","excerpt":"After ViT, Swin-transformer further demonstrated the potential of transformer in CV. This work has swept all major CV tasks since its publication, including COCO and ADE20K. And it's awarded as best paper by ICCV2021.","text":"After ViT, Swin-transformer further demonstrated the potential of transformer in CV. This work has swept all major CV tasks since its publication, including COCO and ADE20K. And it's awarded as best paper by ICCV2021. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned. Paper link: Swin Transformer: Hierarchical Vision Transformer using Shifted Windows(newer version on arXiv) Useful links: Paper explanation video Official Github Abstract Conclusion Key figures Introduction","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"Contrastive learning review","slug":"paper-reading-contrastive-learning-review","date":"2022-05-02T17:21:04.000Z","updated":"2022-06-09T10:24:31.969Z","comments":true,"path":"2022/05/03/paper-reading-contrastive-learning-review/","link":"","permalink":"https://daydreamatnight.github.io/2022/05/03/paper-reading-contrastive-learning-review/","excerpt":"As a form of unsupervised learning, contrastive learning plays an ever more important role in deep learning. Here's a review of contrastive learning in CV since 2018, including 4 stages and 14 papers. This blog is written following the lead of this review video.","text":"As a form of unsupervised learning, contrastive learning plays an ever more important role in deep learning. Here's a review of contrastive learning in CV since 2018, including 4 stages and 14 papers. This blog is written following the lead of this review video. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned. Since, 2018, the development of contrastive learning can be concluded in 4 stages, and an overview is shown below: Brief introduction Contrastive learning is a machine learning technique used to learn the general features of a dataset without labels by teaching the model which data points are similar or different. The idea is intuitive, given 3 pictures above; 2 cats and 1 dog. The goal of contrastive learning is to discriminate the cats from the dog by comparing the pixel similarity of them. Dive into the model, inputing \\(X_{cat1}, X_{cat2}, X_{dog}\\) to a neural network. The distance between the resulting latent features of the 2 cats \\(L(f_{cat1}, f_{cat2})\\) should approach 0 while those between the cats and the dog \\(L(f_{cat}, f_{dog})\\) should approach infinity. Contrastive learning is a very portable and flexible technique. It can be used anywhere as long as you can design a rule (preset task) to define which data are similar (positive sample) and which are different (negative sample). In the above example, one defines the pictures of the same species as positive, and those of different species as negative. Actually, although it is usually seen as an unsupervised technique, contrastive learning is not meant to be unsupervised. As we can see above, under that context (preset task), it is more like a supervised constrained clustering. The model still relies on labeled datasets containing pictures of each species. But people manage to make this technique unsupervised or self-supervised in CV by designing clever preset tasks. For example, the instance discrimination we are about to see below. Except from designing of the preset task, another key point is the design of loss function. The preset task sets the goal of training while the loss function defines how to do it. Unlike the loss functions that are often used in discrimination learning (cross entropy) or generative learning (L1-L2 loss), contrastive losses measure the similarity of each feature, which varies as the encoded features keep updating with epochs[5] . Different kinds of loss functions are developed by follow up papers to improve the training efficiency and stability. Stage 1: Wild growth(-2019mid) At this stage, preset tasks, loss function, model and research area are not unified. InstDisc[1] Preset task The figure above perfectly explains the motive and goal of the instance discrimination. Just as the name suggests, it extends the discrimination task from the previous class level to the instance level i.e. every single instance is a class. Method As shown above, InstDisc[1] proposes a CNN (ResNet50) based model that encodes a batch (batch size 256) of figures into a latent feature space(128D), where the distance between each figure are maximised. The way of training such a model is through contrastive learning. For one feature encoded from a particular image, the positive samples are the features encoded from the augmentations of the picture and the negative samples are obtained by sampling(4096) the set of features encoded from all the other images. In this way, the model becomes self-supervised. To modify the general example above, instance discrimination task can be illustrated as below. Besides, in order to save all the negative features without blowing up the memory, a memory bank is proposed. In every epoch, 4098 negative features are sampled from the memory bank. And the memory bank is updated with features in each epoch, under a method of proximal regularisation. Loss function Noise Contrastive Estimation(NCE) loss is applied to push away the negatives while clustering the positives.. Comment This paper proposes the fundamental preset task instance discrimination. Together with the NCE loss, a fine result is achieved. Besides, the idea of saving a bounden of negative samples with other data structures, the proximal regularisation (momentum updated memory bank) method inspires the following queue method and the momentum updated decoder[5] Even the super-parameter setting is also typical and a lot of work follows, including MoCo v1[5]. InvaSpread[2] Less influential as it is, this paper can be seen as a preliminary work of the SimCLR v1[6]. Unlike InstDisc[1]with additional structure to save negative samples, the positive and negative samples in InvaSpread[2] are from the same batch. And only one encoder is used to process the samples. Method The preset task is still instance discrimination, while the sampling is done in a different way. As shown above, assuming \\(x_1\\) as the original, the positive sample is \\([\\hat{x}_1]\\), while the negative sample is \\([x_2,x_3,\\hat{x}_2,\\hat{x}_3]\\), which means taking batch size as 256, the resulting positive and negative sample sizes are \\(256\\) and \\((256-1)*2\\) respectively. Recalling InstDisc[1], the negative sample is from outside this batch and the size can be much larger. Yet the downside part of it is that it requires another encoder for the negatives. Whereas, with positive and negative in one batch, only one encoder is needed and the model thus becomes end-to-end. The loss function employed is a variant of the NCL loss. Comment Together with the SimCLR series, these papers stand for another route of contrastive learning, which is featured by: End-to-end Only one encoder No reliance on extra data structures Positive and negatives are in the same batch This paper is very similar to SimCLR but has rather mediocre performance. There are several reasons: The batch size is too small - only 256, not enough negative samples (no TPU, no money) No powerful augmentations or the MLP projector that are proposed by SimCLR v1[6] CPC[3] Apart from instance discrimination, this paper proposes another pretext task - contrastive predictive coding, a reminiscence of the difference between discriminative and generative models. And this approach is generalisable enough to copes with audio, images, text, and even reinforcement learning. pretext task Given a temporal sequence, the encoded features of the sequence before time t are fed into an auto-regressive network (RNN or LSTM). The \"origin\" is defined as the RNN predicted features after time t \\(\\hat{z}_{t+1} - \\hat{z}_{t+4}\\), the positive sample \\(z_{t+1} - z_{t+4}\\), is defined as the features encoded from feature data \\(x_{t+1} - x_{t+4}\\). The negative samples can be flexible, a typical way is the features encoded from data other than \\(x_{t+1} - x_{t+4}\\). In this way, the input \\(X\\) can vary from picture patches, audio, video etc. CMC[4] CMC propose a more general way of defining positive sample, basically the different view of one instance can be defined as positive. Motivation It is perfectly presented in the abstract, here is just a paraphrase. In the real world, information from different angle of view such as smell, sight and touch describe one thing together. Though these sensory channels might be different, the high level features such as physics, geometry and semantics tend to be same. And this preset task aims to train a view-invariant model. Pre-text task As the figure above illustrates, the representations of the same scene, no matter which view, are set as positive while representations from different scene as negative. Loss function The contrastive Learning loss is designed to maximise the mutual information between features of different views. Comment CMC is one of the first works to apply contrastive learning to multi-view problems. It demonstrates the flexibility of contrastive learning, and the portability of applying it to multi-view problems. As a result, OpenAI developed the famous Clip[16] model, where the image and its language description are seen as a positive pair. One slight drawback of multi-view might be the need for different encoders to handle different views. For example, in Clip[16], ViT and a large scale language model are applied to process different modes. Yet, given the various applications of transformer, this drawback may be addressed by processing multi-model problems via one single transformer model. Here is a example of doing it - MA-CLIP[18]. Stage 2: Two heroes(2019mid-2020mid) Their are MoCo and SimCLR. In this stage, the development is very fast. The time intervals between each works introduced below are typically 1-2 months, even less than 1 month. And the SOTA on imageNet were refreshed every month. And the model architecture (encoder then projection), loss function(infoNCE), momentum encoder setting, more powerful method augmentation and more epochs tend to come together. And the result trend to the supervised learning accuracy. MoCo v1[5] It is the milestone of CV contrastive learning, and it is the first model that outperform supervised learning. It is a breakthrough that rise the confidence of unsupervised learning. Method As highlighted above, MoCo has two contributions: (1) momentum encoder (2) queue MoCo stands for momentum contrast. Compared with InstDisc[1], MoCo updates the encoder with momentum to prevent the encoder changing too rapidly between two batches. Besides, the application of queue instead of memory bank makes sure to update the negative dictionary efficiently. Further more, MoCo introduces another loss function called infoNCE, very similar to softmax. Comment Actually, the details of MoCo almost follows exactly the InstDisc[1], including backbone of ResNet 50, 128D of output size, L2-norm of outputs, 0.07 of loss temperature, the data augmentation setting, 0.03 learning rate and 200 epochs of training. It seems like MoCo is just make some improvements to InstDisc[1]. Nevertheless, MoCo is classic. The reason may be the effectiveness and the influential of the improvements. For example, the momentum encoder setting is inherited by following SimCLR [6], BYOL[10], even the latest work. Furthermore, the way of writing is just beautiful and the scope is much higher than an ordinary work. Instead of presenting those improvements that they made. The authors conclude the preliminary works as a task of dictionary look-up. Personally, I feel like I understand the contrastive learning only until I read through the introduction part of MoCO. SimCLR v1[6] SimCLR stands for Simple Contrastive learning, it is easy to understand and often used as example in many introduction blogs. The only drawback is the requirement of large batch size. Method It is very similar to InvaSpread[2], the positive size is \\(N\\) While the negative size is \\(2(N-1)\\) . The key contribution is a \"projection head(mlp with linear then RELU)\" after the shared encoder, only applied during the training process. The improvement results in a gain of the accuracy up to 10%. A loss function similar to infoNCE is used to maximise the agreement between positive and negative samples. Data augmentation ablation SimCLR does a detailed ablation test searching the most effective augmentation method, as it is crucial for the contrastive learning. As shown above all kinds of augs are listed and studied. And the result, as concluded in the heat-map below, shows the best 2 augmentation methods are crop and colour. Projection ablation Two piece of information in this result: The non-linear(linear with RELU) rise accuracy up by 10% The output size makes less difference to the accuracy, so afterwards works tend to choose small size as well. 128 is enough. Comments The full contributions compared with InvaSpread[2] are: More data augmentatinon Learnable projection head layer Bigger batch size More epoch The authors are as humble as admitting most of these contributions are not novel in the later part of the article. We note that almost all individual components of our framework have appeared in previous work, although the specific instantiations may be different. The superiority of our framework relative to previous work is not explained by any single design choice, but by their composition. However, similar to MoCo[5], the contributions of this paper are also very influential. For example, the projection head after the encoder is adopted in following MoCo v2[7] , SwAV[9]and BYOL[10]. And the data augmentation scheme is also widely applied. The the LARS optimiser for large batch size appears in BYOL[10] as well. And because of the good results of MoCo[5], and SimCLR, contrastive learning lead a dominant trend in deep learning from 2020. And ended until the proposing of Vision Transformer. MoCo v2[7] It is technically a technical report. They note the effectiveness of the projection head and data augmentation method that SimCRL presented. After just less than 1 month, they merge these techniques into MoCo resulting in new SOTA on ImageNet. Results From the ablation result above, it is notable that the acc gains 6% with only projection head. And a large number of epochs are useful. As a matter of fact, the trend of increasing epochs still keeps. Recall the new MAE, 1600 epochs are adopted and the accuracy keeps rising. Besides, they present MoCo v2 outperforms SimCLAR from two angle of views MoCo v2 is able to reach higher accuracy with less epochs The memory and time cost of MoCo is much lower to get a good result Comment MoCo v2 may be the most memory friendly method to get a good result with contrastive learning. And it still very useful. SimCLR v2[8] Actually most part of this paper focus on semi-supervised leaning. The SimCLR v2 part presented 3 points: Bigger backbone model size, 153-layer SKnet Deeper projection head, 2 layers MLP after a search of layer number Momentum encoder inspired by MoCo[6][7], but less effective. And they claim the reason is that the batch size of SimCLR is already big. SwAV[9] SwAV abbreviates for Swapped Assignment Views. This another multi-view work, aiming at predicting one view's feature from another view. And it combines contrastive leaning with clustering. Method Unlike the former contrastive task, instead of enacting contrastive loss between positive and sampled negative features, SwAV compares positive with all negative features via clustering and swap prediction. Multi-crop augmentation In additional to the great clustering setting, SwAV proposes another type of augmentation, multi-crop. With multi-crop, the model manages to learn information not only from large scale but small scale of an image, with similar computation cost. It can be seen that the multi crop improve the accuracy on all the approaches, especially on the clustering related ones. And this technique can be seen as a critical contribution to reach SOTA. And it is adopted by a lot following models. Result The result of SwAV not only surpasses the preliminaries, but afters. It keeps SOTA that a convolutional backbone achieves until ViT models appear. As shown above, with only linear probe (froze all but the last layer) the SwAV result is very near to the supervised baseline. And the result converges to the supervised result with the model size. Stage 3: No negative samples Basically around BYOL and at last SimSiam integrates all the contributions before and makes a closure for the CNN based contrastive learning era. BYOL[10] Bootstrap Your Own Latent is the longer version. Negative samples are critical for preventing model collapsing (same output regardless the input, loss always 0, learn nothing). In this new approach, no negative is required. Model The approach is simple, after classical momentum encoder, and momentum projector, another layer (same architecture with projection) is added to the positive line. Then the model is trained to predict the negative output with the output of the positive line. Analysis The result is truly surprising and it resulted in quite a topic. One of the most influencial analytical works is this blog: Understanding Self-Supervised and Contrastive Learning with \"Bootstrap Your Own Latent\" (BYOL). Name Projection MLP Norm Prediction MLP Norm Loss Function Contrastive Performance 5 Contrastive Loss None None Cross Entropy Explicit 44.1 BYOL Batch Norm Batch Norm L2 Implicit 57.7 Projection BN Only Batch Norm None L2 Implicit 55.3 Prediction BN Only None Batch Norm L2 Implicit 48 No Normalization None None L2 None 28.3 Layer Norm Layer Norm Layer Norm L2 None 29.4 Random — — — None 28.8 The blog author tried to reproduce the BYOL but got model collapsing all the time. So he checked the model and found the reason is one batch norm layer missing in his projection heads. And he did a series of ablation tests on batch normalisation and raise a hypnosis that BYOL leverage batch normal layers as a source of implicit \"negative\" samples. i.e. positive samples are not the only sample needed. the presence of batch normalisation implicitly causes a form of contrastive learning. BYOL v2[11] The previous blog made a huge influence and the conclusion was widely accepted, exceot the authors. As a result, another article was published entitled \"BYOL works even without batch statistics\" In this paper, a more detailed ablation experiment was applied. And it shows the batch norm works as it designed, just a method to improve the stability of training. Besides, the authors use a better initialisation (group normalisation) , and the model maintains a similar accuracy without any batch norm layer. SimSiam[12] After all these works, people found the contrastive learning's performance is accumulated by many techniques and tricks, a little too messy. In this context, He et al proposed a simple SimSiam network. As shown above, SimSiam is basically a BYOL excluding the momentum encoder. And a detailed comparison of results are provided, including classification and downstream tasks. Note that SimCLR and MoCo v2 performs the best on downstream tasks. Stage 4: Transformer based Because of the popularity of vision transformer[15], the backbones of the contrastive learning methods are substituted into transformer. And the works aim at analysing and solving the resulting unstable problem. MoCo v3[13] Although the title of MoCo v3 includes ViT, it is mostly a architecture that coping with all backbones. Method From the algorithm, the MoCo v3 is a combination of MoCo v2 and SimSam. From the big picture, a query encoder and momentum key encoder with the contrastive loss are inherited from MoCo v2, while in the detail, a prediction mlp layer after the projection layer, a symmetric loss function recall the SimSiam. Transformer based model instability Because of the popularity of ViT, they substitute the backbone as ViT and find instability in training process. As shown above, the training accuracy tend to drop severely then increase gradually especially with large batch size. In this condition, large batch size has a negative impact on accuracy. Trick To alleviate the fluctuation, they retrieves the gradients of each layer and find the huge gradient change always occur on first layer (tokenisation patching layer). As a result, they try froze the first layer after random initialisation, and the problem solved. Note that this trick is useful for both MoCo v3 and BYOL with ViT. DINO[14] Short for self-distillation with no labels, DINO is actually a follow-up work of BYOL. The student and teacher networks are same as the query and key network respectively. One contribution is the centring layer in the teacher network. And the algorithm is very similar to MoCo v3, same forward process with slightly different loss function. Conclusion The relationships can be included in this diagram below: classDiagram InstDisc --|&gt; MoCo v1 InvaSpread --|&gt; SimCLR v1 CPC v1 --|&gt; CPC v2 CMC --|&gt; Info min MoCo v1 --|&gt; MoCo v2 SimCLR v1 --|&gt; CPC v2 SimCLR v1 --|&gt; MoCo v2 SimCLR v1 --|&gt; SimCLR v2 CPC v2 --|&gt; Info min SimCLR v1 --|&gt; Info min SimCLR v1 --|&gt; BYOL BYOL --|&gt; SimSiam BYOL --|&gt; explanation explanation --|&gt; BYOL v2 SimSiam --|&gt; MoCo v3 deep cluster --|&gt; SwAV MoCo v2 --|&gt; MoCo v3 SimSiam --|&gt; DINO class InstDisc&#123; + Instance discrimination + Memory bank &#125; class InvaSpread&#123; + End to end - Limited by batch size &#125; class CPC v1&#123; + infoNCE loss + Predictive preset, RNN based model + CV, NLP, audio, RL &#125; class CMC&#123; + Muti view &#125; class deep cluster&#123; + Based on cluster - No contrastive &#125; class MoCo v1&#123; + memory bank -&gt; queue + Momentom encoder + Outperform supervised &#125; class SimCLR v1&#123; + Bigger batch size + More augmentations + Projection head + More epoch &#125; class CPC v2&#123; + Add the SimCLR tricks + Gain by **30** &#125; class Info min&#123; + Conclude a rule - maximise mutual info + minimise mutual info + analytical work &#125; class MoCo v2&#123; + Add the SimCLR tricks &#125; class SimCLR v2&#123; Mainly half-supervised + Bigger backbone + 2-layer projection head + Momentom encoder &#125; class SwAV&#123; + Combine with contrastive + Multi-crop trick &#125; class BYOL&#123; + No negative samples + mse loss &#125; class explanation&#123; + BN is the key + Implicit negative sample &#125; class BYOL v2&#123; - BN is NOT the key + Better initialisation &#125; class SimSiam&#123; - Conclude and simplified - Smaller batch size - No momentom encoder - No negative sample + Stop gradient -&gt; EM &#125; class Barlos Twins&#123; + Diff target + Not popular &#125; class MoCo v3&#123; + Transformer + Freeze patch projection layer &#125; class DINO &#123; + Transformer + Centring teacher network &#125; Reference Wu, Z., Xiong, Y., Yu, S. X., &amp; Lin, D. (2018). Unsupervised feature learning via non-parametric instance discrimination. In Proceedings of the IEEE conference on computer vision and pattern recognition (pp. 3733-3742). ↩︎ Ye, M., Zhang, X., Yuen, P. C., &amp; Chang, S. F. (2019). Unsupervised embedding learning via invariant and spreading instance feature. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (pp. 6210-6219). ↩︎ Van den Oord, A., Li, Y., &amp; Vinyals, O. (2018). Representation learning with contrastive predictive coding. arXiv e-prints, arXiv-1807. ↩︎ Tian, Y., Krishnan, D., &amp; Isola, P. (2020, August). Contrastive multiview coding. In European conference on computer vision (pp. 776-794). Springer, Cham. ↩︎ He, K., Fan, H., Wu, Y., Xie, S., &amp; Girshick, R. (2020). Momentum contrast for unsupervised visual representation learning. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition (pp. 9729-9738). ↩︎ Chen, T., Kornblith, S., Norouzi, M., &amp; Hinton, G. (2020, November). A simple framework for contrastive learning of visual representations. In International conference on machine learning (pp. 1597-1607). PMLR. ↩︎ Chen, X., Fan, H., Girshick, R., &amp; He, K. (2020). Improved baselines with momentum contrastive learning. arXiv preprint arXiv:2003.04297. ↩︎ Chen, T., Kornblith, S., Swersky, K., Norouzi, M., &amp; Hinton, G. E. (2020). Big self-supervised models are strong semi-supervised learners. Advances in neural information processing systems, 33, 22243-22255. ↩︎ Caron, M., Misra, I., Mairal, J., Goyal, P., Bojanowski, P., &amp; Joulin, A. (2020). Unsupervised learning of visual features by contrasting cluster assignments. Advances in Neural Information Processing Systems, 33, 9912-9924. ↩︎ Grill, J. B., Strub, F., Altché, F., Tallec, C., Richemond, P., Buchatskaya, E., ... &amp; Valko, M. (2020). Bootstrap your own latent-a new approach to self-supervised learning. Advances in Neural Information Processing Systems, 33, 21271-21284. ↩︎ Richemond, P. H., Grill, J. B., Altché, F., Tallec, C., Strub, F., Brock, A., ... &amp; Valko, M. (2020). BYOL works even without batch statistics. arXiv preprint arXiv:2010.10241. ↩︎ Chen, X., &amp; He, K. (2021). Exploring simple siamese representation learning. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (pp. 15750-15758). ↩︎ Chen, X., Xie, S., &amp; He, K. (2021). An empirical study of training self-supervised vision transformers. In Proceedings of the IEEE/CVF International Conference on Computer Vision (pp. 9640-9649). ↩︎ Caron, M., Touvron, H., Misra, I., Jégou, H., Mairal, J., Bojanowski, P., &amp; Joulin, A. (2021). Emerging properties in self-supervised vision transformers. In Proceedings of the IEEE/CVF International Conference on Computer Vision (pp. 9650-9660). ↩︎ Dosovitskiy, A., Beyer, L., Kolesnikov, A., Weissenborn, D., Zhai, X., Unterthiner, T., ... &amp; Houlsby, N. (2020). An image is worth 16x16 words: Transformers for image recognition at scale. arXiv preprint arXiv:2010.11929. ↩︎ Radford, A., Kim, J. W., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., ... &amp; Sutskever, I. (2021, July). Learning transferable visual models from natural language supervision. In International Conference on Machine Learning (pp. 8748-8763). PMLR ↩︎ Dosovitskiy, A., Beyer, L., Kolesnikov, A., Weissenborn, D., Zhai, X., Unterthiner, T., ... &amp; Houlsby, N. (2020). An image is worth 16x16 words: Transformers for image recognition at scale. arXiv preprint arXiv:2010.11929. ↩︎ You, H., Zhou, L., Xiao, B., Codella, N. C., Cheng, Y., Xu, R., ... &amp; Yuan, L. (2021). MA-CLIP: Towards Modality-Agnostic Contrastive Language-Image Pre-training. ↩︎","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"Switch blog theme to FLUID","slug":"Switch-blog-theme-to-FLUID","date":"2022-04-30T08:05:02.000Z","updated":"2022-05-28T03:47:03.981Z","comments":true,"path":"2022/04/30/Switch-blog-theme-to-FLUID/","link":"","permalink":"https://daydreamatnight.github.io/2022/04/30/Switch-blog-theme-to-FLUID/","excerpt":"The former \"yilia\" theme starts to be buggy since it was no longer maintained. I switch to this \"FUILD\" theme, for now, hopefully it will stand longer.","text":"The former \"yilia\" theme starts to be buggy since it was no longer maintained. I switch to this \"FUILD\" theme, for now, hopefully it will stand longer. Reference docs Docs, Preview, Github repo Switch theme to Fluid npm install --save hexo-theme-fluid Edit _config.yml in the blog root directory as follows: theme: fluid Create the about page manually: hexo new page about Then edit /source/about/index.md and add layout attribute. Execute the command in your blog directory： npm update --save hexo-theme-fluid Customise create _config.fluid.yml in the blog directory and copy the content of _config.yml And the config file so far is _config.fluid.yml done ... way easier than the theme before Additional settings Compress files add-on hexo-all-minifier is an easy and effective add-on to compress the images and bigger css/js files. npm install hexo-all-minifier --save Config it in config.yml. all_minifier: true","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://daydreamatnight.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://daydreamatnight.github.io/tags/hexo/"}],"author":"Ryan LI"},{"title":"Masked Autoencoder(MAE)","slug":"paper-reading-MAE","date":"2022-04-26T18:00:38.000Z","updated":"2022-06-09T10:25:03.081Z","comments":true,"path":"2022/04/27/paper-reading-MAE/","link":"","permalink":"https://daydreamatnight.github.io/2022/04/27/paper-reading-MAE/","excerpt":"Published in Dec 2021, this new work by Kaiming He draws a lot of attention from the community. The astounding result of unsupervised transfer learning and the capability of reconstructing highly masked (up to 90%) images might herald a new era in CV.","text":"Published in Dec 2021, this new work by Kaiming He draws a lot of attention from the community. The astounding result of unsupervised transfer learning and the capability of reconstructing highly masked (up to 90%) images might herald a new era in CV. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned. Paper: Masked autoencoders are scalable vision learners Useful link: https://www.bilibili.com/video/BV1sq4y1q77t/ NLP CV Supervised Transformer[17] ViT[8] Self-supervised Bert[1] MAE Inspired by Bert[1] and ViT[8], MAE shows the capability of unsupervised learning on CV. It's not the first work to expand Bert [1] to CV, but it might be the most influential one. It might accelerate the application of transformer in CV, as Bert[1] has done with NLP. Notes Title Note the title format, \"Something is a good fellow\", is same as the GPT[2] series. It is a powerful format to include the distilled conclusion in the title. Abstract This paper proposes an asymmetric, transformer-based, denoising auto-encoder architecture. The unsupervised pre-training task is to reconstruct highly masked input images. The high masking ratio is the key. It reduces the pre-training time by 3 times and is able to train larger model efficiently, resulting in competitive reconstructing accuracy. The transfer performance is even better than the supervised pre-training models. Key figures First, the reconstruction results are shown below. Although the details are vague, the reconstruction of the main content is astonishing. Note that maybe not all of the validation images turned out as good as this, but this result is still really surprising. Conclusion The model is said to be simple(false) and scaled well(as long as you are rich). The results show that MAE makes scaleable unsupervised pre-training in CV applicable, a similar route to that of NLP[1][2]. Besides, they claim the semantic difference between text and image leads to different masking operations. Furthermore, they mention that the patch masking operation does not separate semantic entities, meaning one masked patch may include more than one piece of semantic information, unlike language. As a result the reconstruction results show that the model manages to learn from complex semantics. Introduction Although yielding excellent success in NLP, applying scalable unsupervised models in CV is still a challenging problem. But why? i.e. what makes masked autoencoding different between vision and language? 3 reasons are discussed: The architecture difference between convolution and transformer: it's hard to integrate masked embedding or positional embedding to the convolution layer (Actually positional embedding is not needed for convolutional layer) -- addressed by ViT[8]. The information density difference between text and image: Unlike high-semantic text, natural signals in images possess heavy spatial redundancy -- addressed by masking a very high portion of random patches. Decoder difference: in NLP, take BERT as an example, a simple linear projection is used as a decoder, while in vision, a simple decoder is not powerful enough to reconstruct the semantic level information -- addressed by substituting linear projection with transformer layers. Then, the idea of MAE is on the front door. The encoder processes only the unmasked patches, while the lightweight decoder reconstructs the whole image from the encoded latent representation and the [mask] tokens. With a very high masking ratio(e.g. 75%), the pre-training time can be reduced by 3 times. Besides, the data capacity and generalisation performance are great. SOTA accuracy is achieved with fine tuning on a medium-sized dataset (ViT-Huge model on ImageNet 1K). In this section, the reason why designing such an architecture is well presented through Q&amp;A, highly recommended. Sometimes, motive is an important factor in distinguishing a paper from a technical report. Relate work Works in 4 areas are briefly reviewed. Note that BEiT[9] is very similar to MAE, while BEiT[9] projects each patch to a label and predict as Bert[1], unlike projecting to pixels in MAE. Besides, the recently popular constructive methods [14][15][16] relay on data augmentation heavily, while MAE does not. Approach The architecture and the training approach is briefly covered in the sketch below: Additional details about the architecture: For per-processing, non-overlapped patching and random uniform masking are adopted. The [mask] token is shared, and another position embedding is introduced to the decoder input so that the inputs are different on different masked area. But it is unclear whether the positional embedding is performed only on the [mask] token or on the whole input, i.e. encoded patches + [mask] token. Furthermore, the lightweight decoder has &lt;10% computation per token compared with the encoder. Reconstruction target: The decoder aims to recreate the pixels of masked patches. The loss function is the mean squared error (MSE) between the output and the original image, only on the masked region of course. Besides, a variation reconstructing the normalised pixels shows an improvement in representation quality. Implementation: The random masking step is applied by shuffling and dropping the last part. And un-shuffling is used before the decoder to reconstruct the position. In this way, no sparse operation is needed and the cost becomes really low. ImageNet experiments Setup The model is self-supervised pre-trained on the ImageNet-1K, then evaluated by 2 kinds of supervised training: (i) end-to-end fine-tuning and (ii) linear probing(only the last linear projection layer is allowed to update). ViT-Large (ViT-L/16)[8] is used as baseline backbone. Note that they reproduce the full supervised experiments by ViT[8] and get 8% higher accuracy. The trick is a strong regularisation(75%). May be it meets the previous theory of the semantic difference between picture and text. Supervised, original[8] Supervised, their impl. Self-supervised, Baseline 76.5 82.5 84.9 Ablation Most of the result are recoded clearly on the figures and tables below, Just add some details: Best mask ratio is higher than BERT[1] (15%) and iGPT[7], ViT[8]and BEiT[9] (25%-50%) The encoder manages to learn the semantic representations given that the semantic pieces are mixed in each input patches, different from NLP No saturation of linear probing accuracy is observed, indicating the overfitting is not severer even at epoch 1600 One explanation for (a): a reasonably deep decoder can account for the reconstruction specialisation, leaving the encoder to extract a more abstract latent representation. One explanation for (c): current architecture only process known patches, the introducing of unknown [mask] token would result in a gap between the pre-train task and inference task. Result of (d) indicates that high-frequency components are useful in MAE. And the dVAE token case is actually what BEiT[9] does, projecting each patch to a single token. Result of (e) distinguishes MAE from contrastive learning and related methods. In MAE, the random masking plays the main role of data augmentation. Comparison with unsupervised models: not only the accuracy is better, the pre-training time is shorter than the competitors as well with supervised models: it indicates that MAE can help scale up model sizes. And the MAE performance on ImageNet1K is similar to the model trained on the 300 times bigger dataset JFT300M. But, considering the number of class of JFT300M is much more than ImageNet1K as well, the result is slightly unfair. Partial Fine-tuning In addition to the full fine-tuning and 0 fine-tuning (linear probing), partial ones are applied by fine tuning fixing several layers. The result indicating at least the last 6 layers are task-related. Transfer learning experiments At last, down steam tasks are evaluated compared with other frameworks. Review Writing, simple but has a very good storyline. From the full introduction of the motivation, to the detailed clear figures explaining each part of the design. The algorithm is simple, just applying self-supervised learning to CV based on ViT[8]. 2 key points are introduced: More patches need to be masked Transformer decoder to reproduce the pixels instead of a simple linear layer projecting patches into tokens. In conclusion, a simple idea, a great result and detailed experiments make this paper a great work. Reference Devlin, J., Chang, M. W., Lee, K., &amp; Toutanova, K. (2018). Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805. ↩︎ Radford, A., Narasimhan, K., Salimans, T., &amp; Sutskever, I. (2018). Improving language understanding by generative pre-training. ↩︎ Hinton, G. E., &amp; Zemel, R. (1993). Autoencoders, minimum description length and Helmholtz free energy. Advances in neural information processing systems, 6. ↩︎ Vincent, P., Larochelle, H., Bengio, Y., &amp; Manzagol, P. A. (2008, July). Extracting and composing robust features with denoising autoencoders. In Proceedings of the 25th international conference on Machine learning (pp. 1096-1103). ↩︎ Vincent, P., Larochelle, H., Lajoie, I., Bengio, Y., Manzagol, P. A., &amp; Bottou, L. (2010). Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion. Journal of machine learning research, 11(12). ↩︎ Pathak, D., Krahenbuhl, P., Donahue, J., Darrell, T., &amp; Efros, A. A. (2016). Context encoders: Feature learning by inpainting. In Proceedings of the IEEE conference on computer vision and pattern recognition (pp. 2536-2544). ↩︎ Chen, M., Radford, A., Child, R., Wu, J., Jun, H., Luan, D., &amp; Sutskever, I. (2020, November). Generative pretraining from pixels. In International Conference on Machine Learning (pp. 1691-1703). PMLR. ↩︎ Dosovitskiy, A., Beyer, L., Kolesnikov, A., Weissenborn, D., Zhai, X., Unterthiner, T., ... &amp; Houlsby, N. (2020). An image is worth 16x16 words: Transformers for image recognition at scale. arXiv preprint arXiv:2010.11929. ↩︎ Bao, H., Dong, L., &amp; Wei, F. (2021). Beit: Bert pre-training of image transformers. arXiv preprint arXiv:2106.08254. ↩︎ Wang, X., &amp; Gupta, A. (2015). Unsupervised learning of visual representations using videos. In Proceedings of the IEEE international conference on computer vision (pp. 2794-2802). ↩︎ Noroozi, M., &amp; Favaro, P. (2016, October). Unsupervised learning of visual representations by solving jigsaw puzzles. In European conference on computer vision (pp. 69-84). Springer, Cham. ↩︎ Zhang, R., Isola, P., &amp; Efros, A. A. (2016, October). Colorful image colorization. In European conference on computer vision (pp. 649-666). Springer, Cham. ↩︎ Gidaris, S., Singh, P., &amp; Komodakis, N. (2018). Unsupervised representation learning by predicting image rotations. arXiv preprint arXiv:1803.07728. ↩︎ Wu, Z., Xiong, Y., Yu, S. X., &amp; Lin, D. (2018). Unsupervised feature learning via non-parametric instance discrimination. In Proceedings of the IEEE conference on computer vision and pattern recognition (pp. 3733-3742). ↩︎ Oord, A. V. D., Li, Y., &amp; Vinyals, O. (2018). Representation learning with contrastive predictive coding. arXiv preprint arXiv:1807.03748. ↩︎ He, K., Fan, H., Wu, Y., Xie, S., &amp; Girshick, R. (2020). Momentum contrast for unsupervised visual representation learning. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition (pp. 9729-9738). ↩︎ Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., ... &amp; Polosukhin, I. (2017). Attention is all you need. Advances in neural information processing systems, 30. ↩︎","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"Vision Transformer","slug":"paper-reading-Vision-Transformer","date":"2022-04-21T12:42:10.000Z","updated":"2022-06-09T10:25:25.381Z","comments":true,"path":"2022/04/21/paper-reading-Vision-Transformer/","link":"","permalink":"https://daydreamatnight.github.io/2022/04/21/paper-reading-Vision-Transformer/","excerpt":"Presented in 2021, the vision transformer model (ViT) is the most influential work in the CV field recent years. Its variants outperform the dominant convolutional networks in almost all CV tasks such as classification and object detection. And it breaks the border of CV and NLP, providing new thoughts to CV and multi-model areas. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned.","text":"Presented in 2021, the vision transformer model (ViT) is the most influential work in the CV field recent years. Its variants outperform the dominant convolutional networks in almost all CV tasks such as classification and object detection. And it breaks the border of CV and NLP, providing new thoughts to CV and multi-model areas. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned. Paper: An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale Useful links: https://www.bilibili.com/video/BV15P4y137jb https://theaisummer.com/vision-transformer/ Not only Vision Transformer (ViT) performs better on traditional CV tasks, it has more impressive properties. As shown above, Naseer et al. demonstrate the tasks where ViT shows extra performance over CNN models, even over humans. Notes Abstract While Transformer-based models such as BERT, GPT series, and T5 nail the NLP tasks, CV tasks remain dominated by CNN-based models. This paper applied a pure transformer encoder (same as BERT) to sequences of cut images and obtains a good classification result, especially with supervised pre-training on a large dataset then fine tuning on a mid-size dataset. Besides, fewer computational resources (meaning 2500 days of TPUv3) are need to attain good results, compared with CNN models. Conclusion Besides the paraphrasing part, the conclusion part discusses the future work based on the ViT. And all of them have follow-up works. Apply ViT to other CV tasks, given the promising performance of DETR. Only 1 and a half month later, ViT-FRCNN and SEDR mange to apply ViT on detection and segmentation respectively. And after 3 months, Swin Transformer introduces hierarchical feature to transformer, making ViT more suitable to vision tasks. Self-supervised pre-training, given the great results of BERT and GPT in the NLP field. Initial explorations in the paper show a gap from the supervised pre-training. One year later, MAE narrows the gap successfully by generative model. Besides, in the section of self-supervised learning, a contrastive learning is mentioned as well, and MOCO v3 and DINO follow this line. Further scaling up this model. Half year later, same group introduces Vit-G with two billion parameters, attaining new SOTA on ImageNet of 90.45%. Introduction Success of Transformer-based models on NLP tasks are firstly reviewed. And it is natural trying to apply such self-attention mechanism to vision. Yet here are one major obstacle: How to transfer a 2D picture to a 1D sequence? One intuitive thought is to flatten the picture directly and treat each pixel as an element. In this way, a medium size 224*224 picture will be converted to a 50,176 long sequence. However, the sequence length is quadratically related to model complexity. Morden hardware only supports input sequence length &lt;1000 of a pure self-attention model. For example BERT only accepts input length of 512. Yet the authors mange to incorporate the original transformer encoder in CV. In order to address the sequence length problem, they split the image into 16*16 patches, each patches denotes a sequence element (token). In this way, a 224*224 image can be converted as a sequence length of 16*16 with each element sized 14*14. Each element then gets linearised through a FC layer before being passed into the transformer encoder. And the afterwards experiments show that the new model doesn't perform well on mid-size model. One explanation is that transformer model lack the image-related inductive bias of CNN (locality and translation equalisation). Yet with pre-training on large dataset such as JFT-300 and ImagNet-21K, a better result than CNN can be approached. Related work It is a detailed related work covering all the aspects in the original paper. I just pick few of them. All the related works aim at reducing the sequence length within the limitation caused by self-attention. Some try to combine CNN with self-attention. For example Wang, X et al.'s work takes the feature map extracted by CNN as the input of transformer. Others try to replace the CNN with a special variation of self-attention. For example, Ramachandran et al.'s work replaces all convolutional sublayers of the ResNet-50 model with self-attention layers. To reduce the computational cost, a local region of the image instead of the whole image is used as the receptive field of the self-attention layer, meaning each pixel only attends to its neighbours in a restricted area. In another work line, Wang, H et.al's work factorising 2D self-attention into two 1D self-attentions to significantly reduce computation complexity. And there is a very similar Cordonnier et al's work also split the images before the self-attention layer. Yet the patch size is 2*2 and with the dataset only CIFAR-10. This paper enlarges the model, apply it in big dataset, and shows the scalability. Another related work image GPT(iGPT) trains a GPT-2 scale generative network. Yet the highest accuracy on ImageNet is 72%, way less than 88% of this paper. But in 2021, an afterwards generative network MAE shows a competitive result of 87.8%, with good transfer leaning capability on segmentation and object detection as well. Besides, works exploring transfer learning performance of CNN model on larger datasets such as ImageNet-21k and JFT-300M are mentioned. And this paper studies the transformer instead of the CNN. Method The whole big idea of the method part is leaving as much as possible the original transformer architecture in order to leverage the good feature and the existing mature efficient implementations of it. Vision Transformer (VIT) From the overview, and the algorithm it should be called Vision BERT instead of Vision Transformer, given the pure encoder architecture and the extra \"classification token\". Assume a 224*224*3 image, after patching, the sequence length is HW/P2=16*16=196 and the width is 14*14*3=768. Given the hidden size of the model D=768, through linear projection layer (E), sequence X [196*768] are multiplied with weight E [768*768]. The resulting linear output [196*768] is then contacted with [cls], followed by adding standard 1D learnable positional embedding to be the transformer input [197*768]. After several transformer blocks, the output size does not change and the [cls] token is projected to a softmax classification layer Ablation experiments The pre and post-processing are crucial for ViT given that the middle transformer encoder layers are kept as original. Multiple rounds of ablation experiments are carried out. Position embedding schemes, 2D embedding and relative embedding are applied to compare with the standard 1D embedding, and no evident gain is spotted. [cls] token vs average pooling, extra [cls] token is inherited from the Transformer model for text, and traditionally in CV, instead of an additional token, an average polling layer after the output layer is usually used as a classifier. The figure blow shows no both works. But in order to stick the original design as close as possible, [cls] token is applied. Another analysis after the model description: Inductive bias: Less locality, translation equivariance and 2D neighbourhood structure are possessed by ViT, compared with CNN. Hybrid Architecture: CNN can be used as a special embedding, leveraging the inductive bias of the CNN model. Limitation on Fine-Tuning Pre-train ViT at larger and higher resolution datasets is proved to be beneficial. Yet the input sequence lengths are different when training on two datasets with different resolutions, resulting in positional embeddings of different lengths. In this article, a 2D interpolation is applied to transfer a pre-trained positional embedding to another dataset to fine-tune. But the accuracy will loss if the resolution difference is too big. Experiments Setup ResNet, ViT, and the hybrid model are evaluated together and ViT wins taking account of the pre-training cost. Besides, a small self-supervision experiment is deployed and sees potential. Two scales of ImageNet(1k and 21k) and JFT(303M) are used as pre-training dataset. Only classification tasks are evaluated with popular datasets. 3 scales of ViT are designed with different patch size(inversely proportional to the amount of data). For example, ViT-L/16 means ViT-Large with 16 patches. Comparison to SOTA And the best results are shown below: Pre-training cost requirements Figure 3 and 4 shows the performance of the presented models on different sizes of per-training datasets. ViT preforms competitive only starts from dataset 21k, and very well only on huge dataset. Figure 5 shows the transfer performances versus pre-training costs on JFT-300M of several models. And it shows that ViT is cheaper than ResNet. Interestingly, the Hybrid model is competitive on low pre-training cost. Inspecting ViT Figure7 Left: The learned linear projection weight matrix E [768*768] is inspected by PCA, and the first 28 components(modes) are visualised as embedding filters. They look pretty much similar to the early layer filters(kernels) of CNN (for example, the first layer of a CNN shown by Brachnmann et.al). This similarity indicates that the linear patch embedding manages to represent the low-dimension structure of each patch. Figure7 mid: Position embedding visualisation first shows that the spatial information is captured well by the E matrix, given that the similarity matrix between patches matches well with the distance relationships of patches. Second, patterns across rows (and columns) have similar representations, indicating the embedding layer has successful learned the row-column relationship. Overall, the 1D positional embedding has learned the 2D structure, coherent with the ablation experiment result. Figure7 Right: The receptive fields of the multi-head attention layers are evaluated by the mean attention distance. Compared with CNN whose receptive field increases linearly with the depth, the ViT attends the whole picture from the first layer, leveraging the natural advantage of transformer. Self-supervision A preliminary exploration on masked patch prediction for self-supervision (mimicking one of the BERT pre-training tasks) has been employed. But the result is not satisfying. And contrastive pre-training are mentioned as a future work. Review This is a concise-written, fundamental article. Just as presented in the conclusion part, it inspired many flow-up works from any direction in the CV area, such as applying to more tasks, changing the architecture(tokenisation, transformer block(MLP-mixer： changing multi-head attention layers to MLP , meta-former: substituting multi-head attention layers to average pooling), changing objective function(self-supervised, contrastive learning), and multi modality. It's still unclear whether convolution, attention or MLP will win this game. Reference Naseer, M. M., Ranasinghe, K., Khan, S. H., Hayat, M., Shahbaz Khan, F., &amp; Yang, M. H. (2021). Intriguing properties of vision transformers. Advances in Neural Information Processing Systems, 34. Beal, J., Kim, E., Tzeng, E., Park, D. H., Zhai, A., &amp; Kislyuk, D. (2020). Toward transformer-based object detection. arXiv preprint arXiv:2012.09958. Zheng, S., Lu, J., Zhao, H., Zhu, X., Luo, Z., Wang, Y., ... &amp; Zhang, L. (2021). Rethinking semantic segmentation from a sequence-to-sequence perspective with transformers. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition (pp. 6881-6890). Liu, Z., Lin, Y., Cao, Y., Hu, H., Wei, Y., Zhang, Z., ... &amp; Guo, B. (2021). Swin transformer: Hierarchical vision transformer using shifted windows. In Proceedings of the IEEE/CVF International Conference on Computer Vision (pp. 10012-10022). Carion, N., Massa, F., Synnaeve, G., Usunier, N., Kirillov, A., &amp; Zagoruyko, S. (2020, August). End-to-end object detection with transformers. In European conference on computer vision (pp. 213-229). Springer, Cham. He, K., Chen, X., Xie, S., Li, Y., Dollár, P., &amp; Girshick, R. (2021). Masked autoencoders are scalable vision learners. arXiv preprint arXiv:2111.06377. Chen, X., Xie, S., &amp; He, K. (2021). An empirical study of training self-supervised vision transformers. In Proceedings of the IEEE/CVF International Conference on Computer Vision (pp. 9640-9649). Caron, M., Touvron, H., Misra, I., Jégou, H., Mairal, J., Bojanowski, P., &amp; Joulin, A. (2021). Emerging properties in self-supervised vision transformers. In Proceedings of the IEEE/CVF International Conference on Computer Vision (pp. 9650-9660). Zhai, X., Kolesnikov, A., Houlsby, N., &amp; Beyer, L. (2021). Scaling Vision Transformers. ArXiv, abs/2106.04560. Wang, X., Girshick, R., Gupta, A., &amp; He, K. (2018). Non-local neural networks. In Proceedings of the IEEE conference on computer vision and pattern recognition (pp. 7794-7803). Ramachandran, P., Parmar, N., Vaswani, A., Bello, I., Levskaya, A., &amp; Shlens, J. (2019). Stand-alone self-attention in vision models. Advances in Neural Information Processing Systems, 32. Wang, H., Zhu, Y., Green, B., Adam, H., Yuille, A., &amp; Chen, L. C. (2020, August). Axial-deeplab: Stand-alone axial-attention for panoptic segmentation. In European Conference on Computer Vision (pp. 108-126). Springer, Cham. Cordonnier, J. B., Loukas, A., &amp; Jaggi, M. (2019). On the relationship between self-attention and convolutional layers. arXiv preprint arXiv:1911.03584. Chen, Mark, Alec Radford, Rewon Child, Jeffrey Wu, Heewoo Jun, David Luan, and Ilya Sutskever. \"Generative pretraining from pixels.\" In International Conference on Machine Learning, pp. 1691-1703. PMLR, 2020. Touvron, H., Vedaldi, A., Douze, M., &amp; Jégou, H. (2019). Fixing the train-test resolution discrepancy. Advances in neural information processing systems, 32. Brachmann, A., &amp; Redies, C. (2016). Using convolutional neural network filters to measure left-right mirror symmetry in images. Symmetry, 8(12), 144. Tolstikhin, I. O., Houlsby, N., Kolesnikov, A., Beyer, L., Zhai, X., Unterthiner, T., ... &amp; Dosovitskiy, A. (2021). Mlp-mixer: An all-mlp architecture for vision. Advances in Neural Information Processing Systems, 34. Yu, W., Luo, M., Zhou, P., Si, C., Zhou, Y., Wang, X., ... &amp; Yan, S. (2021). Metaformer is actually what you need for vision. arXiv preprint arXiv:2111.11418.","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"GPT1-3","slug":"paper-reading-GPT1-3","date":"2022-04-18T00:58:59.000Z","updated":"2022-06-09T10:25:32.570Z","comments":true,"path":"2022/04/18/paper-reading-GPT1-3/","link":"","permalink":"https://daydreamatnight.github.io/2022/04/18/paper-reading-GPT1-3/","excerpt":"GPT-3 is the most popular generative language model now. With more than 100 billion parameters, the performance is proved to be great and by now there are more than hundreds of works (commercial or academic) built on it, including the famous GitHub Copilot. This is a series of paper reading notes hopefully, to push me to read paper casually and to leave some record of what I've learned.","text":"GPT-3 is the most popular generative language model now. With more than 100 billion parameters, the performance is proved to be great and by now there are more than hundreds of works (commercial or academic) built on it, including the famous GitHub Copilot. This is a series of paper reading notes hopefully, to push me to read paper casually and to leave some record of what I've learned. Paper links: GPT-1: Improving language understanding by generative pre-training GPT-2: Language models are unsupervised multitask learners GPT-3: Language models are few-shot learners Useful links: https://www.bilibili.com/video/BV1AF411b7xQ/ GPT-3 Demo: 300+ GPT-3 Examples, Demos, Apps GPT-3: Demos, Use-cases, Implications Since my own interest is not NLP, I haven't read these paper by myself. Instead, I follow a reference video above directly and make notes together with it. History and Timeline Given that the GPT series are all developed by the OpenAI and the Transformer &amp; Bert are developed by Google, it seems there are two companies combating. And it is inevitable to compare these two series. From the perspective of number of cites, it is obviously that OpenAI have catch less attention from the academic world despite the huge cost. But it's not because GPT series are less novel, but because the goal of GPT series is bigger than that of Transformer &amp; Bert. Transformer is originally developed for Machine Translation task only. And Bert simply aims to push the pre-training technic forward. That's the reason why Bert performs better than GPT if the number of parameters are the same. As a result, GPT is harder and more expensive to train a decent model. And the size of model make others hardly to reconstruct it. From the companies' perspective, OpenAI does this because they want to build the strong AI, but Transformer &amp; Bert are developed only by the teams of Google. GPT-1 Abstract The whole idea is similar to what CV did in the last several decades, that is pre-training of a model on a massive dataset followed by fine-tuning on a small specialist dataset. Lacking of large labelled data such as ImageNet of 10 million, however, NLP can't do what CV does exactly. The scale of machine translation database might reach 10 million but one piece of image possesses almost 10 times of information than a sentence. So the database is still not big enough. GPT makes a big step by using unlabelled data for pre-training. And then aero shot on GPT-2 makes another big step. It is fair to say CV led the trend of deep learning in the first 5 years, but recent years, more new thoughts are coming from the NLP field. And these new thoughts have inspired the CV field as well such as ViT, CLIP and MAE. Besides, actually it had been a long time since NLP started to use unsupervised pre-training back then. For example, the word embedding model had been used for decades. But, the word embedding can only be seen as a layer, extra layers of model need to be designed to suit for various tasks. With GPT, however, the architecture doesn't need much change, only adjusting the input to suit the tasks is ok. The result is good but not as good as BERT, but the novelty of this paper is much better than BERT. Introduction After briefly introducing the word embedding, problems of pre-training more than word-level data are presented. For example the type of optimisation objectives and how to transfer the extracted information to the tasks. The main reason of this problem is the variety of NLP tasks. There is no way to suit all the needs together. Then this paper introduces a semi-supervised method which has been explained many times. But actually GPT and BERT are normally called self-supervised model. Though they are the same to me. Semi-supervised learning is a common concept in the Machine Learning. It refers learning from a mix of massive unlabelled data and a few labelled data. Then the architecture is described. Interestingly, in order to list the reason of choosing transformer over RNN as backbone. The authors say This model choice provides us with a more structured memory for handling long-term dependencies in text, compared to alternatives like recurrent networks, resulting in robust transfer performance across diverse tasks. Besides, the paper accents the task-specific input adaptions, which is the key of this paper. Framework Unsupervised learning GPT uses a task that giving the data of un-k to un-1 to predict the un. So the likelihood function to be maximised is: \\[ L_{1}(\\mathcal{U})=\\sum_{i} \\log P\\left(u_{i} \\mid u_{i-k}, \\ldots, u_{i-1} ; \\Theta\\right) \\] Because the predicting task, the mechanism of the mask multi-head attention of transformer decoder matches the likelihood function perfectly. Because in the first layer of the transformer decoder, the data after u{i} are simply masked to be 0. And the whole pre-training process is like this: \\[ \\begin{aligned} h_{0} &amp;=U W_{e}+W_{p} \\\\ h_{l} &amp;=\\operatorname{transformer}\\_\\operatorname{block}\\left(h_{l-1}\\right) \\forall i \\in[1, n] \\\\ P(u) &amp;=\\operatorname{softmax}\\left(h_{n} W_{e}^{T}\\right) \\end{aligned} \\] Compared with BERT, the biggest difference is never encoder or decoder, bidirectional or one-way along. The key is the pre-training task they choose, the completion task that Bert use is much easier than GPT's prediction task. Because this is the difference between interpolation and extrapolation. Therefore, BERT outperforms GPT on the same number of parameters. But the potential of the GPT series goes far beyond BERT. As a result, it took OpenAI years to develop such an impressive GPT-3 model. On another side, however, GPT's prediction task leads to a different architecture with BERT. And the decoder architecture makes the GPT model hard to be bidirectional from the start. We'll see how it conquer this. Supervised fine-tuning The fine-tuning task follows the standard supervise learning process as follows: \\[ L_{2}(\\mathcal{C})=\\sum_{(x, y)} \\log P\\left(y \\mid x^{1}, \\ldots, x^{m}\\right) \\] with \\[ P\\left(y \\mid x^{1}, \\ldots, x^{m}\\right)=\\operatorname{softmax}\\left(h_{l}^{m} W_{y}\\right) \\] And the authors find it helpful to optimise the L1 and L2 together as: \\[ L_{3}(\\mathcal{C})=L_{2}(\\mathcal{C})+\\lambda * L_{1}(\\mathcal{C}) \\] Task-specific input transformations The last thing to do is how to apply this framework to different tasks. Similar to with BERT, the pre-trained transformer block doesn't have to be changed. Experiments The dataset GPT trained on is BooksCorpus dataset, and the model has 12 layers with Hmodel = 768, same as BERTbase. Although the transformer encoder has one layer less than the decoder, GPT and BERT's numbers of parameters are still at the same level. Yet BERT has a 3 times larger BERTlarge model than the base. Because in addition to the BookCorpus dataset, BERT uses one more dataset for pre-training, in total the dataset is 4 times larger than GPT's. For the pre-training corpus we use the BooksCorpus (800M words) (Zhu et al., 2015) and English Wikipedia (2,500M words). And unfortunately, the average accuracy of BERTbase is higher than GPT at this time. Besides with the BERTlarge model , the accuracy can go higher, as shown below in BERT's paper. GPT-2 After GPT-1 got defeated by BERT in 4 months, of course, GPT-2 aims to fight back and beat BERT to the ground. Considering the decoder path can't shift to the encoder with dignity, the simplest way then is to enlarge the model and the dataset. But what if it's still not working? Abstract After developing a new dataset of millions of webpages called WebText, and training on a new1.5B parameter model. The result turns out to be no significant difference with BERT. So they bring out another sell point, zero shot. Actually, the zero-shot behaviour is mentioned in the last section of GPT-1's paper in order to understand more of the unsupervised pre-training mechanism. And in GPT-2, this behaviour is brought front to increase the novelty. Introduction Zero-shot learning (ZSL) is a problem setup in machine learning, where at test time, a learner observes samples from classes, which were not observed during training, and needs to predict the class that they belong to. Zero-shot methods generally work by associating observed and non-observed classes through some form of auxiliary information, which encodes observable distinguishing properties of objects.[1] The main-steam approach is one dataset - one task instead of one dataset - multiple tasks because of the generalisation that state of art models lack. Yet multitask learning (trending 2000-2010) represents the idea of training one model with a combination of multiple datasets and different loss functions. So GPT-2 takes the idea of multitask learning and trains the model with the zero-shot setting, under which the downstream tasks can be handled with no collecting of supervised data or fine-tuning. The result is competitive and promising according to the authors. Approach The model architectures of GPT1 and GPT2 are pretty much the same. But the input methods are different. In detail, recalling that during fine tuning process, the GPT1 introduces extra tokens such as [start], [Delim] and [Extract] to modify the input. But in GPT2 without the supervised fine-tuning process, these extra tokens would cause confusion. As a result, the downstream task input need to be more likely to the natural language when constructing. As a result, the authors introduce what we are used to calling it \"prompt\", here are the examples: For example, a translation training example can be written as the sequence (translate to french, english text, french text). Likewise, a reading comprehension training example can be written as (answer the question, document, question, answer). And afterward, 2 ideas for why this would work are discussed. First, if the model is powerful enough, it might be capable of understanding the prompts. Second, in such a big dataset, this kind of data structure exists. Take machine translation as an example, there should be many sentences containing \"translate to French\", English text, and French text. The authors point out some of them below. Examples of machine translation ”I’m not the cleverest man in the world, but like they say in French: Je ne suis pas un imbecile [I’m not a fool]. In a now-deleted post from Aug. 16, Soheil Eid, Tory candidate in the riding of Joliette, wrote in French: ”Mentez mentez, il en restera toujours quelque chose,” which translates as, ”Lie lie and something will always remain.”“I hate the word ‘perfume,”’ Burr says. ‘It’s somewhat better in French: ‘parfum.’If listened carefully at 29:55, a conversation can be heard between two guys in French: “-Comment on fait pour aller de l’autre coté? -Quel autre coté?”, which means “- How do you get to the other side? - What side?”. If this sounds like a bit of a stretch, consider this question in French: As-tu aller au cinéma?, or Did you go to the movies?, which literally translates as Have-you to go to movies/theater? “Brevet Sans Garantie Du Gouvernement”, translated to English: “Patented without government warranty”. Training data After considering the need for larger data and the disadvantage(noise) of the existing dataset, they developed a new dataset. The data is collected by first crawling 45 million links discussed on Reddit, and then extracting all the contents of these pages. The dataset contains 8 million documents, 40 GB of text. Experiment With 4 level of model, the one-short performances on 4 downstream tasks are shown blow: It can be seen that first 3 tasks, the results are not the best yet not the worst, however, the performance on Question Answering is bad, and other works perform way better than GPT-2. But this is not over, because in the figure, there is still room for performance improvement on all 4 tasks as the size of the larger model increases. So here comes GPT-3. GPT-3 The value of an article depends on the topic, effectiveness and novelty. GPT-2 has rather low effectiveness but strong novelty. As a result, GPT-3 aims to promote the effectiveness of its predecessor, while loosing the zero-shot condition to few-shot condition. Abstract The parameters of GPT-3 are enlarged 10 times to 175 billion. When applying GPT-3 to downstream tasks, strong performance is achieved without gradient update or fine-tuning. Besides, GPT-3 is capable of generating articles that are indistinguishable from humans' work. Besides, unlikely to former papers, this is a 63-page technic report. Without limitation of words or page number, it is very detailed, especially for the experiment and discussion sections. Introduction There are 3 problems of current pre-training + fine-tuning language model: A large labeled dataset is still needed for a good result The pre-training model is not really generalisable because of the need for fine-tuning Human doesn't need large fine tuning dataset When introducing their work, the authors try to re-define the concept of \"meta-learning\" and \"in-context learning\". What they really mean are training a huge generalisable model and train without updating the gradient, respectively. Then 3 evaluation methods are presented: Few-shot learning: 10-100 task-related data One-shot learning Zero-short learning And the performance with model size is plotted below (1.3B matches the GPT-2 model). Can be seen the final accuracy (few shot - 175B) almost doubled the former GPT-2 accuracy (1.3B zero-short) Approach In this section, fine-tuning, few-shot, one-shot, zero-shot learning are explained first in this figure below: The right column denotes the traditional fine-tuning process that requires extra few gradient update steps. The left side shows how GPT-3 applies \"in-context learning\" during inference. Basically, the input is divided by 3 parts, task description, example, and prompt. The task description and prompt are ended by \":\", and \"=&gt;\" respectively. The Transformer Decoder extracts the features of the \"context\" and then predicts the next several words starting from the prompt. As a result, the model is able to infer without gradient updates. Yet it comes 2 problems with few-shot: Unable to process really long examples. For example, thousands of English-French translation dataset is easy to get access but they can rarely be leveraged to promote the model performance. The inference is one-time thing, meaning the model can't actually learn from previous task description or example. Same samples have to be inputed again an again. As a result, the few-shot learning is not commonly used. Model and Architectures GPT-3 uses the same architecture as GPT-2 yet uses the methods form \"Sparse Transformer\" to modify the layers. And 8 different size of models are developed. Yet compared with previous models, GPT-3 is \"fatter\" ,meaning with same dmodel (192x of GPT3small), nlayers is smaller (only 8x of GPT3small). The mini-batch size goes up to 3.2M, definitely not mini. Large batch size improves the computational performance and parallelism while reducing the noise in each batch and making the model easier to overfitting. However, this defect is not evident in GPT-3. It is still an open question, now people consider it from two aspects: (1) the internal structure prevents the model from overfitting. (2) Such a large model is able to search for large space and it is more prone to converge to a simpler architecture. The learning rate decreases with batch size increasing according to research1 and research2, also counter-intuitive. Former work shows that batch size should increase linear with the learning rate. Training Dataset With a huge model, Common Craw dataset has come back as an option. The authors clean this dataset in 3 steps: A logistic classification model is built, taking samples of Common Craw dataset as negative and WebText as positive. Such model is used on the whole dataset of Common Craw to predict positive (high quality) or negative. The positive stay and the negative are filtered. LSH algorithm is applied on the remaining dataset to filter the similar content. More \"clean\" datasets are mixed in with weight. Training Process Specific training details are not presented. Information so far is DGX-1 cluster is used. Results The results are too many so only interesting figures are covered. From the figure, the power law distribution of performance with compute are found, i.e. in order to decrease the validation loss linearly, the FLOPS need to increase exponentially. This still is a major problem in Machine Learning. This figure shows the compression of results with Zero-shot SOTO and human. Nothing to comment. Just ... good. And on the Open-Domain QA tasks, GPT-3 outperform other models such as google T5. Google T5 can be considered as a model with both encoder and decoder. And few shot learning outperform SOTO fine tuning models. In the machine translation task, it is interesting to see that other language to English is better than English to others. Then a news article is generated with GPT-3 with numbers, years and time that makes the article look legit. Limitations Text synthesis, the predicted texts are always looping. The bidirectional limit still exist because of the decoder structure. The tokens that learned by GPT3 are equally weighted, yet wasting the model on the meaningless but high frequent function words. No experience in Videos or real-world physical interaction. The interpretation is still low. It's nearly impossible to know how does such a big model works. Broader Impact Can be used for fraud and crimes Gender difference and race Energy consuming Reference Dosovitskiy, A., Beyer, L., Kolesnikov, A., Weissenborn, D., Zhai, X., Unterthiner, T., ... &amp; Houlsby, N. (2020). An image is worth 16x16 words: Transformers for image recognition at scale. arXiv preprint arXiv:2010.11929. Radford, A., Kim, J. W., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., ... &amp; Sutskever, I. (2021, July). Learning transferable visual models from natural language supervision. In International Conference on Machine Learning (pp. 8748-8763). PMLR. He, K., Chen, X., Xie, S., Li, Y., Dollár, P., &amp; Girshick, R. (2021). Masked autoencoders are scalable vision learners. arXiv preprint arXiv:2111.06377. Child, R., Gray, S., Radford, A., &amp; Sutskever, I. (2019). Generating long sequences with sparse transformers. arXiv preprint arXiv:1904.10509. Kaplan, J., McCandlish, S., Henighan, T., Brown, T. B., Chess, B., Child, R., ... &amp; Amodei, D. (2020). Scaling laws for neural language models. arXiv preprint arXiv:2001.08361. McCandlish, S., Kaplan, J., Amodei, D., &amp; Team, O. D. (2018). An empirical model of large-batch training. arXiv preprint arXiv:1812.06162. Goyal, P., Dollár, P., Girshick, R., Noordhuis, P., Wesolowski, L., Kyrola, A., ... &amp; He, K. (2017). Accurate, large minibatch sgd: Training imagenet in 1 hour. arXiv preprint arXiv:1706.02677.","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"Bert","slug":"paper-reading-bert","date":"2022-04-15T10:01:32.000Z","updated":"2022-06-09T10:24:26.184Z","comments":true,"path":"2022/04/15/paper-reading-bert/","link":"","permalink":"https://daydreamatnight.github.io/2022/04/15/paper-reading-bert/","excerpt":"The BERT is the most important achievement in the NLP field in the last 4 years. It makes the transfer learning of NLP tasks possible and the transformer framework dominant the NLP field. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned.","text":"The BERT is the most important achievement in the NLP field in the last 4 years. It makes the transfer learning of NLP tasks possible and the transformer framework dominant the NLP field. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned. Paper link: Bert: Pre-training of deep bidirectional transformers for language understanding Useful links: https://www.bilibili.com/video/BV1PL411M7eQ ​ https://youtu.be/UYPa347-DdE ​ Deep contextualized word representations - arXiv Notes by sections 0. Abstract The name of BERT might come from one of its important related work, ELMo. And Elmo and Bert are both characters in a TV show Sesame Street. The abstract focus on the two related work, ELMo and GPT. The bidirectional feature is in contrast to the unidirectional GPT model. And the \"without substantial task specific architecture modifications\" feature compares with the RNN-based ELMo model, whose architecture might get modified when training downstream tasks. Yet the ELMo model is bidirectional and GPT model is easy to use. When claiming a model is great, it is good to provide both the absolute accuracy and the relative accuracy compared with others. Just like this paper does. 6. Conclusion To summarise, this is a classical A+B type of research. The idea of BERT is simple, combine the advantages of the bidirectional network with a rather old RNN base (ELMo), and the unidirectional network with a transformer base (GPT). And in detail, 2 pre-training tasks are designed. The main contribution of this network is showing that bidirectional information is important. 1. Introduction From the history introduction, it turns out BERT is not the first to apply pre-training on NLP. It's been a while. But BERT makes it popular. 2. Related work 2.3 Transfer Learning from Supervised data This is what the CV area does most often. Yet it is not effective in NLP. It is partly because of the lacking of data. Another reason might be the existing labeled data focus only on language inference and machine translation, which are too different from other NLP tasks. So BERT and GPT use unlabelled data to pre-train and prove that unsupervised pre-train on a massive data is more effective than supervised pre-train on a relatively small data set. And, interestingly, this trend in NLP gradually effects the CV world. Nowadays unsupervised fine-tuning is becoming more and more popular in CV area. 3. Bert In the first part, the pre-training and fine-tuning framework is briefly covered. A paper should be self-consistent, meaning that if a mechanic is fundamental in your area and essential to your work. It is a good habit to briefly introduce it, even if all the people in the area know it. Model Architecture And the architecture is as simple as just take the encoder part of the transformer model. number of layers (i.e., Transformer blocks) as L, the hidden size as H, and the number of self-attention heads as A. BERTBASE(L=12, H=768, A=12, Total Parameters=110M) and BERTLARGE(L=24, H=1024, A=16, Total Parameters=340M). Because the hidden size of each multi-head attention sublayer is set as 64. And in transformer tradition, H = A * 64. So the multi-head number A actually depends on the hidden size H. As a result, the way of calculating the number of parameters is shown below. Input/Output Representations Why Bert need a pair of sentence to handle downstream tasks such as Machine Translation, unlike its predecessor Transformer? Because in Transformer, the input is a pair of sequences, taken by encoder and decoder respectively. But Bert is only an encoder. In English-Chinese Translation task for example, for transformer, the encoder take the English version and the decoder take the Chinese version, for Bert, the English version and Chinese version are glued with a special token [sept] then be inputed to the model. Besides the [sept] token, another embedding is introduced into the embedding layer, the sequence model. Details are shown below. 3.1 Pre-training BERT The paper provides an example of each task in Appendix section Masked LM and the Masking Procedure, just go for it and have a look if don't understand. Next Sentence Prediction The next sentence prediction task can be illustrated in the following examples. Input = [CLS] the man went to [MASK] store [SEP] he bought a gallon [MASK] milk [SEP] Label = IsNext Input = [CLS] the man [MASK] to the store [SEP] penguin [MASK] are flight ##less birds [SEP] Label = NotNext The \"flight ##less\" is because of the WordPiece embedding method that Bert uses. \"##\" means this token is split from last token, in this case, flightless is the original token. Because flightless is rarely used, the WordPiece embedding split this word into two. 3.2 Fine-tuning BERT Bert's architecture has one advantage over the transformer's, the self-attention allows model look both the two sentences. And the encoder-decoder model can't do that. As a result, the fine-tuning can be a little bit hazy. 4 Experiments 4.2 SQuAD v1.1 We fine-tune for 3 epochs with a learning rate of 5e-5 and a batch size of 32. This misleads the people for a while. People found when fine-tuning with Bert, the variance of each results are high i.e. the result of fine-tuning is unstable. Then people found it is because 3 epochs are not enough. Besides, the optimiser that the original Bert model used is an incomplete version of Adam which is not stable for small epoch number. And the follow-ups change it into the original Adam. From the processes of the 3 experiments, it can be seen it is easy for BERT to be applied to downstream tasks. Just need to modify the input data in the form of the Bert sequence, and add another output layer. As a result, with BERT, massive number of tasks can be trained under a rather simple architecture. 5 Ablation Studies It is obvious the 4th architecture BiLSTM is from the idea of ELMO. And all the variation lead to a deterioration of the acc, especially in the MRPC task. Microsoft Research Paraphrase Corpus (MRPC) Dataset Created by Dolan et al. at 2005, the Microsoft Research Paraphrase Corpus (MRPC) Dataset contains pairs of sentences which have been extracted from news sources on the web, along with human annotations indicating whether each pair captures a paraphrase/semantic equivalence relationship., in English language. Containing 5,8 in Text file format. In the Effect of model size part, they claim with a large model size, huge improvement can be reached. And this leads a trend of increasing the model size in NLP, for example, the 100 billon GPT-3, and 500 billion model Megatron-Turing Natural Language Generation (MT-NLG). The boundary of NLP will be push further. Reviews Writing: The biggest sell point in this paper is chosen as the \"bidirectional\". From today's view, the contributions of BERT are so more than this. Besides, when say to choose a feature, it is better to discuss both the pros and the cons of the choice. For example, compared with GPT, the encoder is used instead of the decoder. The pros are the bidirectional feature, but the cons is the resulting difficulty in applying on generative tasks such as the machine translation. Besides, BERT follows a whole ideal path of solving deep learning problems. That is after pre-training on a deep and huge model on a huge unlabelled dataset, the model can be applied to many small tasks with a few steps of fine tuning.","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"Introduction to GNN","slug":"paper-reading-A-gentle-introduction-to-graph-neural-networks","date":"2022-04-14T05:58:38.000Z","updated":"2022-06-09T10:24:16.117Z","comments":true,"path":"2022/04/14/paper-reading-A-gentle-introduction-to-graph-neural-networks/","link":"","permalink":"https://daydreamatnight.github.io/2022/04/14/paper-reading-A-gentle-introduction-to-graph-neural-networks/","excerpt":"This is a tech blog written by google research team in 2021 that introducing the graph neural network. GNN has gradually become popular in the last 4 years. Personally, I think the graph structure looks similar to the CFD mesh, and there are works focusing on simulating physics via GNN. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned.","text":"This is a tech blog written by google research team in 2021 that introducing the graph neural network. GNN has gradually become popular in the last 4 years. Personally, I think the graph structure looks similar to the CFD mesh, and there are works focusing on simulating physics via GNN. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned. Paper link: A gentle introduction to graph neural networks Useful link: https://www.bilibili.com/video/BV1iT4y1d7zP Notes Because this blog has introduced GNN in detail and explained well with the interactive diagrams, it almost leaves me no need for extra notes. As a result, a throughout reading of the original blog is recommended. And as a result this notes are only in pieces. Graph-level task In a graph-level task, our goal is to predict the property of an entire graph. For example, for a molecule represented as a graph, we might want to predict what the molecule smells like, or whether it will bind to a receptor implicated in a disease. The example is actually a simple task example, and the loops can be detected with ordinary algorithm such as: Fast and Slow Pointer: Floyd's Cycle Detection Algorithm. But with more complicated task, GNN can be useful. And here is the related Leetcode question: No.141: Linked List Cycle. This is reminiscent of standard convolution: in essence, message passing and convolution are operations to aggregate and process the information of an element’s neighbors in order to update the element’s value. In graphs, the element is a node, and in images, the element is a pixel. However, the number of neighboring nodes in a graph can be variable, unlike in an image where each pixel has a set number of neighboring elements. When introducing the message passing method, this blog makes an analogy with the convolution. And in addition to the however part mentioned in this blog, another difference is that in convolution, each element's value is weighted differently while in the aggregation method they are all the same. Interestingly, similar weights can be achieved with Graph Attention Networks, which is introduced in later section. Another way of communicating information between graph attributes is via attention. For example, when we consider the sum-aggregation of a node and its 1-degree neighboring nodes we could also consider using a weighted sum. A common scoring function is the inner product and nodes are often transformed before scoring into query and key vectors via a linear map to increase the expressivity of the scoring mechanism. Reviews Writing: the whole article is well coherent and fluent, building the knowledge of GNN step by step, from a highly simplified model to the real GNN. The beautiful interactive figures make the article easy to read and digestible. Yet lacking mathematics and codes is both pros and cons. Unfortunately, tarting today Distill will be taking a one year hiatus, which may be extended indefinitely. Graph neural network: a graph is a powerful tool so that all kinds of data can be described as a graph. But this power leads to a huge difficulty in optimisation. One reason is the sparsity, the dynamic structure makes it difficult the train on CPU or GPU. Another is that GNN is very sensitive to hyper-parameters, just like the experiment section of this blog shows. As such, it is an active research area yet rarely deployed in industry.","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"Transformer","slug":"paper-reading-transformer","date":"2022-04-12T15:31:21.000Z","updated":"2022-06-09T10:25:21.668Z","comments":true,"path":"2022/04/12/paper-reading-transformer/","link":"","permalink":"https://daydreamatnight.github.io/2022/04/12/paper-reading-transformer/","excerpt":"The transformer is the most important achievement in the last 5 years. It presents the fourth class of deep learning models besides MLP, CNN and RNN. And had a huge impact on the entire deep learning field, be it NLP or CV. Even the way the paper and network are named leads a trend. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned.","text":"The transformer is the most important achievement in the last 5 years. It presents the fourth class of deep learning models besides MLP, CNN and RNN. And had a huge impact on the entire deep learning field, be it NLP or CV. Even the way the paper and network are named leads a trend. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned. Paper link: Attention is all you need Useful link: https://www.bilibili.com/video/BV1pu411o7BE Notes by sections 0. Abstract According to the abstract, this work is first presented in the small field of machine translation, but because of the strong ability of generalisation. The transformer architecture has been extended in other fields such as CV and video. 6. Conclusion In the last part of the conclusion section, the future of transformer is partly predicted by the authors, though most of these future work is done by other researchers. 1. Introduction Firstly, traditional RNN, or GRU has been introduced. Then after a brief description of the sequential nature of RNN based models, the main problems of them are presented. That is, poor ability of parallelising, and poor long-range dependencies. Later after the introduction of the attention framework and how to combine attention into RNN, transformer is presented. 2. Background First, with the goal of gaining the ability to parallelise, the authors look back on using CNN for sequential data. With CNN, parallelising ability is in its nature and with multiple channels, multiple features can be learned through training. Likewise, the transformer is also parallelisable and Multi-Head Attention is designed with the ability to learn multiple features. But additionally the transformer is easier to learn dependencies between distant positions. Afterwards, related work on self-attention and memory network is mentioned. And both the connections and distinctions with transformer are elaborated. 3. Model Architecture After introducing the basic idea of the encoder-decoder architecture, the key transformer architecture diagram is given. And each part of the model is briefly described. (The diagram in this blog below is not the original, but a combination of 3 diagrams in the paper.) 3.1 encoder decoder stacks Encoder: In addition to briefly describing the encoder architecture, the authors mention that in order to avoid the projection step on the residual connection layers, the same input and output dimension is chosen in each sublayer, which is different from what CNN normally does. And this simple design yields the super parameters of the encoder to 2: Nx - the number of the \"encoder block\" and d_model - the feature dimension of the output layers. And this design makes the follow-up work such as bert, GPT-3 simple as well. Here is one thing that has been ignored: the definition of layer norm. Unlike batch normalization, Layer Normalization directly estimates the normalization statistics from the summed inputs to the neurons within a hidden layer so the normalization does not introduce any new dependencies between training cases. More is on https://paperswithcode.com/method/layer-normalization Decoder: Because in the prediction mode, the decoder is self-regressing, meaning that when predict y_t, only x_0 to x_t are available. However, the self-attention layer is able to attend to all the data i.e. x_0 - x_n. To prevent this, a masked multi-head attention layer is introduced so that when predict y_t, x_t+1 - x_n are masked. 3.2 Attention Similarly, after running over the definition of attention mechanism, the 2 modifications: scaled dot-product attention and Multi-head attention are described. As we all known, there are two methods (attention scoring functions) of calculating the similarity of query and key(attention weights over the value). One is additive attention. It is complex but allows different length of key (dk) and query (qk). And Additive attention layer includes learnable parameters that can be tuned during training. Another one is dot-product attention, it is simply dot product of the transverse query and key matrix. It requires same length of query and key and no learnable parameters are introduced. scaled dot-product attention It pretty much is the dot-product attention multiply with a scaling factor of 1/√dk. And it is because for large dk, the deviation of the dot-product results might get too large, and the according gradient can get extremely small and hard to train. But look the figure 2 of the paper, an optional mask node is shown in the computation graph. And the algorithm of mask is not described in detail. Basically when calculating q_t, in the mask node, the attention scores a_t+1 - a_t are substituted to a huge negative so that after softmax, the attention weight is 0 on values v_t+1 to v_n. And it is corresponding to the how the decoder works in the prediction mode. multi-head attention How mutli-head works is introducing clearly in the paper: linearly project the queries, keys and values h times with different, learned linear projections to dk, dk and dv dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding dv-dimensional output values. These are concatenated and once again projected, resulting in the final values The question is why doing that. First, no learnable parameters in the dot-product attention, and second, to mimic the CNN extracting the features from different perspectives. Applications of Attention in our Model It is well shown on the whole architecture figure. In the figure it consists of 2 self-attention block and 1 attention block, where key-value is from the encoder and query is from the decoder. 3.3 Position-wise feed-forward networks It is a simply an MLP with one hidden layer. And the hidden size is 4 times of the input and output size. 3.4 Embedding and softmax One point is they multiply the weights by√d_model. And first same reason with before, and second, with scaled weights, the scale matches the scale of positional encoding described below. 3.5 Positional Encoding Different with RNN, transformer architecture reads no sequence information. And the authors add the positional information in the input data. 4 Why Self-Attention Basically it explains the table 1 below: It might be the case but it's not been accepted by some researchers. And the restricted self-attention is rarely used. The table shows that if n and d are the same, self-attention, RNN, and CNN possess the same complexity per layer, but self-attention outperforms them on the sequential operations and the max path length. But actually, a huge mount of layers and parameters and data are required for a self-attention model achieving a similar result as RNN and CNN. And nowadays all models based on the transformer are very expensive. 6 Results 6.2 Model Variations From Table 3, we can see the hyper parameters are not so much, and this simple design benefits the follow-ups. For example Bert and GPT. Reviews Writing: It is concise and neat. But if the possible, it's better to describe why of doing it, and show more thoughts on the model to make the paper \"deeper\". Model: Transformer change the NLP filed just like how CNN change the CV filed. Through after transformer based model such as BERT, it is possible to pretrain a huge model to rise all the NLP performance. Besides, in other fields such as CV and audio, transformer becomes a great rising point. And the fact that transformer may suitable for all the deep learning tasks gives a new thought of muti-model learning. Maybe a general model able to extracting video, pictures, audio into a same semetic space is coming soon. Yet, despite the great experiment performance, we still can't fully understand why transformer works. For example, attention is not all one need, because the residual connection and MLP are all critical. We still don't know why. Why without explicitly model the sequence or the space, transformer outperform RNN and CNN. One explanation is that it is because transformer's inductive bias is more relaxed than either recurrent or convolutional architectures. And that is why huge amount of data are needed for transformer to achieve a good result.","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"ResNet","slug":"paper-reading-ResNet","date":"2022-04-09T12:42:00.000Z","updated":"2022-06-09T10:25:07.255Z","comments":true,"path":"2022/04/09/paper-reading-ResNet/","link":"","permalink":"https://daydreamatnight.github.io/2022/04/09/paper-reading-ResNet/","excerpt":"Since its introduction in 2015, ResNet and its variants have accounted for 50% of deep neural networks in use. The idea of \"Residual\" has been proved to be efficient and important to deep NN. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned.","text":"Since its introduction in 2015, ResNet and its variants have accounted for 50% of deep neural networks in use. The idea of \"Residual\" has been proved to be efficient and important to deep NN. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned. paper link: Deep residual learning for image recognition useful link: https://www.bilibili.com/video/BV1Fb4y1h73E Notes by sections 0. Abstract An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset Not only the 1st place results on several tasks but the potential to train a 1000-layer network made this Residual framework a huge attention. Unfortunately, due to the 8-page limitation of CDPR, and the massive number of results to be presented, there is no room for the conclusion section in this paper. Key figure This is the key figure showing that the degradation in accuracy caused by the depth in plain networks has been well addressed in ResNet. 1. Introduction This section first presents the need of training deeper neural network. And the first obstacle that encountered during this process is non-convergence cause by gradient vanishing / explosion, and it has been well addressed by normalised initialisation and intermediate normalisation layers. And the main focus of this paper is the second obstacle i.e. deeper networks have difficulty converging to lower losses and may perform worse than networks with fewer layers. And they addressed this obstacle by introducing the Residual learning framework as shown in the pic below. And this framework is easy to implement in caffe, the most popular DL framework back to 2015. Afterwards experiments results are briefly mentioned. The introduction section played as an expanded version of the abstract and the residual method is mainly focused, which is helpful for readers to catch the essence of the whole paper. 2. Related work Residual representation Actually the concept of residual is more common in the fields of statistics and machine learning. For example in linear regression, the residual denotes the distance between the estimated and the actual results (residual=y- y ̂ in 2D). And the iterative process of calculating the regression line aims to minimise the mean square of the residual loss. In addition, the well-known GB gradient boosting algorithm for machine learning is also based on the residual loss. Because this paper mainly focus on computer vision, so these early work isn't included. Shortcut connections It looks like this paper combines these two well-studied approaches with amazing results. First ideas are not necessary to make a paper a classic. Just like the quote on the Google Scholar homepage: stand on the shoulders of giants. 3. Deep Residual Learning Let us consider H(x) as an underlying mapping to be fit by a few stacked layers (not necessarily the entire net), with x denoting the inputs to the first of these layers. First is the meaning of H(x), underlying mapping is actually intuitive but it confused me for a while, so here's the answer below: What does the phrase 'underlying mapping' mean? - Data Science Stack Functions map domains to ranges. Neural networks learn such functions, so you can think of a neural network as a mapping of input spaces to output spaces. Deep neural networks are stacked with many layers of course, and each of those can be viewed as sub-functions of the network with their own underlying mappings. For example, each layer in a convolution network consists of some convolution layers + some other helper layers such as normalisation and pooling. Next the paper brings up 2 methods to address the shape difference between X the input and H(x) the output for one particular layer that may occur. Option (A): 0 padding and Option (B): 1*1 convolution to project the channel and pooling with stride to adjust the height and width. 4. Experiments Identity vs. Projection Shortcuts After introducing the well known architectures, the 2 methods to address the shape difference are also studied. 3 groups are studies, Option (A): 0 padding, Option (B): projection when necessary, Option (C): projection to all layers. And because of the increasing of parameters caused by the projection, it is not surprise to discover C is better than B than A. And Option (B) is the winner considering both the performance and the efficiency. Deeper Bottleneck Architectures In ResNet18 and ResNet 34, the standard architecture is fine. But for deeper network, in order to decrease the flops, the bottleneck architectures is deployed. Basically in each residual block, decreasing the number of channel by 1*1 convolution first then expend the channel back to the number of input channel. As can be seen in Table 1, the flops of ResNet34 is similar to that in ResNet50. But this is only theory, in practice ResNet50 is obviously more expensive because of the inefficiency of computing 1*1 conv. Exploring Over 1000 layers Networks with layer numbers from 20 to 1202 are applied on dataset CIFAR-10 (With only output size 32*32 compared with &gt;300*300 on ImageNet, the networks are slightly modified). And the results shows that even with an aggressive depth on a tiny dataset, no difficulty of optimisation occurs. Yet shown on Table6, the test set classification error goes up compared with the shallower models because of the overfitting. Some Reviews This is a model with relatively simple idea and the authors have a great writing skill to make this paper neat and clear. The main contribution of this paper is introducing the residual block and skipping connection in deep learning. Although the authors intuitively explain and provide some experiments, the explanation is not currently accepted by the mainstream. Today, the reason why ResNet can achieve better results than ordinary networks is mainly because of its property of preventing vanishing gradients. The ordinary network without the residual framework cannot be trained in the later stage of training. It's still an open question why the 1000-layer network has low level of overfitting on a simple dataset. The same question is good performance on large networks such as the transformer series. One explanation is that despite the large network size, the intrinsic model complexity is low.","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"AlexNet","slug":"paper-reading-AlexNet","date":"2022-04-07T14:25:50.000Z","updated":"2022-06-09T10:24:20.197Z","comments":true,"path":"2022/04/07/paper-reading-AlexNet/","link":"","permalink":"https://daydreamatnight.github.io/2022/04/07/paper-reading-AlexNet/","excerpt":"It has been 10 years since AlexNet has been brought out. It is one of the cornerstones of this surge of deep learning. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned.","text":"It has been 10 years since AlexNet has been brought out. It is one of the cornerstones of this surge of deep learning. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned. paper link: ImageNet Classification with Deep Convolutional Neural Networks useful link: https://www.bilibili.com/video/BV1ih411J7Kz Little history It hasn't gotten much attention by the area of machine learning for the first 2-3 years since it got published, because this paper is written rather as a technical report than an academic paper. A good paper needs new thoughts for the model, or at least some explanations, while this paper only presented how they applied 3 tricks and how good their results are. However, there was no doubt an influential hit in the area of computer vision, which has a passion for refreshing the top list. And this influence spread to other areas gradually with deeper studies on it. Notes by sections 0. Absturct To make training faster, we used non-saturating neurons and a very efficient GPU implementation of the convolution operation. In addition to a brief introduction to the model, the use of GPU is also mentioned in the abstract. And works around GPU are mentioned all the time. It was really a tough engineering job from the perspective of the first writer. But it is not important for an acdemic paper. Besides, since the emergence of CUDA in 2007, the application of GPU in the ML field in 2012 is not uncommon, and MATLAB is mainly used as a ML tool with a large number of GPU acceleration libraries. We also entered a variant of this model in the ILSVRC-2012 competition and achieved a winning top-5 test error rate of 15.3%, compared to 26.2% achieved by the second-best entry At last, the result in the ILSVRC-2012 competition is as good as knocking the second to the ground and then showing off with a set of backflips. So personally it might look like a technical report, but it's still an outstanding paper and absolutly worth reading. 7. Discussion In stead of conclusion, this paper leaves a discussion as the last section, which is unsual. For example, removing any of the middle layers results in a loss of about 2% for the top-1 performance of the network. So the depth really is important for achieving our results The depth is important, but it is insufficient to be simply concluded from the degradation caused by removing one middle layer, ignoring other effects such as superparameter settings. And, considering only the conculsion, a more complete one might be, depth and width are both very important. The ratio of height and width matters. To simplify our experiments, we did not use any unsupervised pre-training even though we expect that it will help Before AlexNet, it was common to warm up the NN with massive unlabelled images before the actual training i.e. use an unsupervised model as an initial. And the goal of the field of machine learning was to extract the features of data through large-scale unsupervised models. However, this sentence steered the entire field from unsupervised to supervised learning, which, according to the machine learning pioneers such as Hinton and LeCun, was a \"wrong route\". But with the rise of the pre-trained language models such as Bert, and the contrative learning model in CV field such as MoCo, the unsupervised route is gradually comming back to the foreground. Ultimately we would like to use very large and deep convolutional nets on video sequences where the temporal structure provides very helpful information that is missing or far less obvious in static images. Actually video sequences are still a tough area beacause of the high computational comsumpution and the copyright issues. Key figure The right part is the most important result in this paper, though it isn't been discussed much in this paper. Actually it shows the last layer feature vectors perform really well in the semantic space i.e. deep neural network is very suitable to extract features from data. 1. Introduction To improve their performance, we can collect larger datasets, learn more powerful models, and use better techniques for preventing overfitting. The paper leads one route of deep learning, which is, with large dataset and model, developing powerful regularization methods to prevent overfitting. However there is a new route, which is focusing on designing good architecture s.t. the overfitting won't happen with large model. Our network contains a number of new and unusual features which improve its performance and reduce its training time, which are detailed in Section 3. we used several effective techniques for preventing overfitting, which are described in Section 4. These two are the innovative points. People can then follow their work later, which makes this paper a cornerstone. 2. Dataset We did not pre-process the images in any other way, except for subtracting the mean activity over the training set from each pixel. So we trained our network on the (centered) raw RGB values of the pixels. There is one more point that is not emphasized. Previously, features of an image (such as SIFT) were always used as input instead of raw RGB values. Datasets such as ImageNet provided SIFT of their image set as well. The end-to-end nature is the selling point of a series of deep learning papers that follow. 3. Architecture 3.1. ReLU From a present point of view, ReLU is not that important for speeding up the training process. Other activation functions still work. It's the simplicity of ReLU that makes it stick. 4. Reducing Overfitting A metaphore of overfitting: In order to get a high score on an exam, you memorize all the answers to the exercises instead of understanding the question. 4.1 Data Augmentation The second form of data augmentation consists of altering the intensities of the RGB channels in training images. Specifically, we perform PCA on the set of RGB pixel values throughout the ImageNet training set. PCA is here use as a augmentation method which follow-up work don't follow. For example, in ResNet a standard color augmentation is used with no fancy methods. And nowadays, standard color augmentation wins. 4.2 dropout There is, however, a very efficient version of model combination that only costs about a factor of two during training. The recently-introduced technique, called “dropout” Here dropout is considered a light version of model ensembling, but later study below has shown that the effect of dropout is actually equivalent to weight decay/regularization, yet there is no specific weight decay method equivalent to it algorithmically. one way to obtain some of the benefits of dropout without stochasticity is to marginalize the noise to obtain a regularizer that does the same thing as the dropout procedure, in expectation. We showed that for linear regression this regularizer is a modified form of L2 regularization. For more complicated models, it is not obvious how to obtain an equivalent regularizer. 5. Details of learning we trained our models using stochastic gradient descent with a batch size of 128 examples, momentum of 0.9, and weight decay of 0.0005 momentum, weight decay with SGD has become a standard method afterwards. We initialized the weights in each layer from a zero-mean Gaussian distribution with standard deviation 0.01 (0, 0.01) is usually chosen as the initialization parameter pair in most standard-sized models. (0, 0.02) is in use even for large models like Bert. We trained the network for roughly 90 cycles through the training set of 1.2 million images, which took five to six days on two NVIDIA GTX 580 3GB GPUs. Similar to what is happening now with training NLP, maybe it will drive the next evolution in hardware. And probably hardware similar to TPU would be popular. 6. Results 6.1 Qualitative Evaluations The kernels on GPU 1 are largely color-agnostic, while the kernels on on GPU 2 are largely color-specific. The kernels on GPU 1 are largely color-agnostic, while the kernels on on GPU 2 are largely color-specific Interesting problem but less focused by follow up work. consider the feature activations induced by an image at the last, 4096-dimensional hidden layer. If two images produce feature activation vectors with a small Euclidean separation, we can say that the higher levels of the neural network consider them to be similar. This is an intuitive work as talked before, and follow up work such as Visualizing and understanding convolutional networks dig deeper trying to interperate the NN. And interpretion is very important for works related to physics or fairness. Reference Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., &amp; Salakhutdinov, R. (2014). Dropout: a simple way to prevent neural networks from overfitting. The journal of machine learning research, 15(1), 1929-1958. Zeiler, M. D., &amp; Fergus, R. (2014, September). Visualizing and understanding convolutional networks. In European conference on computer vision (pp. 818-833). Springer, Cham. Du, M., Yang, F., Zou, N., &amp; Hu, X. (2020). Fairness in deep learning: A computational perspective. IEEE Intelligent Systems, 36(4), 25-34.","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"paper reading: start","slug":"paper-reading-start","date":"2022-04-02T13:49:37.000Z","updated":"2022-05-03T02:33:47.634Z","comments":true,"path":"2022/04/02/paper-reading-start/","link":"","permalink":"https://daydreamatnight.github.io/2022/04/02/paper-reading-start/","excerpt":"This is a brief description of the 3-step method of reading a paper. And a reading list. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned.","text":"This is a brief description of the 3-step method of reading a paper. And a reading list. This is a series of paper reading notes, hopefully, to push me to read paper casually and to leave some record of what I've learned. 🔝 Mindmap for quick indexing How to read a paper The method is inspired by Andrew Ng's lecutre on Stanford and Mu Li's online lecutre Up to 3 passes for one paper: Section 1st pass 2nd pass 3rd pass 1. Title √ 2. Abstruct √ 3. Intro criticle references 4.Method key pics &amp; tables key pics &amp; tables how to apply 5. Expriment key pics &amp; tables key pics &amp; tables how to do it 6. Conclusion √ First pass: title, abstract, conclusion. Take a look at important figures and tables in the Methods and Experiments section. In this way, you can spend less than 15 minutes to understand whether the paper is suitable for your research direction. Second pass: After confirming that the paper is worth reading, you can quickly go through the whole paper. You don’t need to know all the details. You need to understand important figures and tables, know what each part is doing, and circle the relevant literature. If you think the article is too difficult, you can read the cited literature. The third pass: what problem was asked. How to solve this problem. How to apply the experiment. Close the article and recall what each section is about. Some rules: Efficient high informative content first then the harder material Skip the parts which do not make sense unless trying to do deep research on it The related work part is often unimportant Questions that keep in mind: what the authors try to accomplish what are the key elements of the approach what can you use yourself what other references do you want to follow List of papers paper reading: AlexNet paper reading: ResNet paper reading: transformer paper reading: Introduction to GNN paper reading: bert paper reading: GPT1-3 paper reading: Vision Transformer paper reading: MAE Paper reading: Constructive learning review","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"}],"author":"Ryan LI"},{"title":"learning rate schedule","slug":"learning-rate-schedule","date":"2022-03-08T01:32:32.000Z","updated":"2022-05-02T09:41:35.127Z","comments":true,"path":"2022/03/08/learning-rate-schedule/","link":"","permalink":"https://daydreamatnight.github.io/2022/03/08/learning-rate-schedule/","excerpt":"Learning rate schedule is one commonly used trick to control the process of training. Different kinds of learning tricks are presented every day. In this article, I have put together classical methods theories and apply them in this little competition. Recently, I joined a Kaggle image classification competition, I used the pretrained ResNet50 plus other tricks and here is to record some of them I've learned for now.","text":"Learning rate schedule is one commonly used trick to control the process of training. Different kinds of learning tricks are presented every day. In this article, I have put together classical methods theories and apply them in this little competition. Recently, I joined a Kaggle image classification competition, I used the pretrained ResNet50 plus other tricks and here is to record some of them I've learned for now. Introduction Learning rate is one critical parameter in alliterative algorithms, including PDE and ODE solving, optimization, and eigenvalue calculation. In the deep learning area, the learning rate is more than critical because of the notorious difficulty on Stochastic gradient descent. Strictly, there are two ways of adjusting the learning rate: learning rate scheduling: adjust the global learning rate during iteration adaptive learning rate: adjust the learning rate for each parameter based on their gradients updates(moments), also called adaptive gradient or gradient descent optimization. In this article, learning rate schedule is mainly discussed. Afterward, \"learning rate\" refers to the \"global learning rate\". Methods of learning rate scheduling Apart from the constant learning rate, there are several ways to schedule the learning rate: change with epoch numbers learning rate decay: linear, step... learning rate down then up: stochastic gradient descent with warm restarts(SGDR) and Cyclical Learning rates(CLR) warmup change on some validation measurements: plateau learning rate decay Under the upper concepts of decaying the learning rate while training, how to choose a specific decay policy is personal. It can be continuous or step, linear or polynomial, exponential or trigonometric. In articles, stepped learning rate decay is more often used as the default choice. For example, Zagoruyko, S., &amp; Komodakis, N set the initial learning rate as 0.1 and drop it by 0.2 every 60 epochs on their modified version of ResNet. And this version of learning rate decay is set as the control group to compare with the SGDR strategy later in Ilya Loshchilov &amp; Frank Hutter's work. And in practice, the cosine annealing policy is a common choice today and can be used either alone or in combination with warmup and SGDR. Explanation Because of the presence of stochastic noise, the entire gradient descent process is not straightforward. With a constant learning rate, as shown in the gradient contour map below, the minima can not be reached with a constant step (blue) due to the relatively small steps at the bottom. And a lower minimum can be reached if the learning rate descends with the gradient i.e. epoch(green). #### SGDR and CLR ##### SGDR Stochastic gradient descent with warm restarts(SGDR) is firstly proposed to Deep learning in Ilya Loshchilov &amp; Frank Hutter's work. They introduced a policy of reinitializing the learning rate every certain number of epochs. Applying cosine annealing learning rate decay during each resulting \"mini-run\", the results perform fascinating. As shown in the charts, compared to 2 default step learnin rate decay policies, they enacted several SGDR policies with different T_0 and T_mul. T_0 refers to the epoch interval of the first \"mini-run\" and the epoch interval is multiplied by T_mul after each restart. As a result, at the ith \"mini-run\", T_i = T_0*T_mul^(i) And they suggests a SGDR policy with a small T0 = 1 or 10 at start, and set Tmult = 2 to double the epoch interval after every restart. And they claim by this policy, at least 2× to 4× fewer epochs are required to achieve a comparable result than before. ##### CLR A similar method called cyclical Learning rates(CLR) is proposed later by Leslie N. Smith, where 2 kinds of triangular and exponential CLR policies are demonstrated on CIFAR-10 and CIFAR-100 with most kinds of mainstream CNN modules. Similarly, compared with a default fixed learnin rate, the demonstrats that their policies outperforms in accuracy and efficiency on several datasetes. one obtains the same test classification accuracy of 81.4% after only 25, 000 iterations with the triangular2 policy as obtained by running the standard hyper-parameter settings for 70, 000 iterations. ##### explanation Because of the nonconvexity, it is common sense that reaching a global minima is impossible. With a standard learning rate decay, a saddle point, or unstable local minima is more likely to trap the descending process as shown below. But cyclical Learning rates(CLR) and stochastic gradient descent with warm restarts(SGDR) would allow the process to “jump” from one local minimum to another regularly until a stable one. Still there are several choices, but Cosine Cyclical and Cosine Annealing with Warm Restarts are more common. #### learning rate warmup Learning rate warmup is first applied in the famous Resnet paper in one of its experiments. In this case, we find that the initial learning rate of 0.1 is slightly too large to start converging5 . So we use 0.01 to warm up the training until the training error is below 80% (about 400 iterations), and then go back to 0.1 and continue training. And later Goyal and He's work makes a major influence, where constant and gradual methods of warmup are discussed. And gradual warmup is proved to be effective on large minibatch size. As we discussed, for large minibatches (e.g., 8k) the linear scaling rule breaks down when the network is changing rapidly, which commonly occurs in early stages of training. We find that this issue can be alleviated by a properly designed warmup [16], namely, a strategy of using less aggressive learning rates at the start of training. In practice, warmup are always combined with other learning rate methods afterwards. And linear warmup is a default method. #### Reducing the learning rate on plateau Apart from methods scheduling the learning rate with epoch, a dynamic learning rate decay method is also an option. It denotes the process of decaying the learning rate only when the optimizer fails to improve the accuracy or decrease the loss in serval epochs. For example, in AlexNet, The heuristic which we followed was to divide the learning rate by 10 when the validation error rate stopped improving with the current learning rate. The learning rate was initialized at 0.01 and reduced three times prior to termination. In Resnet after the warm-up, The learning rate starts from 0.1 and is divided by 10 when the error plateaus Apply learning rate scheduling in PyTorch torch.optim.lr_scheduler provides several methods to adjust the learning rate based on the number of epochs. For example, def train_ch6(net, train_iter, test_iter, num_epochs, lr, device): print(&#x27;training on&#x27;, device) net.to(device) optimizer = torch.optim.Adam(net.parameters(), lr=lr) scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, num_epochs*len(train_iter)/10, eta_min=1e-9) loss = LSR(0.1) for epoch in range(num_epochs): net.train() for i, (X, y) in enumerate(train_iter): X, y = X.to(device), y.to(device) optimizer.zero_grad() y_hat = net(X) l = loss(y_hat, y) l.backward() optimizer.step() scheduler.step() Apart from well defined lr_scheduler , torch.optim.lr_scheduler.LambdaLR allow us to apply self define scheduler such as: print(&#x27;training on&#x27;, device) net.to(device) optimizer = torch.optim.Adam(net.parameters(), lr=lr) t=10*len(train_iter)#warmup T=num_epochs*len(train_iter) lambda1 = lambda epoch: (0.9*epoch / t+0.1) if epoch &lt; t else 0.1 if 0.5 * (1+math.cos(math.pi*(epoch - t)/(T-t)))&lt;0.1 else 0.5 * (1+math.cos(math.pi*(epoch - t)/(T-t))) scheduler = torch.optim.lr_scheduler.LambdaLR(optimizer, lr_lambda=lambda1) # plot learningrate_decay lr_plot = [] for _i in range(num_epochs): for _j in range(len(train_iter)): optimizer.step() lr_plot.append(optimizer.param_groups[0][&quot;lr&quot;]) scheduler.step() plt.plot(lr_plot) Should we do scheduling with adaptive learning rate method? From Should we do learning rate decay for adam optimizer?, I found it as a arguable question. It depends. ADAM updates any parameter with an individual learning rate. This means that every parameter in the network has a specific learning rate associated. But* the single learning rate for each parameter is computed using lambda (the initial learning rate) as an upper limit. This means that every single learning rate can vary from 0 (no update) to lambda (maximum update). It's true, that the learning rates adapt themselves during training steps, but if you want to be sure that every update step doesn't exceed lambda you can than lower lambda using exponential decay or whatever. It can help to reduce loss during the latest step of training, when the computed loss with the previously associated lambda parameter has stopped to decrease. In my experience it usually not necessary to do learning rate decay with Adam optimizer. The theory is that Adam already handles learning rate optimization (check reference) : \"We propose Adam, a method for efficient stochastic optimization that only requires first-order gradients with little memory requirement. The method computes individual adaptive learning rates for different parameters from estimates of first and second moments of the gradients; the name Adam is derived from adaptive moment estimation.\" As with any deep learning problem YMMV, one size does not fit all, you should try different approaches and see what works for you, etc. etc. Yes, absolutely. From my own experience, it's very useful to Adam with learning rate decay. Without decay, you have to set a very small learning rate so the loss won't begin to diverge after decrease to a point. But in the article Decoupled weight decay regularization(AdamW), it is encouraged. Adam can substantially benefit from a scheduled learning rate multiplier. The fact that Adam is an adaptive gradient algorithm and as such adapts the learning rate for each parameter does not rule out the possibility to substantially improve its performance by using a global learning rate multiplier, scheduled, e.g., by cosine annealing. In the CLR article, the authors encourage the combination of CLR methods with Adam as well. Adaptive learning rates are fundamentally different from CLR policies, and CLR can be combined with adaptive learning rates, as shown in Section 4.1. I All in all, theoretically, the adaptive learning rate methods such as Adam adjust the learning rate for each parameters under a upper limit as the global learning rate, which can be adjusted by scheduling. In practice, at least SGDR and CLR have been proved to be useful combining with optimizers. Experiment: Adam vs Adam + SGDR In this little experiment, the best setting in the last article is set as baseline, with Adam with constant learning rate. Leave other settings, Adam with cosine annealing learning rate, and AdamW with cosine annealing learning rate are compared. global learning rate = 0.005 scheduler = torch.optim.lr_scheduler.CosineAnnealingWarmRestarts(optimizer, T_0 = **int**(num_epochs***len**(train_iter)/10), T_mult=1, eta_min=1e-9) As shown in the line charts, SGDR lift both the training and test accuracies. And the overfitting of the baseline method is alleviated as well. In the second and sub-figure, the fluctuation in the process of gradient descend caused by the cosine learning rate is obvious. And after each learning rate restart, the rate of the descend also gets a restart. And it takes fewer epochs than to get the same accuracy than the baseline. Reference Kingma, D. P., &amp; Ba, J. (2014). Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980. Adaptive Learning Rate Method Learning Rate Schedules and Adaptive Learning Rate Methods Learning Rate Decay and methods in Deep Learning A Newbie’s Guide to Stochastic Gradient Descent With Restarts Zagoruyko, S., &amp; Komodakis, N. (2016). Wide residual networks. arXiv preprint arXiv:1605.07146. Loshchilov, I., &amp; Hutter, F. (2016). Sgdr: Stochastic gradient descent with warm restarts. arXiv preprint arXiv:1608.03983. Smith, L. N. (2017, March). Cyclical learning rates for training neural networks. In 2017 IEEE winter conference on applications of computer vision (WACV) (pp. 464-472). IEEE. He, K., Zhang, X., Ren, S., &amp; Sun, J. (2016). Deep residual learning for image recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition (pp. 770-778). Goyal, P., Dollár, P., Girshick, R., Noordhuis, P., Wesolowski, L., Kyrola, A., ... &amp; He, K. (2017). Accurate, large minibatch sgd: Training imagenet in 1 hour. arXiv preprint arXiv:1706.02677. Krizhevsky, A., Sutskever, I., &amp; Hinton, G. E. (2012). Imagenet classification with deep convolutional neural networks. Advances in neural information processing systems, 25. torch.optim — PyTorch 1.10 documentation Should we do learning rate decay for adam optimizer Loshchilov, I., &amp; Hutter, F. (2017). Decoupled weight decay regularization. arXiv preprint arXiv:1711.05101. Guide to Pytorch Learning Rate Scheduling","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"deep learning tricks","slug":"deep-learning-tricks","permalink":"https://daydreamatnight.github.io/tags/deep-learning-tricks/"}],"author":"Ryan LI"},{"title":"Intro and Pytorch Implementation of Label Smoothing Regularization (LSR)","slug":"Intro-and-Pytorch-Implementation-of-Label-Smoothing-Regularization-LSR","date":"2022-03-04T05:59:58.000Z","updated":"2022-05-02T09:41:10.804Z","comments":true,"path":"2022/03/04/Intro-and-Pytorch-Implementation-of-Label-Smoothing-Regularization-LSR/","link":"","permalink":"https://daydreamatnight.github.io/2022/03/04/Intro-and-Pytorch-Implementation-of-Label-Smoothing-Regularization-LSR/","excerpt":"Soft label is a commonly used trick to prevent overfitting. It can always gain some extra points on the image classification tasks. In this article, I have put together useful information from theory to implementation of it. Recently, I joined a Kaggle image classification competition, I used the pretrained ResNet50 plus other tricks and here is to record some of them I've learned for now.","text":"Soft label is a commonly used trick to prevent overfitting. It can always gain some extra points on the image classification tasks. In this article, I have put together useful information from theory to implementation of it. Recently, I joined a Kaggle image classification competition, I used the pretrained ResNet50 plus other tricks and here is to record some of them I've learned for now. Introduction: from hard label to soft label In deep learning, the neural network is basically a super powerful non-linear regression machine aimed to fit a function between the input and the label. And the result is always called label. Hard label, in another word: the one-hot vector, is the most commonly type of label that is used. For example, in this Kaggle image classification competition, to digitalize the different name of the leaves, it is intuitive to encode the leaves categories as: 0, 1, 2, 3. And the factorized target labels would be somehow like [1,3,0...] where each element stands for the categories of the data. With the resulting category dictionary, it can be easily decoded after the training. Actually, there is a slightly difference in the binary world. What usually do is, the previously factorized label will be extended to be a 2-dimensional \"on-hot\" matrix where the elements stands for the probability of each class. And the network is aimed to train itself to make inference label nearest to the target label. Soft label is just slightly deteriorate the strong one-hot label into a weaker one. Simple explanation: How loss function lost information? In the cross entropy loss function, where y_inference and y_grountruth stands for inference and target label, n stands for the number of class. With the one-hot label, the components are 0 except for the true category. In a other word, the y_inference of the wrong category is not considered at all i.e. the information of the wrong category is lost. Which is against the real word classification. Effectiveness: Visualization In When does label smoothing help? Hinton shows the feature map difference between without and with LSR: When label smoothing is applied, the clusters are much tighter because label smoothing encourages that each example in the training set is to be equidistant from all other class’s templates. With hard targets, the clusters for semantically similar classes (for example different breed of dogs in ImageNet), are isotropic whereas, with label smoothing, clusters lie in an arc as shown in the third row. If you mix two semantically similar classes with a third semantically different class, the clusters are still much better than the ones obtained with hard targets as shown in the fourth row. Experiment: apply in competition Label smoothing can be easily applied in Tensorflow, but there is no such thing in PyTorch. So overwrite the Cross-entropy loss function with LSR (implemented in 2 ways): class LSR(nn.Module): &quot;&quot;&quot;NLL loss with label smoothing. &quot;&quot;&quot; def __init__(self, smoothing=0.0): &quot;&quot;&quot;Constructor for the LSR module. :param smoothing: label smoothing factor &quot;&quot;&quot; super(LSR, self).__init__() self.confidence = 1.0 - smoothing self.smoothing = smoothing def forward(self, x, target): logprobs = torch.nn.functional.log_softmax(x, dim=-1) nll_loss = -logprobs.gather(dim=-1, index=target.unsqueeze(1)) nll_loss = nll_loss.squeeze(1) smooth_loss = -logprobs.mean(dim=-1) loss = self.confidence * nll_loss + self.smoothing * smooth_loss return loss.mean() loss = LSR(0.1) class LSR2(nn.Module): def __init__(self, e=0.01,reduction=&#x27;mean&#x27;): super().__init__() self.log_softmax = nn.LogSoftmax(dim=1) self.e = e self.reduction = reduction def _one_hot(self, labels, classes, value=1): &quot;&quot;&quot; Convert labels to one hot vectors Args: labels: torch tensor in format [label1, label2, label3, ...] classes: int, number of classes value: label value in one hot vector, default to 1 Returns: return one hot format labels in shape [batchsize, classes] &quot;&quot;&quot; #print(&quot;classes&quot;, classes) one_hot = torch.zeros(labels.size(0), classes) # labels and value_added size must match labels = labels.view(labels.size(0), -1) value_added = torch.Tensor(labels.size(0), 1).fill_(value) value_added = value_added.to(labels.device) one_hot = one_hot.to(labels.device) one_hot.scatter_add_(1, labels, value_added) return one_hot def _smooth_label(self, target, length, smooth_factor): &quot;&quot;&quot;convert targets to one-hot format, and smooth them. Args: target: target in form with [label1, label2, label_batchsize] length: length of one-hot format(number of classes) smooth_factor: smooth factor for label smooth Returns: smoothed labels in one hot format &quot;&quot;&quot; #print(&quot;length&quot;, length) #print(&quot;smooth_fact&quot;, smooth_factor) one_hot = self._one_hot(target, length, value=1 - smooth_factor) one_hot += smooth_factor / length return one_hot.to(target.device) def forward(self, x, target): if x.size(0) != target.size(0): raise ValueError(&#x27;Expected input batchsize (&#123;&#125;) to match target batch_size(&#123;&#125;)&#x27; .format(x.size(0), target.size(0))) if x.dim() &lt; 2: raise ValueError(&#x27;Expected input tensor to have least 2 dimensions(got &#123;&#125;)&#x27; .format(x.size(0))) if x.dim() != 2: raise ValueError(&#x27;Only 2 dimension tensor are implemented, (got &#123;&#125;)&#x27; .format(x.size())) #print(&quot;x: &quot;, x) #print(&quot;target&quot;, target) smoothed_target = self._smooth_label(target, x.size(1), self.e) x = self.log_softmax(x) loss = torch.sum(- x * smoothed_target, dim=1) if self.reduction == &#x27;none&#x27;: return loss elif self.reduction == &#x27;sum&#x27;: return torch.sum(loss) elif self.reduction == &#x27;mean&#x27;: return torch.mean(loss) else: raise ValueError(&#x27;unrecognized option, expect reduction to be one of none, mean, sum&#x27;) loss = LSR2(0.1) Pretrained ResNet50 is in use lr, num_epochs, batch_size = 0.01, 10, 256 It can bee seen that the under same random seed, batch_size, lr, and num_epochs, the overall accuracy has a fascinating rise of 0.5. Then apply the LSR and run 50 epochs, with learning rate 0.005 and batch size 256, the result turns to be: It is a exciting improvement, but more tricks still in need. Conclusion 3 disadvantaged of the hard label: the relationship between the true label and the others is neglected, tend to be overfitting the model is tend to be over confident i.e. less generalizable more sensitive to label with noise, wrong labeled for example. Several good things about label smoothing: data augmentation by add more information, compensates for the lack of supervisory signals Improves generalizability Improves noise robust lower the feature norm Improves model calibration Bad things about label smoothing: label smoothing can't give real relationship between labels. It simply adds random noise, under fitting might happen under certain scenarios. If distill in use, the teach network preforms worse when apply label smoothing, more explanation in When does label smoothing help? Reference 标签平滑 - Label Smoothing概述 - 云+社区 - 腾讯云 (tencent.com) 大道至简：算法工程师炼丹Trick手册 (qq.com) 深度学习trick--labelsmooth Label Smoothing 标签平滑 (Label smooth regularization, LSR)_hxxjxw的博客-CSDN博客 When Does Label Smoothing Help? suvojit-0x55aa/label_smoothing.py","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"deep learning tricks","slug":"deep-learning-tricks","permalink":"https://daydreamatnight.github.io/tags/deep-learning-tricks/"}],"author":"Ryan LI"},{"title":"install d2l module on apple m1 chip for deep learning","slug":"install-d2l-moudule-on-apple-m1-chip-for-deep-learning","date":"2022-02-28T14:30:11.000Z","updated":"2022-06-09T10:14:46.816Z","comments":true,"path":"2022/02/28/install-d2l-moudule-on-apple-m1-chip-for-deep-learning/","link":"","permalink":"https://daydreamatnight.github.io/2022/02/28/install-d2l-moudule-on-apple-m1-chip-for-deep-learning/","excerpt":"d2l is a small python module wheel that needed when read the useful deep learning book \"dive into deeplearning\", which provide interactive code examples implemented with MXNet, PyTorch, and Tensorflow. But it took me ton's of time installing this module on the new M1 MacBook Air. Actually its easy, just to record this.","text":"d2l is a small python module wheel that needed when read the useful deep learning book \"dive into deeplearning\", which provide interactive code examples implemented with MXNet, PyTorch, and Tensorflow. But it took me ton's of time installing this module on the new M1 MacBook Air. Actually its easy, just to record this. How to install 1.install miniforge already did, easy. 2.create a new environment with python=3.8 m1 Mac officially support python&gt;=3.9, but 3.8 can be installed. conda create -n d2l python=3.8 conda info --env conda activate d2l 3.install torch torch==1.8.1 and torchvision==0.9.1 is recommended and tested in the book, but # macOS is not currently supported for lts. So the most convenient choice for mac is pytorch==1.10.2, torchvision==0.2.2 conda install pytorch torchvision -c pytorch #4.try install d2l directly clear pip install d2l==0.17.3 thousands lines of terrifying error will come out: $ pip install d2l==0.17.3 Collecting d2l==0.17.3 Using cached d2l-0.17.3-py3-none-any.whl (82 kB) Collecting jupyter==1.0.0 Using cached jupyter-1.0.0-py2.py3-none-any.whl (2.7 kB) Collecting numpy==1.18.5 Using cached numpy-1.18.5.zip (5.4 MB) Installing build dependencies ... done Getting requirements to build wheel ... done Preparing metadata (pyproject.toml) ... done Collecting pandas==1.2.2 Using cached pandas-1.2.2.tar.gz (5.5 MB) Installing build dependencies ... error error: subprocess-exited-with-error × pip subprocess to install build dependencies did not run successfully. │ exit code: 1 ╰─&gt; [3659 lines of output] Ignoring numpy: markers &#x27;python_version == &quot;3.7&quot; and platform_system != &quot;AIX&quot;&#x27; don&#x27;t match your environment Ignoring numpy: markers &#x27;python_version == &quot;3.7&quot; and platform_system == &quot;AIX&quot;&#x27; don&#x27;t match your environment Ignoring numpy: markers &#x27;python_version == &quot;3.8&quot; and platform_system == &quot;AIX&quot;&#x27; don&#x27;t match your environment Ignoring numpy: markers &#x27;python_version &gt;= &quot;3.9&quot;&#x27; don&#x27;t match your environment Collecting setuptools Using cached setuptools-60.9.3-py3-none-any.whl (1.1 MB) Collecting wheel Using cached wheel-0.37.1-py2.py3-none-any.whl (35 kB) Collecting Cython&lt;3,&gt;=0.29.21 Using cached Cython-0.29.28-py2.py3-none-any.whl (983 kB) Collecting numpy==1.17.3 Using cached numpy-1.17.3.zip (6.4 MB) Preparing metadata (setup.py): started Preparing metadata (setup.py): finished with status &#x27;done&#x27; Building wheels for collected packages: numpy Building wheel for numpy (setup.py): started Building wheel for numpy (setup.py): finished with status &#x27;error&#x27; error: subprocess-exited-with-error × python setup.py bdist_wheel did not run successfully. │ exit code: 1 ╰─&gt; [3286 lines of output] Running from numpy source directory. blas_opt_info: blas_mkl_info: customize UnixCCompiler libraries mkl_rt not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE blis_info: customize UnixCCompiler libraries blis not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE openblas_info: customize UnixCCompiler customize UnixCCompiler libraries openblas not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE atlas_3_10_blas_threads_info: Setting PTATLAS=ATLAS customize UnixCCompiler libraries tatlas not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE atlas_3_10_blas_info: customize UnixCCompiler libraries satlas not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE atlas_blas_threads_info: Setting PTATLAS=ATLAS customize UnixCCompiler libraries ptf77blas,ptcblas,atlas not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE atlas_blas_info: customize UnixCCompiler libraries f77blas,cblas,atlas not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE accelerate_info: customize UnixCCompiler libraries accelerate not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] Library accelerate was not found. Ignoring customize UnixCCompiler libraries veclib not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] Library veclib was not found. Ignoring FOUND: extra_compile_args = [&#x27;-faltivec&#x27;, &#x27;-I/System/Library/Frameworks/vecLib.framework/Headers&#x27;] extra_link_args = [&#x27;-Wl,-framework&#x27;, &#x27;-Wl,Accelerate&#x27;] define_macros = [(&#x27;NO_ATLAS_INFO&#x27;, 3), (&#x27;HAVE_CBLAS&#x27;, None)] FOUND: extra_compile_args = [&#x27;-faltivec&#x27;, &#x27;-I/System/Library/Frameworks/vecLib.framework/Headers&#x27;] extra_link_args = [&#x27;-Wl,-framework&#x27;, &#x27;-Wl,Accelerate&#x27;] define_macros = [(&#x27;NO_ATLAS_INFO&#x27;, 3), (&#x27;HAVE_CBLAS&#x27;, None)] /bin/sh: svnversion: command not found non-existing path in &#x27;numpy/distutils&#x27;: &#x27;site.cfg&#x27; lapack_opt_info: lapack_mkl_info: customize UnixCCompiler libraries mkl_rt not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE openblas_lapack_info: customize UnixCCompiler customize UnixCCompiler libraries openblas not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE openblas_clapack_info: customize UnixCCompiler customize UnixCCompiler libraries openblas,lapack not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE flame_info: customize UnixCCompiler libraries flame not found in [&#x27;/opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib&#x27;, &#x27;/usr/local/lib&#x27;, &#x27;/usr/lib&#x27;] NOT AVAILABLE atlas_3_10_threads_info: Setting PTATLAS=ATLAS customize UnixCCompiler libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/d2d/lib ... ... ... None - nothing done with h_files = [&#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/npymath/npy_math_internal.h&#x27;] building library &quot;npysort&quot; sources adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/common&#x27; to include_dirs. None - nothing done with h_files = [&#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/common/npy_sort.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/common/npy_partition.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/common/npy_binsearch.h&#x27;] building extension &quot;numpy.core._dummy&quot; sources adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/config.h&#x27; to sources. adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/_numpyconfig.h&#x27; to sources. executing numpy/core/code_generators/generate_numpy_api.py adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/__multiarray_api.h&#x27; to sources. numpy.core - nothing done with h_files = [&#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/config.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/_numpyconfig.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/__multiarray_api.h&#x27;] building extension &quot;numpy.core._multiarray_tests&quot; sources building extension &quot;numpy.core._multiarray_umath&quot; sources adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/config.h&#x27; to sources. adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/_numpyconfig.h&#x27; to sources. executing numpy/core/code_generators/generate_numpy_api.py adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/__multiarray_api.h&#x27; to sources. executing numpy/core/code_generators/generate_ufunc_api.py adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/__ufunc_api.h&#x27; to sources. adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/umath&#x27; to include_dirs. adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/npymath&#x27; to include_dirs. adding &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/common&#x27; to include_dirs. numpy.core - nothing done with h_files = [&#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/umath/funcs.inc&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/umath/simd.inc&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/umath/loops.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/umath/matmul.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/umath/clip.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/npymath/npy_math_internal.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/src/common/templ_common.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/config.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/_numpyconfig.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/__multiarray_api.h&#x27;, &#x27;build/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy/__ufunc_api.h&#x27;] building extension &quot;numpy.core._umath_tests&quot; sources building extension &quot;numpy.core._rational_tests&quot; sources building extension &quot;numpy.core._struct_ufunc_tests&quot; sources building extension &quot;numpy.core._operand_flag_tests&quot; sources building extension &quot;numpy.fft._pocketfft_internal&quot; sources building extension &quot;numpy.linalg.lapack_lite&quot; sources adding &#x27;numpy/linalg/lapack_lite/python_xerbla.c&#x27; to sources. building extension &quot;numpy.linalg._umath_linalg&quot; sources adding &#x27;numpy/linalg/lapack_lite/python_xerbla.c&#x27; to sources. building extension &quot;numpy.random.mt19937&quot; sources building extension &quot;numpy.random.philox&quot; sources building extension &quot;numpy.random.pcg64&quot; sources building extension &quot;numpy.random.sfc64&quot; sources building extension &quot;numpy.random.common&quot; sources building extension &quot;numpy.random.bit_generator&quot; sources building extension &quot;numpy.random.generator&quot; sources building extension &quot;numpy.random.bounded_integers&quot; sources building extension &quot;numpy.random.mtrand&quot; sources building data_files sources build_src: building npy-pkg config files running build_py copying numpy/version.py -&gt; build/lib.macosx-11.0-arm64-3.8/numpy copying build/src.macosx-11.0-arm64-3.8/numpy/__config__.py -&gt; build/lib.macosx-11.0-arm64-3.8/numpy copying build/src.macosx-11.0-arm64-3.8/numpy/distutils/__config__.py -&gt; build/lib.macosx-11.0-arm64-3.8/numpy/distutils running build_clib customize UnixCCompiler customize UnixCCompiler using build_clib running build_ext customize UnixCCompiler customize UnixCCompiler using build_ext building &#x27;numpy.core._multiarray_umath&#x27; extension compiling C sources C compiler: gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/opt/homebrew/Caskroom/miniforge/base/envs/d2d/include -arch arm64 -I/opt/homebrew/Caskroom/miniforge/base/envs/d2d/include -arch arm64 compile options: &#x27;-DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/d2d/include/python3.8 -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/npymath -c&#x27; extra options: &#x27;-faltivec -I/System/Library/Frameworks/vecLib.framework/Headers&#x27; gcc: numpy/core/src/multiarray/alloc.c gcc: numpy/core/src/multiarray/array_assign_scalar.c gcc: numpy/core/src/multiarray/buffer.c gcc: numpy/core/src/multiarray/common.c gcc: numpy/core/src/multiarray/conversion_utils.c gcc: numpy/core/src/multiarray/datetime_strings.c gcc: numpy/core/src/multiarray/descriptor.c gcc: build/src.macosx-11.0-arm64-3.8/numpy/core/src/multiarray/einsum.c clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly gcc: numpy/core/src/multiarray/hashdescr.c clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly gcc: build/src.macosx-11.0-arm64-3.8/numpy/core/src/multiarray/lowlevel_strided_loops.c gcc: numpy/core/src/multiarray/multiarraymodule.c gcc: numpy/core/src/multiarray/nditer_constr.c clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly gcc: numpy/core/src/multiarray/refcount.c clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly gcc: numpy/core/src/multiarray/scalarapi.c clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly gcc: numpy/core/src/multiarray/temp_elide.c gcc: numpy/core/src/multiarray/vdot.c clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly gcc: build/src.macosx-11.0-arm64-3.8/numpy/core/src/umath/loops.c gcc: numpy/core/src/umath/ufunc_object.c gcc: build/src.macosx-11.0-arm64-3.8/numpy/core/src/umath/scalarmath.c clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly gcc: numpy/core/src/npymath/npy_math.c gcc: numpy/core/src/common/npy_longdouble.c clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly gcc: numpy/core/src/npymath/halffloat.c clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly gcc: numpy/core/src/common/numpyos.c gcc: /private/var/folders/5y/pqfqz2md0njg2slq29yxp12w0000gn/T/pip-install-mxyh83f9/numpy_51614e6143884c3bbd246341eeb3b857/numpy/_build_utils/src/apple_sgemv_fix.c clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitlyclang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly clang: error: the clang compiler does not support &#x27;faltivec&#x27;, please use -maltivec and include altivec.h explicitly error: Command &quot;gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/opt/homebrew/Caskroom/miniforge/base/envs/d2d/include -arch arm64 -I/opt/homebrew/Caskroom/miniforge/base/envs/d2d/include -arch arm64 -DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/d2d/include/python3.8 -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.8/numpy/core/src/npymath -c numpy/core/src/multiarray/array_assign_scalar.c -o build/temp.macosx-11.0-arm64-3.8/numpy/core/src/multiarray/array_assign_scalar.o -MMD -MF build/temp.macosx-11.0-arm64-3.8/numpy/core/src/multiarray/array_assign_scalar.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers&quot; failed with exit status 1 [end of output] note: This error originates from a subprocess, and is likely not a problem with pip. error: legacy-install-failure × Encountered error while trying to install package. ╰─&gt; numpy note: This is an issue with the package mentioned above, not pip. hint: See above for output from the failure. [end of output] note: This error originates from a subprocess, and is likely not a problem with pip. error: subprocess-exited-with-error × pip subprocess to install build dependencies did not run successfully. │ exit code: 1 ╰─&gt; See above for output. note: This error originates from a subprocess, and is likely not a problem with pip. Scroll to the top, it looks like jupyter==1.0.0, pandas==1.2.2, numpy==1.18.5 are required, and numpy==1.18.5 is where the error comes from. 4.As a result, install jupyter==1.0.0 and pandas==1.2.2 first pip install jupyter==1.0.0 conda can't be installed by pip, but can by conda conda install pandas=1.2.2 5.numpy==1.18.5 can not be installed by pip or conda thanks to tensorflow's wheel, numpy==1.18.5's wheel for mac is included in the addons download and unzip tensorflow_macos-0.1alpha0.tar.gz go to the unzipped folder in terminal, and run pip install arm64/numpy-1.18.5-cp38-cp38-macosx_11_0_arm64.whl check pip list |grep pandas pip list |grep jupyter pip list |grep numpy pandas 1.2.2 jupyter 1.0.0 jupyter-client 7.1.2 jupyter-console 6.4.0 jupyter-core 4.9.2 jupyterlab-pygments 0.1.2 jupyterlab-widgets 1.0.2 numpy 1.18.5 5.install d2l pip install d2l Sucess! Reference https://zh-v2.d2l.ai/chapter_installation/index.html https://parthiban-kannan.medium.com/install-tensorflow-on-apple-macbook-m1-release-c1ce7e65cd0 https://github.com/apple/tensorflow_macos/issues/48","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"https://daydreamatnight.github.io/tags/mac/"},{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"}],"author":"Ryan LI"},{"title":"Build and configure a personal blog via hexo and yilia on github","slug":"Build-and-configure-a-personal-blog-via-hexo-and-yilia","date":"2022-02-22T08:15:03.000Z","updated":"2022-05-28T03:51:04.561Z","comments":true,"path":"2022/02/22/Build-and-configure-a-personal-blog-via-hexo-and-yilia/","link":"","permalink":"https://daydreamatnight.github.io/2022/02/22/Build-and-configure-a-personal-blog-via-hexo-and-yilia/","excerpt":"Technical blog has a hundred benefits and no harm This blog records the process of building and customizing this personal blog from 0 to 1 Unfortunately, the yilia theme has been no longer updating and it is too buggy right now. I switch to other theme.","text":"Technical blog has a hundred benefits and no harm This blog records the process of building and customizing this personal blog from 0 to 1 Unfortunately, the yilia theme has been no longer updating and it is too buggy right now. I switch to other theme. Preliminary Why personal blog Keeping a technical blog can be a great way of documenting your growth as a developer. This documentation can be particularly useful on a professional level. All software companies want to hire smart, thoughtful, communicative developers who can easily assimilate into a team, and who are ready to both teach and learn Static vs dynamic blog there are 2 types of mainstream personal blog: static and dynamic. Static is recommended considering its simplicity, 0 maintenance and 0 safety worry. Static blog Dynamic blog Price low, 0 cost when the traffic is relatively low High, server is needed, cloud server of high performance is usually very expensive. Features Limited, only third-party services can be used to complete certain \"dynamic\" functions, such as comments Rich, in WordPress for example, basically any kind of plugins can be found. Featuers such as auto-resizing, media players, multiple authors, scheduled posts, user analysis can be easily realize. Speed Fast Slow Maintainance 0 Need to care about the sever Markdown Supported yet it's the only choice not supported Geeky YES No And I also chose static because I'm geeky (poor of money) and results-driven (lazy to spend time on maintaining). Build a static blog via hexo Set environment 1.check machine information: macOS on M1 MacBook 2.Install Nodejs, including node and npm open https://nodejs.org/en/download/ and click download 3.Install Git Aready installed 4.Open terminal, check node, npm and git versions $ npm -v $ node -v $ git --version 8.3.1 v16.14.0 git version 2.32.0 (Apple Git-132) Initialize blog 1.install hexo via npm $ sudo npm install -g hexo-cli $ hexo -v INFO Validating config hexo: 6.0.0 hexo-cli: 4.3.0 os: darwin 21.2.0 12.1 node: 16.14.0 v8: 9.4.146.24-node.20 uv: 1.43.0 zlib: 1.2.11 brotli: 1.0.9 ares: 1.18.1 modules: 93 nghttp2: 1.45.1 napi: 8 llhttp: 6.0.4 openssl: 1.1.1m+quic cldr: 40.0 icu: 70.1 tz: 2021a3 unicode: 14.0 ngtcp2: 0.1.0-DEV nghttp3: 0.1.0-DEV 2.create a new folder in terminal and initialize the blog $ cd ~/Documents/ $ makedir self_blog $ cd self_blog/ $ hexo init INFO Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitINFO Install dependencies⸨#########⠂⠂⠂⠂⠂⠂⠂⠂⠂⸩ ⠹ idealTree:hexo-front-matter: timing idealTree:node_modules/hexo-front-matter Completed in 212msINFO Start blogging with Hexo! 3.view the blog on localhost, s for start $ hexo s INFO Validating config INFO Start processing INFO Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. Write first blog 1.write a new blog, n for new $ hexo n &#x27;Hello ShouRou&#x27; INFO Validating config INFO Created: ~/Documents/self_blog/source/_posts/Hello-ShouRou.md the blog can be written on any editor, Typora in use. open ~/Documents/self_blog/source/_posts/Hello-ShouRou.md 2.clean cache(not necessary) $ hexo clean 3.generate the blog, g for generate $ hexo g INFO Validating config INFO Start processing INFO Files loaded in 61 ms (node:10719) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency (Use `node --trace-warnings ...` to show where the warning was created) (node:10719) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency (node:10719) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency (node:10719) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency (node:10719) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency (node:10719) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency INFO Generated: archives/2022/index.html INFO Generated: archives/index.html INFO Generated: js/script.js INFO Generated: fancybox/jquery.fancybox.min.css INFO Generated: index.html INFO Generated: css/style.css INFO Generated: css/fonts/fontawesome-webfont.woff2 INFO Generated: fancybox/jquery.fancybox.min.js INFO Generated: js/jquery-3.4.1.min.js INFO Generated: archives/2022/02/index.html INFO Generated: css/fonts/FontAwesome.otf INFO Generated: css/fonts/fontawesome-webfont.woff INFO Generated: css/fonts/fontawesome-webfont.eot INFO Generated: css/fonts/fontawesome-webfont.ttf INFO Generated: css/images/banner.jpg INFO Generated: 2022/02/22/hello-world/index.html INFO Generated: css/fonts/fontawesome-webfont.svg INFO Generated: 2022/02/22/Hello-ShouRou/index.html INFO 18 files generated in 161 ms Deploy to remote (GitHub) 1.Create a new repository with the name of $username.github.io use default setting 2.open terminal, install plugin of deploying to git $ npm install --save hexo-deployer-git 3.Open the _config.yml file in the blog root directory, add these lines afterwards deploy: type: git repo: git@github.com:DaydreamAtNight/DaydreamAtNight.github.io.git branch: master 4.Go to the blog root, deploy the blog to remote, d for deploy $ hexo clean $ hexo g $ hexo d Open https://daydreamatnight.github.io/ to see if it works Change theme to yilia default theme of hexo is called landscape and it's not beautiful enough to most of the people. Yilia is a fast, simple, elegant and popular theme. Thought it has not been updated since Nov 2017, it still a good choice for fresh bloggers. Download and deploy yilia 1.go to the blog root $ git clone https://github.com/litten/hexo-theme-yilia theme/yilia 2.eidt the _config.yml file, add theme: yilia 3.clean and deploy hexo $ hexo clean $ hexo g $ hexo d Basic customize yillia Activate aboutme ‘left slider’ button 1.go to terminal run $ npm i hexo-generator-json-content --save 2.go to the blog root directory, add these lines to the _config.yml file jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true Customize avatar put the avatar file in directory themes/yilia/source/img do not add to the public repository directly, or the img get cleaned every time running hexo clean , need to upload to the same dir again after this command. Set favicon (icon on the tab of website) put the favicon img in directory themes/yilia/source/img Bitbug is a way of converting image into .ico file. Other configuration Set file of yillia is in themes/yilia/_config.yml as: # Header author: Ryan LI subtitle: &#x27;Daydreaming at night&#x27; menu: main: / archives: /archives/index.html learn: /tags/learn/ # SubNav subnav: github: &quot;https://github.com/DaydreamAtNight&quot; # weibo: &quot;#&quot; # rss: &quot;#&quot; # zhihu: &quot;#&quot; #qq: &quot;#&quot; #weixin: &quot;#&quot; #jianshu: &quot;#&quot; #douban: &quot;#&quot; #segmentfault: &quot;#&quot; #bilibili: &quot;#&quot; #acfun: &quot;#&quot; mail: &quot;mailto:lishoushou2019@gmail.com&quot; #facebook: &quot;#&quot; #google: &quot;#&quot; #twitter: &quot;#&quot; #linkedin: &quot;#&quot; rss: /atom.xml # 是否需要修改 root 路径 # 如果您的网站存放在子目录中，例如 http://yoursite.com/blog， # 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 root: / # Content # 文章太长，截断按钮文字 # excerpt_link: more # 文章卡片右下角常驻链接，不需要请设置为false show_all_link: &#x27;show all&#x27; # 数学公式 mathjax: false # 是否在新窗口打开链接 open_in_new: false # 打赏 # 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏 reward_type: 0 # # 打赏wording # reward_wording: &#x27;谢谢你请我吃糖果&#x27; # # 支二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg # alipay: # # 微信二维码图片地址 # weixin: # 目录 # 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录 toc: 1 # 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为false toc_hide_index: true # 目录为空时的提示 toc_empty_wording: &#x27;directery none exist&#x27; # 是否有快速回到顶部的按钮 top: true # Miscellaneous baidu_analytics: &#x27;&#x27; google_analytics: &#x27;&#x27; favicon: /img/favicon.ico #你的头像url avatar: /img/avatar.jpeg #是否开启分享 # share_jia: true # #评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment # #不需要使用某项，直接设置值为false，或注释掉 # #具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/ # #1、多说 # duoshuo: false # #2、网易云跟帖 # wangyiyun: false # #3、畅言 # changyan_appid: false # changyan_conf: false # #4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的 # disqus: false # #5、Gitment # gitment_owner: false #你的 GitHub ID # gitment_repo: &#x27;&#x27; #存储评论的 repo # gitment_oauth: # client_id: &#x27;&#x27; #client ID # client_secret: &#x27;&#x27; #client secret # 样式定制 - 一般不需要修改，除非有很强的定制欲望… style: # 头像上面的背景颜色 header: &#x27;#ece0cf&#x27; # 右滑板块背景 slider: &#x27;linear-gradient(45deg,#b4a698,#ece0cf)&#x27; # slider的设置 slider: # 是否默认展开tags板块 showTags: false # 智能菜单 # 如不需要，将该对应项置为false # 比如 #smart_menu: # friends: false smart_menu: innerArchive: &#x27;All articles&#x27; # friends: &#x27;友链&#x27; aboutme: &#x27;About me&#x27; # friends: # 友情链接1: http://localhost:4000/ # 友情链接2: http://localhost:4000/ # 友情链接3: http://localhost:4000/ # 友情链接4: http://localhost:4000/ # 友情链接5: http://localhost:4000/ # 友情链接6: http://localhost:4000/ aboutme: Stay hungry, stay fullish Advance customize Stop visit litten.me:9005 Sometimes the user's client information is collected, see here for details. Stop reporting by clear the contents in themes/yilia/source-src/js/report.js Limit display numbers on the main page Simply insert &lt;! -- more --&gt; to show only what comes before it while collapse the afterwards, click on the article title to read it in full. Easily add pics to blogs via hexo-renderer-marked plugin 1.find post_asset_folder in _config.yml file in the blog root directory, set to be true post_asset_folder:true 2.Install plugin npm install hexo-renderer-marked --save 3.change _config.yml in blog root directory as post_asset_folder: true marked: prependRoot: true postAsset: true then img can be easily add with ![img description](img.png) after add the image to the folder with the same name as the article in /source/_posts/ 4.change Typora pereference as img can drag into typro, yet blogname need to be deleted before deploying Show number of articles and words on the left panel 1.add wordcount plugin in terminal npm i --save hexo-wordcount 2.change themes/yilia/layout/_partial/left-col.ejs after &lt;nav class=&quot;header-menu&quot;&gt; &lt;ul&gt; &lt;% for (var i in theme.menu)&#123; %&gt; &lt;li&gt;&lt;a href=&quot;&lt;%- url_for(theme.menu[i]) %&gt;&quot;&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt; &lt;%&#125;%&gt; &lt;/ul&gt; &lt;/nav&gt; add &lt;span class=&quot;post-count&quot;&gt;&lt;%=site.posts.length%&gt; articles &lt;span&gt;&lt;%= totalcount(site, &#x27;0,0.0a&#x27;) %&gt;&lt;/span&gt; words&lt;/span&gt; add style sheet in themes/yilia/source/main.0cf68a.css .post-count&#123; font-size: 12px; color: #696969; &#125; Show number of visits in the footer busuanzi is in use, which is super easy to deploy change themes/yilia/layout/_partial/footer.ejs as &lt;footer id=&quot;footer&quot;&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div id=&quot;footer-info&quot;&gt; &lt;div class=&quot;footer-left&quot;&gt; &lt;!-- total visits number --&gt; &lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt; &lt;!-- busuanzi statistics --&gt; &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;&amp;nbsp;visits in total &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; &lt;% &#125; %&gt; &lt;!-- end --&gt; &lt;/div&gt; &lt;div class=&quot;footer-right&quot;&gt; &amp;copy; &lt;%= date(new Date(), &#x27;YYYY&#x27;) %&gt; &lt;%= config.author || config.title %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/footer&gt; and add busuanzi: enable: true Add button of hiding the left panel Refer to hexo yilia主题添加隐藏左边栏目按钮 1.add style list to file /themes/yilia/source/main.0cf68a.css /*stylesheet for hide the left panel*/ .mymenucontainer &#123; display:block; cursor:pointer; left:0; top:0; width:35px; height:35px; z-index:9999; position:fixed; &#125; .bar1 &#123; width:35px; height:3px; border-radius:3px; background-color:#8E6D51; margin:6px 0; transition:0.1s; -webkit-transform:rotate(-45deg) translate(-8px,8px); transform:rotate(-45deg) translate(-8px,8px); &#125; .bar2 &#123; width:35px; height:3px; border-radius:3px; background-color:#8E6D51; margin:6px 0; transition:0.1s; opacity:0; &#125; .bar3 &#123; width:35px; height:3px; border-radius:3px; background-color:#8E6D51; margin:6px 0; transition:0.1s; -webkit-transform:rotate(45deg) translate(-4px,-6px); transform:rotate(45deg) translate(-4px,-6px); &#125; .change .bar1 &#123; -webkit-transform:rotate(0deg) translate(0px,0px); transform:rotate(0deg) translate(0px,0px); &#125; .change .bar2 &#123; opacity:1; &#125; .change .bar3 &#123; -webkit-transform:rotate(0deg) translate(0px,0px); transform:rotate(0deg) translate(0px,0px); &#125; /*stylesheet for hide the left panel end*/ 2.go to /themes/yilia/layout/layout.ejs add before &lt;div class=\"left-col\" &lt;div class=&quot;mymenucontainer&quot; onclick=&quot;myFunction(this)&quot;&gt; &lt;div class=&quot;bar1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;bar2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;bar3&quot;&gt;&lt;/div&gt; &lt;/div&gt; 3.add between &lt;/body&gt; and &lt;/html&gt; &lt;script&gt; var hide = false; function myFunction(x) &#123; x.classList.toggle(&quot;change&quot;); if(hide == false)&#123; $(&quot;.left-col&quot;).css(&#x27;display&#x27;, &#x27;none&#x27;); $(&quot;.mid-col&quot;).css(&quot;left&quot;, 6); $(&quot;.tools-col&quot;).css(&#x27;display&#x27;, &#x27;none&#x27;); $(&quot;.tools-col.hide&quot;).css(&#x27;display&#x27;, &#x27;none&#x27;); hide = true; &#125;else&#123; $(&quot;.left-col&quot;).css(&#x27;display&#x27;, &#x27;&#x27;); $(&quot;.mid-col&quot;).css(&quot;left&quot;, 300); $(&quot;.tools-col&quot;).css(&#x27;display&#x27;, &#x27;&#x27;); $(&quot;.tools-col.hide&quot;).css(&#x27;display&#x27;, &#x27;&#x27;); hide = false; &#125; &#125; &lt;/script&gt; Beautiful contents navigation in articles Default navigator is kind of ugly so found a more beautiful version, to use default version, simply change toc: 2 in file themes/yilia/_config.yml 1.add this block at the end of themes/yilia/source/main.0cf68a.css /* navigator */ #container .show-toc-btn,#container .toc-article&#123;display:block&#125; .toc-article&#123;z-index:100;background:#fff;border:1px solid #ccc;max-width:250px;min-width:150px;max-height:500px;overflow-y:auto;-webkit-box-shadow:5px 5px 2px #ccc;box-shadow:5px 5px 2px #ccc;font-size:12px;padding:10px;position:fixed;right:35px;top:129px&#125;.toc-article .toc-close&#123;font-weight:700;font-size:20px;cursor:pointer;float:right;color:#ccc&#125;.toc-article .toc-close:hover&#123;color:#000&#125;.toc-article .toc&#123;font-size:12px;padding:0;line-height:20px&#125;.toc-article .toc .toc-number&#123;color:#333&#125;.toc-article .toc .toc-text:hover&#123;text-decoration:underline;color:#2a6496&#125;.toc-article li&#123;list-style-type:none&#125;.toc-article .toc-level-1&#123;margin:4px 0&#125;.toc-article .toc-child&#123;&#125;@-moz-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@-webkit-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@-o-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;.show-toc-btn&#123;display:none;z-index:10;width:30px;min-height:14px;overflow:hidden;padding:4px 6px 8px 5px;border:1px solid #ddd;border-right:none;position:fixed;right:40px;text-align:center;background-color:#f9f9f9&#125;.show-toc-btn .btn-bg&#123;margin-top:2px;display:block;width:16px;height:14px;background:url(http://7xtawy.com1.z0.glb.clouddn.com/show.png) no-repeat;-webkit-background-size:100%;-moz-background-size:100%;background-size:100%&#125;.show-toc-btn .btn-text&#123;color:#999;font-size:12px&#125;.show-toc-btn:hover&#123;cursor:pointer&#125;.show-toc-btn:hover .btn-bg&#123;background-position:0 -16px&#125;.show-toc-btn:hover .btn-text&#123;font-size:12px;color:#ea8010&#125; .toc-article li ol, .toc-article li ul &#123; margin-left: 30px; &#125; .toc-article ol, .toc-article ul &#123; margin: 10px 0; &#125; 2.after &lt;/header&gt;&lt;% &#125; %&gt; in file themes/yilia/layout/_partial/article.ejs add &lt;!-- navigator --&gt; &lt;% if (!index &amp;&amp; post.toc)&#123; %&gt; &lt;p class=&quot;show-toc-btn&quot; id=&quot;show-toc-btn&quot; onclick=&quot;showToc();&quot; style=&quot;display:none&quot;&gt; &lt;span class=&quot;btn-bg&quot;&gt;&lt;/span&gt; &lt;span class=&quot;btn-text&quot;&gt;...&lt;/span&gt; &lt;/p&gt; &lt;div id=&quot;toc-article&quot; class=&quot;toc-article&quot;&gt; &lt;span id=&quot;toc-close&quot; class=&quot;toc-close&quot; title=&quot;hide navigator&quot; onclick=&quot;showBtn();&quot;&gt;×&lt;/span&gt; &lt;strong class=&quot;toc-title&quot;&gt;navigator&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; function showToc()&#123; var toc_article = document.getElementById(&quot;toc-article&quot;); var show_toc_btn = document.getElementById(&quot;show-toc-btn&quot;); toc_article.setAttribute(&quot;style&quot;,&quot;display:block&quot;); show_toc_btn.setAttribute(&quot;style&quot;,&quot;display:none&quot;); &#125;; function showBtn()&#123; var toc_article = document.getElementById(&quot;toc-article&quot;); var show_toc_btn = document.getElementById(&quot;show-toc-btn&quot;); toc_article.setAttribute(&quot;style&quot;,&quot;display:none&quot;); show_toc_btn.setAttribute(&quot;style&quot;,&quot;display:block&quot;); &#125;; &lt;/script&gt; &lt;% &#125; %&gt; &lt;!-- navigator end --&gt; 3.add toc:true to the articles that need the navigator. Add custormize header to articles when run hexo new to initiate a new blog, a defaul head would generate, change it by change the scaffolds/post.md in the root directory --- title: &#123;&#123; title &#125;&#125; date: &#123;&#123; date &#125;&#125; author: daydreamatnight toc: true declare: true tags: --- more headers to choose when writing a blog before a blog, more paras can be chosen to add --- title: #你的博客文章名 toc: ture #toc date: 2020-09-07 09:25:00 #文章时间 author: GavenLee #作者 img: /source/images/xxx.jpg #图片 top: true #是否顶置 cover: true #是否在引导页轮播 coverImg: /images/1.jpg #轮播图片 password: #阅读密码这里被加密 mathjax: false #mathjax summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories: Markdown #分类 tags: #标签 abbrlink: HexoLearn #链接 --- Disable auto wrap in code block locate and delete white-space:pre-wrap in file themes/yilia/source/main.0cf68a.css Add copy button to code block 1.create a clipboard_use.js file in directory themes/yilia/source $(&quot;.highlight&quot;).wrap(&quot;&lt;div class=&#x27;code-wrapper&#x27; style=&#x27;position:relative&#x27;&gt;&lt;/div&gt;&quot;); /*create copy button after page loaded*/ !function (e, t, a) &#123; /* code */ var initCopyCode = function () &#123; var copyHtml = &#x27;&#x27;; copyHtml += &#x27;&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;&#x27;; copyHtml += &#x27; &lt;i class=&quot;fa fa-clipboard&quot;&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;&#x27;; copyHtml += &#x27;&lt;/button&gt;&#x27;; $(&quot;.highlight .code&quot;).before(copyHtml); var clipboard = new ClipboardJS(&#x27;.btn-copy&#x27;, &#123; target: function (trigger) &#123; return trigger.nextElementSibling; &#125; &#125;); clipboard.on(&#x27;success&#x27;, function (e) &#123; e.trigger.innerHTML = &quot;&lt;i class=&#x27;fa fa-check&#x27; style=&#x27;color:green&#x27;&gt;&lt;/i&gt;&lt;span style=&#x27;color:green&#x27;&gt;copy success&lt;/span&gt;&quot; setTimeout(function () &#123; e.trigger.innerHTML = &quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;&quot; &#125;, 1000) e.clearSelection(); &#125;); clipboard.on(&#x27;error&#x27;, function (e) &#123; e.trigger.innerHTML = &quot;&lt;i class=&#x27;fa fa-exclamation&#x27; style=&#x27;color:red&#x27;&gt;&lt;/i&gt;&lt;span style=&#x27;color:red&#x27;&gt;copy success&lt;/span&gt;&quot; setTimeout(function () &#123; e.trigger.innerHTML = &quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;&quot; &#125;, 1000) e.clearSelection(); &#125;); &#125; initCopyCode(); &#125;(window, document); 2.load .js file, edit themes/yilia/layout/layout.ejs file, add before &lt;/body&gt;. &lt;!-- copy button in code block--&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/clipboard@2.0.4/dist/clipboard.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/clipboard_use.js&quot;&gt;&lt;/script&gt; 3.add stylesheet the end of themes/yilia/source/main.0cf68a.css /* code copy button */ .btn-copy &#123; display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc, #eee); border: 1px solid #d5d5d5; border-radius: 3px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0; &#125; .btn-copy span &#123; margin-left: 5px; &#125; .highlight:hover .btn-copy &#123; opacity: 1; &#125; /* code copy button end */ 4.add copy button icon, edit themes/yilia/layout/_partia/head.ejs add before &lt;/head&gt; &lt;!-- copy button icon --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;//cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css&quot;&gt; Allow search engines to index this Blog index Google to this Blog check if google can find you, enter site:daydreamatnight.github.io to see Add url to goole search console 1.open google console , add URL link of the blog (https://daydreamatnight.github.io), in the URL prefix block, click CONTINUE 2.upload the html file to the blog root directory and deploy the website, then clicke verify. little buggy here, see don’t upload the file using hexo command add sitemap for google add sitemap for google and baidu together A sitemap is a file where you provide information about the pages, videos, and other files on your site, and the relationships between them. Search engines like Google read this file to more intelligently crawl your site. A sitemap tells Google which pages and files you think are important in your site, and also provides valuable information about these files: for example, for pages, when the page was last updated, how often the page is changed, and any alternate language versions of a page. 1.install sitemap plugins $ npm install hexo-generator-sitemap --save $ npm install hexo-generator-baidu-sitemap --save 2.add to the _config.yml in the blog root # hexo sitemap sitemap: path: sitemap.xml baidusitemap: path: baidusitemap.xml 3.Deploy the blog, go to https://daydreamatnight.github.io/sitemap.xml and https://daydreamatnight.github.io/baidusitemap.xml to see if sitemaps are uploaded 4.Go to Google Search Console, in the left panel, click Sitemaps, enter your sitemap URL sitemap.xml Googlebot won't download the sitemap immediately. Give it time. add robots.txt A robots.txt file tells search engine crawlers which URLs the crawler can access on your site. This is used mainly to avoid overloading your site with requests; it is not a mechanism for keeping a web page out of Google. To keep a web page out of Google, block indexing with noindex or password-protect the page. A robots.txt file is used primarily to manage crawler traffic to your site, and usually to keep a file off Google, depending on the file type: User-agent: * Allow: / Allow: /archives/ Allow: /tags/ Allow: /categories/ Allow: /about/ Allow: /guestbook/ Allow: /others/ Disallow: /js/ Disallow: /css/ Disallow: /lib/ Sitemap: https://daydreamatnight.github.io/sitemap.xml Sitemap: https://daydreamatnight.github.io/baidusitemap.xml deploy the blog and wait. check if sitemap is available After uploaded several updates, my sitemap still didn't fetched by google. So I went to check, it turns out my url setting in _config.yml is wrong. So I changed it to be my home url. And check it with URL Inspection Tool. 1.Open google search console, add the url of sitemap in the upper url inspecting box. It's normal it shows URL is not on Google because it shouldn't as a sitemap. 2.click live test to check the availability. It should be available, then just wait. index Bing to this Blog 1.go to Bing webmaster and login 2.connect with google webmaster. index baidu to this Blog(not possibly working) go to the baidu search console , Click 添加网站 and input every thing, do similar thing add sitemap just wait forever, this could take 2000 years, so give up Add copyright statement 1.open file themes/yilia/layout/_partial/article.ejs add before &lt;% if ((theme.reward_type === 2 || (theme.reward_type === 1 &amp;&amp; post.reward)) &amp;&amp; !index)&#123; %&gt; &lt;!-- add copyright statement --&gt; &lt;% if(theme.declare)&#123;%&gt; &lt;%- partial(&#x27;post/declare&#x27;) %&gt; &lt;% &#125; %&gt; &lt;!-- end --&gt; 2.create new file declare.ejs under themes/yilia/layout/_partial/post/ with: &lt;!--add copyright statement https://github.com/JoeyBling/hexo-theme-yilia-plus/commit/c1215e132f6d5621c5fea83d3c4f7ccbcca074a3--&gt; &lt;% var sUrl = url.replace(/index\\.html$/, &#x27;&#x27;); sUrl = /^(http:|https:)\\/\\//.test(sUrl) ? sUrl : &#x27;https:&#x27; + sUrl; %&gt; &lt;!-- #copyright setting：0-close statement; 1-declare statement if declare: true in the article header; 2-always declare the copyright --&gt; &lt;% if ((theme.declare.declare_type === 2 || (theme.declare.declare_type === 1 &amp;&amp; post.declare)) &amp;&amp; !index)&#123; %&gt; &lt;div class=&quot;declare&quot;&gt; &lt;strong class=&quot;author&quot;&gt;author: &lt;/strong&gt; &lt;% if(config.author != undefined)&#123; %&gt; &lt;%= config.author%&gt; &lt;% &#125;else&#123;%&gt; &lt;font color=&quot;red&quot;&gt;please add right &quot;author&quot; name in &quot;_config.yml&quot; in the blog root&lt;/font&gt; &lt;%&#125;%&gt; &lt;br&gt; &lt;strong class=&quot;create-time&quot;&gt;posting date: &lt;/strong&gt; &lt;%- date(post.date, &#x27;YYYY-MM-DD HH:MM:SS&#x27;) %&gt; &lt;br&gt; &lt;strong class=&quot;update-time&quot;&gt;last update: &lt;/strong&gt; &lt;%- date(post.updated, &#x27;YYYY-MM-DD HH:MM:SS&#x27;) %&gt; &lt;br&gt; &lt;strong class=&quot;article-titles&quot;&gt;article title: &lt;/strong&gt; &lt;a href=&quot;&lt;%= config.url %&gt;/&lt;%= post.path %&gt;&quot; title=&quot;&lt;%= post.title %&gt;&quot; target=&quot;_blank&quot;&gt;&lt;%= post.title %&gt;&lt;/a&gt; &lt;br&gt; &lt;strong class=&quot;article-url&quot;&gt;article link: &lt;/strong&gt; &lt;a href=&quot;&lt;%= config.url %&gt;/&lt;%= post.path %&gt;&quot; title=&quot;&lt;%= post.title %&gt;&quot; target=&quot;_blank&quot;&gt;&lt;%= config.url %&gt;/&lt;%= post.path %&gt;&lt;/a&gt; &lt;br&gt; &lt;strong class=&quot;copyright&quot;&gt;copyright:&lt;/strong&gt; This work is licensed under a &lt;a rel=&quot;license&quot; href=&quot;&lt;%= theme.declare.licensee_url%&gt;&quot; title=&quot;&lt;%= theme.declare.licensee_alias %&gt;&quot;&gt;&lt;%= theme.declare.licensee_name%&gt;&lt;/a&gt; licience &lt;% if(theme.declare.licensee_img != undefined)&#123; %&gt; &lt;a rel=&quot;license&quot; href=&quot;&lt;%= theme.declare.licensee_url%&gt;&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;&lt;%= theme.declare.licensee_img%&gt;&quot;/&gt;&lt;/a&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;% &#125; else &#123;%&gt; &lt;div class=&quot;declare&quot; hidden=&quot;hidden&quot;&gt;&lt;/div&gt; &lt;% &#125; %&gt; &lt;!-- add copyright statement --&gt; 3.add stylesheet the end of themes/yilia/source/main.0cf68a.css /*stylesheet for the delcare*/ .declare &#123; background-color: #eaeaea; margin-top: 2em; border-left: 3px solid #ff1700; padding: .5em 1em; &#125; /*stylesheet for the delcare end*/ 4.add at the end of themes/yilia/_config.yml file: declare: declare_type: 1 licensee_url: http://creativecommons.org/licenses/by-nc-sa/4.0/ licensee_name: &#x27;CC BY-NC-SA 4.0&#x27; licensee_alias: &#x27;CC BY-NC-SA 4.0&#x27; licensee_img: https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png Add mind-map support npm install hexo-markmap Detailed in its Github Example: &#123;% markmap 300px %&#125; - Testa - test1 - test2 - Testb - test1 - test2 &#123;%endmarkmap%&#125; Add Latex math support Change the renderer to the more powerful pandoc: 1.Install pandoc on macOS: copybrew install pandoc 2.in the blog root directory uninstall the default renderer then install the pandoc renderer: copynpm uninstall hexo-renderer-marked --save npm install hexo-renderer-pandoc --save 3.install the hexo math plugin copynpm install hexo-math --save 4.add these lines to the hexo _config file copymarkdown: plugins: - markdown-it-footnote - markdown-it-sup - markdown-it-sub - markdown-it-abbr - markdown-it-emoji - hexo-math 5.add these lines to the theme _config file copy# MathJax Support mathjax: enable: true per_page: true 6.rebuild the to blog see changes 7.Examples: \\(this_{is}an\\frac{inline}{equation}\\) \\[ \\begin{equation} \\mathbf{K}_\\mathbf{1}=\\frac{1}{\\Delta r}\\ \\left[\\begin{matrix}\\begin{matrix}-1&amp;1\\\\-1&amp;1\\\\\\end{matrix}&amp;\\ &amp;\\ \\\\\\begin{matrix}\\ &amp;\\ddots\\\\\\end{matrix}&amp;\\begin{matrix}\\ddots&amp;\\ \\\\\\end{matrix}&amp;\\ \\\\\\ &amp;-1\\ &amp;1\\\\\\end{matrix}\\right],\\ \\ {\\ \\mathbf{K}}_\\mathbf{2}=\\frac{1}{\\Delta r}\\ \\left[\\begin{matrix}\\begin{matrix}-1&amp;1\\\\\\ &amp;\\ddots\\\\\\end{matrix}&amp;\\begin{matrix}\\\\\\ddots\\\\\\end{matrix}&amp;\\ \\\\\\begin{matrix}\\ &amp;\\ \\\\\\end{matrix}&amp;-1&amp;1\\ \\\\\\ &amp;-1\\ &amp;1\\\\\\end{matrix}\\right] \\label{K2} \\end{equation} \\] The last snapshot Ok, never spend time on a no-longer maintained project. Here's the last figure of it. Reference https://flatironschool.com/blog/the-benefits-of-blogging-how-and-why-to-keep-a-technical-blog/ https://weblog.masukomi.org/2015/10/18/static-vs-dynamic-blogging/ https://www.cnblogs.com/aoguai/p/11781505.html https://www.kblog.top/post/30452.html https://wkzqn.gitee.io/2020/02/16/typora%E7%BC%96%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E6%97%B6%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/ https://segmentfault.com/a/1190000009478837#articleHeader5 https://hilyy.xyz/how-to-allow-google-to-index-your-hexo-blog-website-google-search-console-verification-methods/ https://busuanzi.ibruce.info/ https://creativecommons.org/choose/results-one?license_code=by-nc-sa&amp;jurisdiction=&amp;version=4.0&amp;lang=en https://www.jcchouinard.com/sitemap-could-not-be-read-couldnt-fetch-in-google-search-console/ https://cqh-i.github.io/2019/08/07/hexo-yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9A%90%E8%97%8F%E5%B7%A6%E8%BE%B9%E6%A0%8F%E7%9B%AE%E6%8C%89%E9%92%AE/","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://daydreamatnight.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://daydreamatnight.github.io/tags/hexo/"}]},{"title":"Hello ShouRou","slug":"Hello-ShouRou","date":"2022-02-22T02:44:29.000Z","updated":"2022-06-09T10:15:14.480Z","comments":true,"path":"2022/02/22/Hello-ShouRou/","link":"","permalink":"https://daydreamatnight.github.io/2022/02/22/Hello-ShouRou/","excerpt":"","text":"Welcome This is the first blog on ShouRou. The name of the website is extracted from the cute nikenames between a pair of good-looking lovers. Shoushou the dumb and his girl Rourou the clever, cute and sexy will start up magnifisent careers of each own and be together as a happy couple.","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://daydreamatnight.github.io/tags/blog/"}]}],"categories":[],"tags":[{"name":"OpenFOAM","slug":"OpenFOAM","permalink":"https://daydreamatnight.github.io/tags/OpenFOAM/"},{"name":"fluid dynamics","slug":"fluid-dynamics","permalink":"https://daydreamatnight.github.io/tags/fluid-dynamics/"},{"name":"mac","slug":"mac","permalink":"https://daydreamatnight.github.io/tags/mac/"},{"name":"deep learning","slug":"deep-learning","permalink":"https://daydreamatnight.github.io/tags/deep-learning/"},{"name":"paper reading","slug":"paper-reading","permalink":"https://daydreamatnight.github.io/tags/paper-reading/"},{"name":"blog","slug":"blog","permalink":"https://daydreamatnight.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://daydreamatnight.github.io/tags/hexo/"},{"name":"deep learning tricks","slug":"deep-learning-tricks","permalink":"https://daydreamatnight.github.io/tags/deep-learning-tricks/"}]}